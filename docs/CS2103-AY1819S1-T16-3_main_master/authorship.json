[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003d FoodZoom"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-T16-3/main[image:https://travis-ci.org/CS2103-AY1819S1-T16-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "https://ci.appveyor.com/project/juxd/main/branch/master[image:https://ci.appveyor.com/api/projects/status/bv2mp10bqjo93700/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-T16-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-T16-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Welcome to FoodZoom! FoodZoom is a desktop food delivery management application designed for food businesses to streamline their delivery process. FoodZoom is responsive and quick, allowing managers to plan routes for order delivery and dispatch them to delivery men using a Command Line Interface (CLI). The delivery men can also use this application to view their delivery routes and increase their efficiency."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Make your food delivery system more seamless today with FoodZoom!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "* AddressBook-Level4 project is created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "juxd": 4,
      "monmanuela": 4,
      "-": 27
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "  \"ignoreGlobList\": [\"about-us/**\", \"**index.html\"],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "  \"ignoreCommitList\": [],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "  ["
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "      \"githubId\": \"kohchihao\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "      \"displayName\": \"Koh Chi Hao\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "      \"authorNames\": [\"Marcus Koh\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "      \"githubId\": \"jinyingtan\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "      \"displayName\": \"Tan Jin Ying\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "      \"authorNames\": [\"Jin Ying\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    },"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "      \"githubId\": \"monmanuela\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "      \"displayName\": \"Monika Manuela Hengki\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "      \"authorNames\": [\"Monika\", \"Monika Manuela Hengki\"]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    },"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "      \"githubId\": \"juxd\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "      \"displayName\": \"Julius Sander\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "      \"authorNames\": [\"Julius S\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    },"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "      \"githubId\": \"rrtheonlyone\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "      \"displayName\": \"Rahul Rajesh\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "      \"authorNames\": [\"Rahul Rajesh\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 32
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juxd"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002726.0-jre\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "juxd": 1,
      "-": 246
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "FoodZoom was developed by Team https://github.com/CS2103-AY1819S1-T16-3[T16-3] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003d\u003d\u003d Rahul"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "image::rrtheonlyone.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "{empty}[https://github.com/rrtheonlyone[github]] [https://www.linkedin.com/in/rahul-rajesh-979919110/[portfolio]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "Roles: Integration, code quality"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003d\u003d\u003d Julius Sander"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "image::juxd.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "{empty}[https://github.com/juxd[github]] [\u003c\u003cjuliussander#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "Roles: Code quality and testing +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003d\u003d\u003d Monika Manuela"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "image::monmanuela.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "{empty}[http://github.com/yijinl[github]] [https://www.linkedin.com/in/monika-manuela-hengki-a9383a54[portfolio]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "Roles: Team lead, UI +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003d\u003d\u003d Koh Chi Hao"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "image::kohchihao.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "{empty}[https://github.com/kohchihao[github]] [https://www.kohchihao.com/[portfolio]]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "Roles: Scheduling and tracking deliverables and deadlines +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003d\u003d\u003d Tan Jin Ying"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "image::jinyingtan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "{empty}[https://github.com/jinyingtan[github]] [https://www.tanjinying.com/[portfolio]]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": "Role: Documentation, UI +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "juxd": 5,
      "kohchihao": 17,
      "-": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-T16-3/main/issues[issue tracker] if you"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "* *Email us* : You can also reach us at `e0176905 [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 3,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003d FoodZoom - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T16-3/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "By: `Team T16-3`      Since: `Oct 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson.java`] and link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/commons/util/XmlUtilTest.java[`XmlUtilTest.java`] and link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "Note how the `Model` simply raises a `OrderBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ".  `Logic` uses the `OrderBookParser` class to parse the user command."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedOrderBook`."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "It extends `OrderBook` with an undo/redo history, stored internally as an `orderBookStateList` and"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "`currentStatePointer`."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "* `VersionedOrderBook#commit()` -- Saves the current order book state in its history."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "* `VersionedOrderBook#undo()` -- Restores the previous order book state from its history."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "* `VersionedOrderBook#redo()` -- Restores a previously undone order book state from its history."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitOrderBook()`, `Model#undoOrderBook()` and"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "`Model#redoOrderBook()` respectively."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedOrderBook` will be initialized with the"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "initial order book state, and the `currentStatePointer` pointing to that single order book state."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th order in the order book. The `delete` command calls"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "`Model#commitOrderBook()`, causing the modified state of the order book after the `delete 5` command executes to be"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "saved in the `orderBookStateList`, and the `currentStatePointer` is shifted to the newly inserted order book state."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "Step 3. The user executes `/order add ...` to add a new order. The `add` command also calls"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "`Model#commitOrderBook()`, causing another modified order book state to be saved into the `orderBookStateList`."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "If a command fails its execution, it will not call `Model#commitOrderBook()`, so the order book state will not be saved"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "into the `orderBookStateList`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "Step 4. The user now decides that adding the order was a mistake, and decides to undo that action by executing the"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "`undo` command. The `undo` command will call `Model#undoOrderBook()`, which will shift the `currentStatePointer` once"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " to the left, pointing it to the previous order book state, and restores the order book to that state."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial order book state, then there are no previous"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "order book states to restore. The `undo` command uses `Model#canUndoOrderBook()` to check if this is the case. If so,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoOrderBook()`, which shifts the `currentStatePointer` once"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "If the `currentStatePointer` is at index `orderBookStateList.size() - 1`, pointing to the latest order book state,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "then there are no undone order book states to restore. The `redo` command uses `Model#canRedoOrderBook()` to check if"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "Step 5. The user then decides to execute the command `/order list`. Commands that do not modify the order book, such"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " as `list`, will usually not call `Model#commitOrderBook()`, `Model#undoOrderBook()` or `Model#redoOrderBook()`."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " Thus, the `orderBookStateList` remains unchanged."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "Step 6. The user executes `/order clear`, which calls `Model#commitOrderBook()`. Since the `currentStatePointer` is not"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "pointing at the end of the `orderBookStateList`, all order book states after the `currentStatePointer` will be"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "purged. We designed it this way because it no longer makes sense to redo the `/order add ...` command. This is"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire order book."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of order book states."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "`HistoryManager` and `VersionedOrderBook`."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003d\u003d\u003d Login Command"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "The `/login` command allows the `Manager` to login into the FoodZoom application and use authenticated commands like"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "`/order add`, `/order edit`, `/order list`, ... .Basically all the `/order` commands and `/deliveryman` commands. The"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "only commands that can be used without logging in are `/signup`, `/login`, `/help` and `/history`. The format of this"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " command is `/login u/[USERNAME] pw/[PASSWORD]`."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "In our current implementation, the `/login` command inherits from `Command` class. 2 components, `Logic` and `Model`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "are involved in the execution of this command. The `Logic` class is responsible for parsing the user input and the"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "`Model` class deals with storing the `UserSession` and checking if the user is logged in or not."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "Below is a sequence diagram that illustrates how these 2 components interact when the `/login` command is executed:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "image::LoginCommandSequenceDiagram1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "Figure 3.2.1.1 Sequence diagram to illustrate `Logic` component interactions for `/login`."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "image::LoginCommandSequenceDiagram2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "Figure 3.2.1.2 Sequence diagram to illustrate `Logic` and `Model` component interactions for `/login`."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "As shown above, execution of the `/login` command comprises of the following steps:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "1. `LogicManager` invokes the `parseCommand` method of `OrderBookParser`, taking in user inputs as arguments."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "2. During the `parseCommand` method call, an instance of `LoginCommandParser` will be created with the keyword"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "`/login` is matched. `LoginCommandParser` then extracts the remaining user inputs and a `LoginCommand` instance will"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "be returned provided that the user\u0027s input is correct."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "3. `LoginCommand` then invokes `isRegisteredUser` method which belongs to `ModelManager` class. The `ModelManager`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "will the invoke `IsRegisteredUser` method in `UsersList` to check if the user is in the list of users."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "4. After checking if the user is in the list, if it returns `true` then `storeUserInSession` method will be invoked"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "to store the `User` object inside `UserSession`. The `execute` method will then return a `CommandResult` with success"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " login message."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "5. If the user is not in the list, `execute` method will just return a `CommandResult` with failure to login message."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How `/login` executes"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "* **Alternative 1 (current choice):** Check if user is in users list."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "** Cons: Not necessary to implement users list because there will only be 1 user."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "* **Alternative 2:** Automatic login even after application is opened more than once."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "** Pros: User do not need to login multiple times after application is re-opened."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "** Cons: Difficult to implement because it requires caching user details locally."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data Structure to support `/login` command"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "* **Alternative 1 (current choice):** Create a unique user list to store all the user and create a `users.xml` to"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "store locally."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "** Pros: Easy to implement and you can make sure that there is only unique users."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "** Cons: Not necessary because there would only be 1 user using the application."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "* **Alternative 2:** Store user session inside `User` class"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "** Pros: Easy to handle login session."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "** Cons: Would break the SRP (Single Responsibility Principle) because `User` class should only be about the user and"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " nothing to do with login at all."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "\u003d\u003d\u003d Find Order Feature"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "The `find` order command allows searching of orders in FoodZoom."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "It allows finding of orders based on either the name or phone specified in the order."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "The following sequence diagram shows the sequence flow from the `LogicManager` to the `ModelManager` when a user enter a `find` command:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "image::OrderFindSequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "Figure 3.3.1.1 Sequence Diagram for order `find` command"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "From the sequence diagram:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ".  When `LogicManager` receive the `execute` command, it class the `parseCommand` method in `OrderBookParser`."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ".  `OrderBookParser` will receive `/order` as the command and instantiate `OrderCommandParser` to further parse the command."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ".  If the arguments specified in the `find` command are valid, a `FindCommand` will be created and return back to the `LogicManger`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ".  `LogicManger` will proceed to call the `execute` command of `FindCommand`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ".  `FindCommand` will updated the list in the `Model` and create a new `CommandResult` to be returned."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Currently, FoodZoom only allows find for other based on name or phone, but not specifying both name and phone together."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "This differentiation is handled by `FindCommandParser` which checks for the fields specified."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "It throws a `ParseException` error if either both name and phone is specified together or when fields other than name or phone is being specified."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "`FindCommandParser` will return an `OrderNameContainsKeywordPredicate` if a valid name is specified or return an `OrderPhoneContainsKeyPredicate`."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "In order for `FindCommand` to take a general predicate, both `OrderNameContainsKeywordPredicate` and `OrderPhoneContainsKeywordPredicate` implements the interface `OrderContainsKeywordPredicated` and `OrderContainsKeywordPredicate` extends from a `Predicate` of `Order`.  +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "The following shows how is one of the predicate implemented:"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "----"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * Tests that a {@code Order}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class OrderNameContainsKeywordPredicate implements OrderContainsAnyKeywordsPredicate {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public boolean test(Order order) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // test method..."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "----"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `FindCommand`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* **Alternative 1 (current choice):** Name and Phone has its own predicate having its own test method."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "** Pros: It adheres to the Single Responsibility Principle (SRP) and the Separation of Concern (SoC). Each Predicate will only handles its own search parameters."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "** Cons: More classes will be needed, which results in more code being written"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* **Alternative 2:** One predicate class which handles name and phone."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "** Pros: Reduces the number of classes, which makes it for new developers to understand."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "** Cons: It decreases the cohesion as one class will need to handle different predicates."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `FindCommandParser`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* **Alternative 1 (current choice):** `FindCommandParser` handles all the parsing"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "** Pros: It makes it easy for new developers to understand as `FindCommandParser` handles all the parsing of the predicates."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "** Cons: It violates the Single Responsibility Principles (SRP). `FindCommandParser` has to break down the arguments as well as check which argument is present."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* **Alternative 2:** Having a utilities class to handle the break down and checking of which command is present."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "** Pros: It adheres to SRP as handling of argument is pass on to a utility class."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "** Cons: Increase in the complexity of the code for new developers as more classes are needed and more lines of code will be written"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003d\u003d\u003d Add deliveryman feature"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "juxd"
        },
        "content": "The `add` deliveryman command allows the Manager to add deliveryman into FoodZoom. It ensures that the newly-added deliveryman"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "juxd"
        },
        "content": "is not a duplicate of an existing deliveryman."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "juxd"
        },
        "content": "The following diagram shows the sequence flow from the `LogicManager` to the `ModelManager` when a user enters a `/deliveryman add`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "juxd"
        },
        "content": "command:"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "juxd"
        },
        "content": "image::DeliverymanAddCommandSequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "juxd"
        },
        "content": "Figure 3.4.1.1 Sequence Diagram for deliveryman `add` command"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "juxd"
        },
        "content": "From Figure 3.4.1.1:"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "juxd"
        },
        "content": "1. When `LogicManager` receives the `execute` command from the App, it calls the `parseCommand` method in `OrderBookParser`."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "juxd"
        },
        "content": "2. `OrderBookParser` will receive `/deliveryman` as the command and instantiate `DeliverymanCommandParser` to parse the rest of the command."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "juxd"
        },
        "content": "3. If the arguments specified in the `add` command are valid, a `DeliverymanAddCommand` would be created and returned back"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "juxd"
        },
        "content": "to the `LogicManager`."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "juxd"
        },
        "content": "4. `LogicManager` would proceed to call `execute` of the `DeliverymanAddCommand`."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "juxd"
        },
        "content": "5. A new deliveryman would be added and a successful `CommandResult` would be returned and displayed."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "juxd"
        },
        "content": "FoodZoom\u0027s deliveryman is only stored with names currently, and can be search and listed"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "juxd"
        },
        "content": "only with names."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "juxd"
        },
        "content": "These names are checked against validations with the `Name` model, and this is a compulsory"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "juxd"
        },
        "content": "field for a deliveryman to be added. If the provided command either does not have a name, or is an invalid `Name`,"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "juxd"
        },
        "content": "a `ParseException` would be thrown."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of `DeliverymanAddCommandParser`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "juxd"
        },
        "content": "* ** Alternative 1 (current choice):** `DeliverymanCommand` is parsed first, then as a `DeliverymanAddCommand`."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "juxd"
        },
        "content": "** Pros: Better modularization for all commands relating to `Deliveryman`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "juxd"
        },
        "content": "** Cons: More complicated file \u0026 package organization"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "juxd"
        },
        "content": "* ** Alternative 2: ** `DeliverymanAddCommand` is parsed straight from `OrderBookParser`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "juxd"
        },
        "content": "** Pros: Easier to manage file structure"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "juxd"
        },
        "content": "** Cons: Poor modularization of related `Command` classes."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of `DeliverymanAddCommand`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "juxd"
        },
        "content": "* **Alternative 1 (current choice):** Deliverymen are stored in separate file"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "juxd"
        },
        "content": "** Pros: Allows for greater flexibility in how deliverymen interact with other resources like order/routes - better separation of concerns."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "juxd"
        },
        "content": "** Cons: Harder to implement \u0026 maintain"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "juxd"
        },
        "content": "* **Alternative 2:** Deliverymen are stored in the same file as `Order` s"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "juxd"
        },
        "content": "** Pros: Easier to implement \u0026 maintain"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "juxd"
        },
        "content": "** Cons: Deliveryman can only be accessed \u0026 treated as parts of an `Order`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003d\u003d\u003d Create Route Feature"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "The `create` route command allows creation of routes in FoodZoom."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "It allows creating routes based on the order ids."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "The following sequence diagram shows the sequence flow from the `LogicManager` to the `ModelManager` when a user enter a `/route create` command:"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "image::CreateRouteCommandSequenceDiagram1.png[width\u003d800]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Figure 3.5.1.1 Sequence diagram to illustrate `Logic` component interactions for route `create` command."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "image::CreateRouteCommandSequenceDiagram2.png[width\u003d800]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Figure 3.5.1.2 Sequence diagram to illustrate `Logic` and `Model` component interactions for route `create` command."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "From the sequence diagram:"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ".  When `LogicManager` receive the `execute` command, it calls the `parseCommand` method in `OrderBookParser`."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ".  `OrderBookParser` will receive `/route` as the command and instantiate `RouteCommandParser` to further parse the command."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ".  If the arguments specified in the `create` command are valid, a `CreateRouteCommand` will be created and return back to the `LogicManger`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ".  `LogicManger` will proceed to call the `execute` command of `CreateRouteCommand`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ".  `CreateRouteCommand` will proceed to call the `getFilteredOrderList` method of `Model`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ".  Iterate through the `orderIds`, if valid, add the `Index` and the corresponding `Order` to the set of `Index` and `Order` respectively."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ".  Create a `Route` from the set of `Order`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ".  A new route would be added and create a new `CommandResult` to be returned."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `CreateRouteCommandParser`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "* **Alternative 1 (current choice):** `RouteCommandParser` is parsed first, then pass to `CreateRouteCommandParser`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "** Pros: Better modularization for `Route` commands, better cohesion, adheres to the Single Responsibility Principle."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "** Cons: More complicated file \u0026 package structure."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "* **Alternative 2:** `CreateRouteCommand` is parsed straight from `OrderBookParser`."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "** Pros: Easier to manage the file structure."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "** Cons: Poor modularization of the `Command` classes."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003d\u003d\u003d Add Order Feature"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "The `add` order command allows the `Manager` to create a new order and add it to the list of orders."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "Adding a new order requires the customer\u0027s `name`, customer\u0027s `phone` number, customer\u0027s `address`, `food` and the `datetime`. +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "The format of the `add` command is `/order add f/FOOD n/NAME p/PHONE a/ADDRESS dt/DATETIME`."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "The following sequence shows the sequence when the `add` command is execute by the `Manager`:"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "image::OrderAddSequenceDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "Figure 3.6.1.1 Sequence Diagram for order `find` command"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "From the diagram above:"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ".  `LogicManager`\u0027s execute is called when the `Manager` keys in `/order add` and it calls upon `parseCommand` of `OrderBookParser` to parse the command"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ".  `OrderBookParser` will initialize `OrderCommandParser` and invoke the method `parse` to further parse `order` command"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ".  `AddCommandParser` will be invoked and passed the parameters of the add command."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ".  If all the arguments of the `add` commands are valid, `AddCommand` will be returned to the `LogicManager`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ".  `LogicManger` will then calls the method `execute` method of `AddCommand`"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ".  `AddCommand` will call `addOrder` passing `Order` as an argument to `Model` and after calls `commitOrderBook` method from `Model`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ".  A `CommandResult` will be returned at the end,"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data Structure of list of order"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "* **Alternative 1 (Current Approach):** Using a `UniqueOrderList`"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "** Pros: The comparison is not as rigid. You can create orders with similar names/address as long as it passes a less stringent criteria."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "** Cons: You need additional overhead. You need to create an extra class and function to check."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "* **Alternative 2:** Using a `Set`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "** Pros: Do not need an extra function. You can use use `equals` for comparison"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "** Cons: It is a strict check and as a result you will not be allowed to create orders with same address/same name etc."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data Structure of `Order`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "* **Alternative 1 (Current Approach):** All parameters in `Order` are abstracted out to have a class of its own."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "** Pros: It adheres to the Single Responsibility Principles (SRP) and the Separation of Concerns (SoC) as each parameter checks whether it is valid"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "** Cons: Many different classes are created which increases the complexity of the code"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "* **Alternative 2:** Store all parameters of `Order` as `String`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "** Cons: Violates SRP as one single class will need to check if the arguments are valid."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/OrderBookParser.java[`OrderBookParser`] is responsible for"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "analyzing command words."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/OrderBookParser"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ".java[`OrderBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " the same intended command."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003d\u003d\u003d\u003d `Model`"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/OrderBook.java[`OrderBook`] API need to be updated."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/OrderBook"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ".java[`OrderBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/OrderBook.java[`OrderBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/OrderBook.java[`OrderBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `OrderBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/OrderBookSystemTest.java[`OrderBookSystemTest#assertCommandBoxShowsDefaultStyle() and OrderBookkSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleOrderBookChangedEvent"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "(OrderBookChangedEvent)`] to update the number of persons whenever there are new changes to the orderbook."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/OrderBookSystemTest.java[`OrderBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ". Add a new method `backupOrderBook(ReadOnlyOrderBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/OrderBookStorage.java[`OrderBookStorage`] interface."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlOrderBookStorage.java[`XmlOrderBookStorage`] class."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "*Scenario:* You are a software maintainer for `orderbook`, as the former developer team has moved on to new projects."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/OrderBookParser.java[`OrderBookParser`] to accept a"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "`RemarkCommand`."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/OrderBookParserTest.java[`OrderBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/OrderBookParser.java[`OrderBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/OrderBookParserTest.java[`OrderBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "for the sample data (delete your `orderBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ". Fix `invalidAndValidPersonOrderBook.xml`, `typicalPersonsOrderBook.xml`, `validOrderBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "* Business Owners and Delivery Man"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "* Needs to manage a large collection of orders"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "* Needs to dispatch orders to relevant delivery man"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "* Wants to view route information and calculate timings"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "* Wants insights on purchases and order history"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "*Value proposition*: Integrate end-to-end systems and streamline food delivery management"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* * *` |new manager |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "|`* * *` |manager |login/logout/signup of application |able to protect my data and access it when I need do"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* * *` |manager |add a new customer order | can track the current orders I"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "have"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* * *` |manager |add or remove a deliveryman | can manage the deliverymen available to dispatch orders"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* * *` |manager |assign orders to available deliverymen | can send out orders and fulfil customer requests"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* * *` |manager |delete an order | can cancel orders that should not be in the queue"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* * *` |manager |find an order using phone number | can find specific orders quickly"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* *` |manager |update my menu (add/remove food items) | can manage the food items I have and expand by business"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* *` |manager |view a basic route for order | have a clearer idea on how to dispatch my deliverymen"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* *` |manager |find orders by more files (name, food item etc.) | have more options to locate specific orders"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* *` |manager |trace status of orders (estimated timeline)  | can have visibility on when orders will be delivered"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* *` |manager |have a dashboard to view succesful and failed orders  | can have insights on how my outlet is doing"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* *` |manager |have a dynamic indication of which deliveryman is available  | can send out multiple orders to many deliverymen and have improved service"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* *` |manager |view individual customer order history  | gain insights on"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "what specific customers are ordering"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "|`* *` |manager |find my deliverman by name     | find details about the deliveryman,"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* *` |manager |see a thumbnail of deliveryman  | can easily tell who is who in one glance"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "|`* *` |manager |edit my order  | make changes to the order"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`*` |manager |sms confirmation on succesful order  | have visibility on how my order delivery service is doing"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`*` |manager |view a map with placeholders showing orders/deliverymen routes  | have immediate view on delivery status and gain insights on my service"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* * *` |new deliveryman |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* * *` |deliveryman |login/logout of application |able to protect my data and access it when I need do"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* * *` |deliveryman |list assigned orders |can tell what are the jobs I need to complete"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* * *` |deliveryman |get customer contact for orders |can contact customer if there is a need (delivery delay/incorrect address/queries etc.)"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* *` |deliveryman |view delivery route for orders |dont have to consult external service to know how to reach the destination"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`* *` |deliveryman |confirm succesful order in system |the manager can track the completion of orders"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|`*` |deliveryman |send feedback on delivery process |the manager can relate and improve the dispatch service"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "juxd"
        },
        "content": "(For the use cases below, the *System* is FoodZoom and the *Actor* is the Managers)"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003d\u003d\u003d Use Case: Add Order"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "juxd"
        },
        "content": "1.  Manager requests to add order to the FoodZoom"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "juxd"
        },
        "content": "2.  FoodZoom checks the format of the add command"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "juxd"
        },
        "content": "3.  FoodZoom adds the order to the database"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "juxd"
        },
        "content": "4.  FoodZoom shows success message to the manager"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "juxd"
        },
        "content": "* 2a. Add command is invalid"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "juxd"
        },
        "content": "* 2b. FoodZoom shows an error message to the manager"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "juxd"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003d\u003d\u003d Use Case: Find orders by phone number"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "juxd"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "juxd"
        },
        "content": "1.  Manager request to list orders by phone number"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "juxd"
        },
        "content": "2.  FoodZoom shows a list of orders and their status"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "juxd"
        },
        "content": "3.  Use case ends."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "juxd"
        },
        "content": "* 1a. The phone number not found in the list of orders."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "juxd"
        },
        "content": "+"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "juxd"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "juxd"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003d\u003d\u003d Use Case: Assign Order to Delivery man"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "juxd"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "juxd"
        },
        "content": "1. Manager requests to view pending orders"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "juxd"
        },
        "content": "2. FoodZoom lists all orders"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "juxd"
        },
        "content": "3. Manager adds pending orders to planner"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "juxd"
        },
        "content": "4. FoodZoom shows travel route and timing details to Manager for all orders added"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "juxd"
        },
        "content": "5. Manager requests to add route to available deliverymen"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "juxd"
        },
        "content": "6. FoodZoom adds route to delivery man and displays on same screen"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "juxd"
        },
        "content": "7. Manager requests to show routing information"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "juxd"
        },
        "content": "8. Manager shown a screen showing what each deliveryman is assigned"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "juxd"
        },
        "content": "*Extension*"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "juxd"
        },
        "content": "* 2a.  No available orders"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "juxd"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "juxd"
        },
        "content": "* 4a.  Travel Details cannot be fetched"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "juxd"
        },
        "content": "** 4b.  FoodZoom shows relevant error message to user"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "juxd"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "juxd"
        },
        "content": "*\t5a. No available delivery-men"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "juxd"
        },
        "content": "**\t5b. FoodZoom shows error message"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "juxd"
        },
        "content": "+"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "juxd"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "juxd"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003d\u003d\u003d Use Case: Delete Order"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "juxd"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "juxd"
        },
        "content": "1.  Manager requests to find the order by phone number"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "juxd"
        },
        "content": "2.  FoodZoom shows the order"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "juxd"
        },
        "content": "3.  Manager requests to delete the order"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "juxd"
        },
        "content": "4.  FoodZoom deletes the order"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "juxd"
        },
        "content": "5.  FoodZoom shows message order successfully deleted"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "juxd"
        },
        "content": "+"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "juxd"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "juxd"
        },
        "content": "*Extension*"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "juxd"
        },
        "content": "* The order does not exist."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "juxd"
        },
        "content": "** 1a. FoodZoom shows message that order does not exist"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "juxd"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "juxd"
        },
        "content": "(For the use cases below, the *System* is FoodZoom and the *Actor* is the Delivery-men)"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "juxd"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003d\u003d\u003d Use Case: View Assigned Route"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "juxd"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "juxd"
        },
        "content": "1.  Delivery man logs in to the app"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "juxd"
        },
        "content": "2.  FoodZoom shows if delivery man has routes available"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "juxd"
        },
        "content": "3.  Delivery man requests for assigned route"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "juxd"
        },
        "content": "4.  FoodZoom shows the assigned route"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "juxd"
        },
        "content": "5.  Delivery man looks through each destination and checks address info"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "juxd"
        },
        "content": "6.  Delivery man checks for status of food"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "juxd"
        },
        "content": "7.  Deliveryman logs out to collect food \u0026 leave for delivery"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "juxd"
        },
        "content": "+"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "juxd"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "juxd"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "juxd"
        },
        "content": "* 2a. Delivery man doesn\u0027t have any routes"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "juxd"
        },
        "content": "+"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "juxd"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "juxd"
        },
        "content": "* 4a. Location info is unclear to deliveryman"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "juxd"
        },
        "content": "** 4b. Delivery man searches for order to get customer\u0027s contact"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "juxd"
        },
        "content": "** 4c. Delivery man contacts customer to clarify location"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "juxd"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ". Should be able to hold up to 1000 orders and should respond within 2 seconds"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ". The system should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ". The system should only show data to the people with the \u003c\u003cappropriate-roles,appropriate roles\u003e\u003e"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ". The system should persist data about orders for the past year"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "[[appropriate-roles]] Appropriate roles::"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "Manager, Delivery Men"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 60,
      "juxd": 148,
      "monmanuela": 34,
      "rrtheonlyone": 102,
      "kohchihao": 133,
      "-": 894
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "\u003d FoodZoom - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T16-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "By: `T16-3`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "FoodZoom is a food delivery management platform targeted at food business looking to streamline their delivery process. It is responsive and quick, allowing manager to plan their routes and dispatch orders to delivery man *using a Command Line Interface* (CLI) while having the benefits of a Graphical User Interface (GUI). The delivery man can also this application to view their delivery routes and increase their efficiency."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `foodzoom.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your FoodZoom."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "e.g. typing *`/help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* *`/order list`* : lists all orders"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **`/order add`**`f/Roti Prata n/John Smith p/12345678 a/block 123, Clementi Drive, #01-01 dt/10-10-2018 10:10:10` : adds the food `Roti Prata`, customers phone number `12345678`, customer address `block 123, Clementi Drive, #01-01` and order date and time to `10-10`2018 10:10:10` to the list of orders."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* **`/order delete`**`3` : deletes the 3rd order shown in the current list of orders"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* *`/exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [p/PHONE]` can be used as `n/John Doe p/9112` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME a/ADDRESS`, `a/ADDRESS n/NAME` is also acceptable."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "\u003d\u003d\u003d Viewing help : `/help` `[Since v1.1]`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/help`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "\u003d\u003d\u003d Sign up for system : `/signup` `[Since v1.1]`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/signup n/NAME u/USERNAME pw/PASSWORD`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* `/signup n/John Doe u/johndoe pw/johndoepassword`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "\u003d\u003d\u003d Login to system : `/login` `[Since v1.1]`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/login u/USERNAME pw/PASSWORD`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* `/login u/manager pw/password`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logout from system : `/logout` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/logout`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "\u003d\u003d\u003d Adding an order : `/order add` `[Since v1.1]`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Adds an order to the list of orders +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `/order add f/FOOD n/NAME p/PHONE a/ADDRESS dt/DATETIME`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* Able to add more than 1 food items by specifying more food tags. e.g. `f/Roti Prata f/Ice Milo`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* DATETIME format is `dd-MM-YYYY h:m:s` where dd is date, MM is month,  YYYY is year, h is 24 hour of the day, m is minutes, s is seconds. e.g. 14-10-2018 23:30:00."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* `/order add f/Roti Prata n/John Smith p/12345678 a/block 123, Clementi Drive, #01-01 dt/26-12-2018 10:10:54`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* `/order add a/block 55 Computing Drive n/Harry f/Tissue Prata f/Nasi Briyani p/81889111 dt/14-12-2018 14:10:54`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "\u003d\u003d\u003d Listing all orders : `/order list` `[Since v1.1]`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Shows a list of all orders in chronological order +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/order list`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing an order : `/order edit` `[Since v1.2]`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Edits an existing order in the list of orders. +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `/order edit INDEX [f/FOOD] [n/NAME] [p/PHONE] [a/ADDRESS] [dt/DATETIME]`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the order at the specified `INDEX`. The index refers to the index number shown by `/order list`. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* When a parameter is specified, e.g. `f/`, `n/`, empty fields are not allowed. Value must be specified."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* `/order list` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "`/order edit 1 p/91234567 n/Jonathan` +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Edits the phone number and name of the 1st order to be `91234567` and `Jonathan` respectively."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* `/order list` +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "`/order edit 2 f/Maggi Goreng f/Ice Milo` +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Edits the food of the 2nd order to be `Maggi Goreng, Ice Milo`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Finding orders by name or phone : `/order find` `[Since v1.2]`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Find orders whose name or phone contain in the given parameter. +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/order find [n/NAME] [p/PHONE]` +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* The search is case insensitive. e.g `tom` will match `Tom`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* Partial match is allowed for searching of names. e.g. `tom` will match `tom smith`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* `/order find n/john` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* `/order find p/9112 2113` +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Returns `91122113`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "\u003d\u003d\u003d Deleting an order : `/order delete` `[Since v1.1]`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Deletes the specified order from the list of order. +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/order delete INDEX`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* Deletes an order at the specified `INDEX`."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* The index refers to the index number shown in the displayed order list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* `/order list` +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "`/order delete 2` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Deletes the 2nd order in the list of orders."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* `/order find n/tom` +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "`/order delete 1` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Deletes the 1st order in the results of the `find` command."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "\u003d\u003d\u003d Clearing all order entries : `/order clear` `[Since v1.1]`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Clears all entries from the list of orders. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/order clear`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a delivery man : `/deliveryman add` `[Since v1.2]`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Adds a delivery man to the list of delivery men +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/deliveryman add n/NAME p/PHONE [a/ADDRESS]`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* `/deliveryman add n/John Smith p/12345678 a/block 123, Clementi Drive, #01-01`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* `/deliveryman add a/block 55 Computing Drive n/Harry p/81889111`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* `/deliveryman add n/Willy p/23456789`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all delivery men : `/deliveryman list` `[Since v1.2]`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Shows a list of all delivery men in chronological order +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/deliveryman list`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a delivery man : `/deliveryman edit` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Edits an existing delivery man in the list of delivery men. +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/delivery man edit INDEX [n/NAME] [p/PHONE] [a/ADDRESS]`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the delivery man at the specified `INDEX`. The index refers to the index number shown by `/deilveryman list`. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* When a parameter is specified, e.g. `n/`, `p/` empty fields are not allowed. A value must be specified."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* `/deliveryman list` +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "`/deliveryman edit 1 n/John Doe p/12345678` +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Edits the name and phone number of the 1st delivery man to be `John Doe` and `12345678` respectively."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Finding delivery man by name : `/deliveryman find` `[Since v1.2]`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Find delivery men whose name contain in the given parameter. +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/deliveryman find n/NAME` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "****"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* The search is case insensitive. e.g `tom` will match `Tom`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* Only search one name at a time"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* The order of the keywords does not matter. e.g. `Alice Smith` will match `Smith Alice`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* Partial match is allowed e.g. `tom` will match `tommy`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "****"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* `/deliveryman find n/john` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a delivery man : `/deliveryman delete` `[Since v1.2]`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Deletes the specified delivery man from the list of delivery men +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/deliveryman delete INDEX`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "****"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes a delivery man at the specified `INDEX`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* The index refers to the index number shown in the displayed delivery men list."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "****"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* `/deliveryman list` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "`/deliveryman delete 2` +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Deletes the 2nd delivery man in the list of delivery men."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* `/deliveryman find n/tom` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "`/deliveryman delete 1` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Deletes the 1st delivery man in the results of the `find` command."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all delivery men entries : `/deliveryman clear` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Clears all entries from the list of delivery men. +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/deliveryman clear`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "\u003d\u003d\u003d Creating a new route: `/route create` `[Since v1.1]`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Creates a route with a set of orders +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `/route create o/ORDER_ID`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* All fields need to have at least a value. e.g. `o/` is not allowed."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* Able to add more than 1 orders by specifying more tags. e.g. `o/1 o/2 o/3`."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* `/route create o/1 o/3`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all available routes: `/route list` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Shows a list of all existing routes and assigned delivery men +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/route list`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding an order to a route : `/route add` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Add an existing order to an existing route +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/route add r/ROUTE_INDEX o/ORDER_INDEX`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "****"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* All fields need to have at least a value. e.g. `o/` is not allowed."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* Able to add more than 1 orders by specifying more tags. e.g. `o/1 o/2 o/3`."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "****"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* `/route list` +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "`/order list` +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "`/route add r/1 o/2` +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Adds the 2nd order to the 1st route."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* `/route list` +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "`/order list` +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "`/route add r/3 o/4 o/5 o/6` +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Adds the 4th, 5th, 6th order to the 3rd route."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a route: `/route delete` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Deletes the specified route from the list of routes +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/route delete INDEX`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "****"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* Deletes a route at the specified `INDEX`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* The index refers to the index number shown by `/route list`."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "****"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* `/route list` +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "`/route delete 2` +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Deletes the 2nd route in the list of routes."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all routes : `/route clear` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Clears all entries from the list of routes. +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/route clear`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assign route to delivery man : `/assign` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Assign a delivery man to an existing route +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/assign d/DELIVERYMAN_INDEX r/ROUTE_INDEX`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* `/route list` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "`/deliveryman list` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "`/assign d/2 r/1` +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Add the 2nd delivery man to the 1st route."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `/history` `[Since v1.1]`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/history`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `/exit` `[Since v1.1]`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/exit`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "FoodZoom data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[Coming in v2.0]`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `/help` `(Deliveryman Command)` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/help`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Login to system : `/login` `(Deliveryman Command)` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/login u/USERNAME pw/PASSWORD`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* `/login u/deliveryman pw/password`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logout from system : `/logout` `(Deliveryman Command)` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/logout`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Show delivery route : `/route list` `(Deliveryman Command)` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "View the assigned route/s +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/route list`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing assigned orders : `/order list` `(Deliveryman Command)` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "List details of assigned order/s +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/order list`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `/exit` `(Deliveryman Command)` `[Coming in v2.0]`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "Format: `/exit`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* *Sign Up* : `/signup n/NAME u/USERNAME pw/PASSWORD` +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "e.g. `/signup n/John Doe u/johndoe pw/johndoepassword`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "* *Login* : `/login u/USERNAME pw/PASSWORD` +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `/login u/manager pw/password`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* *Logout* : `/logout`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add order* : `/order add f/FOOD n/NAME p/PHONE_NUMBER a/ADDRESS dt/DATETIME` +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `/order add f/Roti Prata n/James Ho p/22224444 a/block 123, Clementi Rd, 1234665 dt/14-12-2018 10:18:00`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "* *Listing orders* : `/order list`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit order* : `/order edit INDEX [f/FOOD] [n/NAME] [p/PHONE_NUMBER] [a/ADDRESS] [dt/DATETIME]` +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "e.g. `/order edit 2 n/James Lee`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* *Find order* : `/order find [n/NAME] [p/PHONE]` +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "e.g. `/order find n/James Jake`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete order* : `/order delete INDEX` +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `/order delete 3`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear order* : `/order clear`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* *Add delivery man* : `/deliveryman add n/NAME p/PHONE_NUMBER [a/ADDRESS]` +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "e.g. `/deliveryman add n/James Ho p/22224444 a/block 123, Clementi Rd, 1234665`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "* *Listing delivery men* : `/deliveryman list`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* *Edit delivery man* : `/deliveryman edit INDEX [n/NAME] [p/PHONE_NUMBER] [a/ADDRESS]` +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "e.g. `/deliveryman edit 2 n/James Lee`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* *Find delivery man* : `/deliveryman find n/NAME` +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "e.g. `/deliveryman find n/James Jake`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete delivery man* : `/deliveryman delete INDEX` +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `/deliveryman delete 3`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear delivery men* : `/deliveryman clear`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "* *Create a route* : `/route create o/ORDER_ID` +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `/route create o/1 o/3`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* *Listing all routes* : `/route list`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* *Add order to route* : `/route add r/ROUTE_INDEX o/ORDER_INDEX` +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "e.g. `/route add o/1 o/2 o/3 r/1`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete a route* : `/route delete INDEX` +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `/route delete 1`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear routes* : `/route clear`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* *Assign route to delivery man* : `/assign d/DELIVERYMAN_INDEX r/ROUTE_INDEX` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "e.g. `/assign d/1 r/1`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* *Help* : `/help`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `/history`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* *Exit the program* : `/exit`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "* *Login (Deliveryman)* : `/login u/USERNAME pw/PASSWORD` +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "e.g. `/login u/deliveryman pw/password`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* *Logout (Deliveryman)* : `/logout`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* *View delivery route (Deliveryman)* : `/route list`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* *View assigned orders (Deliveryman)* : `/order list`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* *Help (Deliveryman)* : `/help`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "* *Exit the program (Deliveryman)* : `/exit`"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 207,
      "juxd": 1,
      "-": 213
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 8,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.ReadOnlyUsersList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.UsersList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymenList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.storage.OrderBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.storage.XmlOrderBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.storage.deliveryman.DeliverymenListStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.storage.deliveryman.XmlDeliverymenListStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.storage.user.UsersListStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.storage.user.XmlUsersListStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing OrderBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderBookStorage orderBookStorage \u003d new XmlOrderBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymenListStorage deliverymenListStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juxd"
        },
        "content": "                new XmlDeliverymenListStorage(userPrefs.getDeliverymenListFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        UsersListStorage usersListStorage \u003d new XmlUsersListStorage(userPrefs.getUsersListFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        storage \u003d new StorageManager(orderBookStorage, usersListStorage, deliverymenListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s order book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * The data from the sample order book will be used instead if {@code storage}\u0027s order book is not found,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * or an empty order book will be used instead if errors occur when reading {@code storage}\u0027s order book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Optional\u003cReadOnlyOrderBook\u003e orderBookOptional;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        ReadOnlyOrderBook initialData;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Optional\u003cReadOnlyUsersList\u003e usersListOptional;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        ReadOnlyUsersList initialUser;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Optional\u003cDeliverymenList\u003e deliverymenListOptional;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymenList initialDeliverymenData;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            orderBookOptional \u003d storage.readOrderBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            if (!orderBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample OrderBook\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            initialData \u003d orderBookOptional.orElseGet(SampleDataUtil::getSampleOrderBook);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty OrderBook\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            initialData \u003d new OrderBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty OrderBook\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            initialData \u003d new OrderBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            usersListOptional \u003d storage.readUsersList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            if (!usersListOptional.isPresent()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample UsersList\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            initialUser \u003d usersListOptional.orElseGet(SampleDataUtil::getSampleUsersList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty UsersList\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            initialUser \u003d new UsersList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty UsersList\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            initialUser \u003d new UsersList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juxd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juxd"
        },
        "content": "            deliverymenListOptional \u003d storage.readDeliverymenList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juxd"
        },
        "content": "            if (!deliverymenListOptional.isPresent()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "juxd"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample DeliverymenList\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juxd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juxd"
        },
        "content": "            initialDeliverymenData \u003d deliverymenListOptional.orElseGet(SampleDataUtil::getSampleDeliverymenList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "juxd"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "juxd"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty DeliverymenList\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "juxd"
        },
        "content": "            initialDeliverymenData \u003d new DeliverymenList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "juxd"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "juxd"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty DeliverymenList\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "juxd"
        },
        "content": "            initialDeliverymenData \u003d new DeliverymenList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return new ModelManager(initialData, initialUser, initialDeliverymenData, userPrefs);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty OrderBook\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        logger.info(\"Starting OrderBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 21,
      "rrtheonlyone": 24,
      "kohchihao": 18,
      "-": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 2,
      "-": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    public static final String MESSAGE_INVALID_ROUTE_COMMAND_FORMAT \u003d \"Invalid route command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDER_COMMAND_FORMAT \u003d \"Invalid order command format! \\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDER_DISPLAYED_INDEX \u003d \"The order index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static final String MESSAGE_ORDERS_LISTED_OVERVIEW \u003d \"%1$d orders listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String MESSAGE_INVALID_DELIVERYMAN_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \"The deliveryman index provided is invalid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String MESSAGE_INVALID_DELIVERYMAN_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \"Invalid deliveryman command format! \\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String MESSAGE_DELIVERYMEN_LISTED_OVERVIEW \u003d \"%1$d deliverymen listed!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String MESSAGE_REQUIRE_LOGIN \u003d \"Please login first!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 2,
      "juxd": 5,
      "monmanuela": 2,
      "kohchihao": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 17,
      "-": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        return Objects.hash(zeroBasedIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monmanuela": 7,
      "rrtheonlyone": 8,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/DeliverymenListChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymenList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "/** Indicates the DeliverymenList in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymenListChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public final DeliverymenList data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public DeliverymenListChangedEvent(DeliverymenList data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return \"number of deliverymen \" + data.getDeliverymenList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/OrderBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Indicates the OrderBook in the model has changed"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public final ReadOnlyOrderBook data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderBookChangedEvent(ReadOnlyOrderBook data) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return \"number of orders \" + data.getOrderList().size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/UserLoggedInEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Indicates the user has logged in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class UserLoggedInEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public final User data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public UserLoggedInEvent(User data) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return \"User \" + data.getUsername() + \" have logged in\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/UserLoggedOutEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Indicates the user has logged out."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class UserLoggedOutEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public UserLoggedOutEvent() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return \"User have successfully logout.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/UsersListChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.ReadOnlyUsersList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/** Indicates the UsersList in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class UsersListChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public final ReadOnlyUsersList data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public UsersListChangedEvent(ReadOnlyUsersList data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return \"number of users \" + data.getUserList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/DeliveryManPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Represents a selection change in the Person List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class DeliveryManPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final Deliveryman newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public DeliveryManPanelSelectionChangedEvent(Deliveryman newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Deliveryman getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/OrderPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a selection change in the Person List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final Order newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderPanelSelectionChangedEvent(Order newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Order getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 5,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 2,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 4,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 2,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 3,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of order"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredOrderList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of delivery men"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    ObservableList\u003cDeliveryman\u003e getFilteredDeliverymanList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 15,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_REQUIRE_LOGIN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.LogoutCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.SignUpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.logic.parser.OrderBookParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final OrderBookParser orderBookParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderBookParser \u003d new OrderBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            Command command \u003d orderBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            if (model.isUserLoggedIn() || isNotAuthenticatedCommand(command)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                return command.execute(model, history);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                return new CommandResult(MESSAGE_REQUIRE_LOGIN);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return model.getFilteredOrderList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e getFilteredDeliverymanList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return model.getFilteredDeliverymenList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns true if it is not an authenticated command."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private boolean isNotAuthenticatedCommand(Command command) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return command instanceof LoginCommand || command instanceof SignUpCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                || command instanceof HelpCommand || command instanceof HistoryCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                || command instanceof LogoutCommand;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 10,
      "kohchihao": 21,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"/help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monmanuela": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"/history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monmanuela": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Login the user into FoodZoom."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class LoginCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"/login\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Login Success for %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Login Failure for %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String MESSAGE_ALREADY_LOGGED_IN \u003d \"You are already logged in as %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String MESSAGE_REDIRECT_TO_LOGOUT \u003d \"Please logout before attempting to login to another \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            + \"account\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Login to FoodZoom. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            + PREFIX_USERNAME + \"USERNAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            + PREFIX_PASSWORD + \"PASSWORD \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            + PREFIX_USERNAME + \"johndoe \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            + PREFIX_PASSWORD + \"johndoepassword\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final User toLogin;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Creates an LoginCommand to add the specified {@code user}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public LoginCommand(User user) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(user);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        toLogin \u003d user;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (model.isUserLoggedIn()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            User loggedInUser \u003d model.getLoggedInUserDetails();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            String result \u003d String.format(MESSAGE_ALREADY_LOGGED_IN, loggedInUser.getUsername())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    + MESSAGE_REDIRECT_TO_LOGOUT;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return new CommandResult(result);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (model.isRegisteredUser(toLogin)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            model.storeUserInSession(toLogin);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toLogin));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_FAILURE, toLogin));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                || (other instanceof LoginCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u0026\u0026 toLogin.equals(((LoginCommand) other).toLogin));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LogoutCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Logout the user from FoodZoom."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class LogoutCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"/logout\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Logout Success\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No User to logout\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Logout from FoodZoom. \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (model.isUserLoggedIn()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            model.clearUserInSession();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"/redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!model.canRedoOrderBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.redoOrderBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monmanuela": 1,
      "rrtheonlyone": 4,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SignUpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.LoginCommand.MESSAGE_ALREADY_LOGGED_IN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.LoginCommand.MESSAGE_REDIRECT_TO_LOGOUT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Sign up the user into FoodZoom."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class SignUpCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"/signup\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a user to FoodZoom. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            + PREFIX_USERNAME + \"USERNAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            + PREFIX_PASSWORD + \"PASSWORD \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            + PREFIX_USERNAME + \"johndoe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            + PREFIX_PASSWORD + \"johndoepassword\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New user added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String MESSAGE_LOGGED_IN \u003d \"You have been logged into FoodZoom.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_USER \u003d \"This user already exists in FoodZoom.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final User toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Creates an SignUpCommand to add the specified {@code user}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public SignUpCommand(User user) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(user);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        toAdd \u003d user;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (model.isUserLoggedIn()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            User loggedInUser \u003d model.getLoggedInUserDetails();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            String result \u003d String.format(MESSAGE_ALREADY_LOGGED_IN, loggedInUser.getUsername())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    + MESSAGE_REDIRECT_TO_LOGOUT;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return new CommandResult(result);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (model.hasUser(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_USER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        model.addUser(toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        model.storeUserInSession(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        model.commitUsersList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String result \u003d String.format(MESSAGE_SUCCESS, toAdd)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + MESSAGE_LOGGED_IN;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return new CommandResult(result);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                || (other instanceof SignUpCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u0026\u0026 toAdd.equals(((SignUpCommand) other).toAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"/undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!model.canUndoOrderBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.undoOrderBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monmanuela": 1,
      "rrtheonlyone": 4,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliveryman/DeliverymanAddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": " * Represents the command to add a deliveryman."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymanAddCommand extends DeliverymanCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds deliveryman to the list. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "            + PREFIX_NAME + \"Lorem Ipsum\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New deliveryman added: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DELIVERYMAN \u003d \"This deliveryman already exists in the list.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private final Deliveryman toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Creates an DeliverymanAddCommand to add the specified {@code Deliverman}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public DeliverymanAddCommand(Deliveryman dman) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "        requireNonNull(dman);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "        toAdd \u003d dman;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (model.hasDeliveryman(toAdd)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DELIVERYMAN);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": "        model.addDeliveryman(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": "        model.commitDeliverymenList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juxd"
        },
        "content": "                || (other instanceof DeliverymanAddCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": "                \u0026\u0026 toAdd.isSameDeliveryman(((DeliverymanAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliveryman/DeliverymanCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": " * Represents the abstract class which all Deliveryman Commands extend from"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "public abstract class DeliverymanCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"/deliveryman\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliveryman/DeliverymanDeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": " * Deletes a deliveryman identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymanDeleteCommand extends DeliverymanCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "            + \": Deletes the deliveryman identified by the index number used in the displayed deliveryman list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String MESSAGE_DELETE_DELIVERYMAN_SUCCESS \u003d \"Deleted Deliveryman: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public DeliverymanDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "        List\u003cDeliveryman\u003e lastShownList \u003d model.getFilteredDeliverymenList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DELIVERYMAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Deliveryman deliverymanToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "        model.deleteDeliveryman(deliverymanToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": "        model.commitDeliverymenList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DELIVERYMAN_SUCCESS, deliverymanToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": "                || (other instanceof DeliverymanDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juxd"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeliverymanDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "juxd": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliveryman/DeliverymanFindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymanNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * Finds and lists all deliveryman in deliveryman list whose name contains in the argument keywords."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class DeliverymanFindCommand extends DeliverymanCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + \": Finds the deliveryman whose name contains any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + \"Parameters: n/KEYWORD \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/Alex\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private final DeliverymanNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public DeliverymanFindCommand(DeliverymanNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        model.updateFilteredDeliverymenList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "               String.format(Messages.MESSAGE_DELIVERYMEN_LISTED_OVERVIEW, model.getFilteredDeliverymenList().size())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                || (other instanceof DeliverymanFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                \u0026\u0026 predicate.equals(((DeliverymanFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliveryman/DeliverymanListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DELIVERYMEN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": " * Lists all deliverymen in the list to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymanListCommand extends DeliverymanCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all deliverymen\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "        model.updateFilteredDeliverymenList(PREDICATE_SHOW_ALL_DELIVERYMEN);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/order/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monmanuela"
        },
        "content": " * Adds an order to the order book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class AddCommand extends OrderCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an order to the order book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            + PREFIX_FOOD + \"FOOD...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            + \"Example: \" + OrderCommand.COMMAND_WORD + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            + PREFIX_FOOD + \"Roti Prata \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            + PREFIX_FOOD + \"Ice Milo\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            + PREFIX_DATE + \"12-10-2018 00:00:00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New order added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDER \u003d \"This order already exists in the order book\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final Order toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Order}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public AddCommand(Order order) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        toAdd \u003d order;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (model.hasOrder(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.addOrder(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.commitOrderBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": "                \u0026\u0026 toAdd.isSameOrder(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 3,
      "juxd": 1,
      "monmanuela": 6,
      "rrtheonlyone": 16,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/order/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class ClearCommand extends OrderCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Order book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.resetData(new OrderBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.commitOrderBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 3,
      "rrtheonlyone": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/order/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Deletes an order identified using it\u0027s displayed index from the order book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class DeleteCommand extends OrderCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            + \": Deletes the order identified by the index number used in the displayed order list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            + \"Example: \" + OrderCommand.COMMAND_WORD + \" \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String MESSAGE_DELETE_ORDER_SUCCESS \u003d \"Deleted Order: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order orderToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.deleteOrder(orderToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.commitOrderBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ORDER_SUCCESS, orderToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 3,
      "monmanuela": 1,
      "rrtheonlyone": 10,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/order/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDERS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.Food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.OrderDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * Edits an order to the order book"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class EditCommand extends OrderCommand {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d OrderCommand.COMMAND_WORD + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + \": Edits the details of the order identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + \"by the index number used in the displayed order book. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + \"[\" + PREFIX_FOOD + \"FOOD]...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + \"Example: \" + OrderCommand.COMMAND_WORD + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + PREFIX_FOOD + \"Roti Prata \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + PREFIX_FOOD + \"Ice Milo\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static final String MESSAGE_EDIT_ORDER_SUCCESS \u003d \"Edited Order: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDER \u003d \"This order already exists in the order book.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDER_INDEX \u003d \"Invalid Order Index: %1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private final EditOrderDescriptor editOrderDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * @param index               of the order in the filtered order list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * @param editOrderDescriptor details to edit the order with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public EditCommand(Index index, EditOrderDescriptor editOrderDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        requireNonNull(editOrderDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        this.editOrderDescriptor \u003d new EditOrderDescriptor(editOrderDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Order orderToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Order editedOrder \u003d createEditedOrder(orderToEdit, editOrderDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        if (!orderToEdit.isSameOrder(editedOrder) \u0026\u0026 model.hasOrder(editedOrder)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        model.updateOrder(orderToEdit, editedOrder);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        model.commitOrderBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ORDER_SUCCESS, editedOrder));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Creates and returns a {@code Order} with the details of {@code orderToEdit}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * edited with {@code editOrderDescriptor}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private static Order createEditedOrder(Order orderToEdit, EditOrderDescriptor editOrderDescriptor) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assert orderToEdit !\u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Name updatedName \u003d editOrderDescriptor.getName().orElse(orderToEdit.getName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Phone updatedPhone \u003d editOrderDescriptor.getPhone().orElse(orderToEdit.getPhone());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Address updatedAddress \u003d editOrderDescriptor.getAddress().orElse(orderToEdit.getAddress());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        OrderDate updatedDate \u003d editOrderDescriptor.getDate().orElse(orderToEdit.getDate());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Set\u003cFood\u003e updatedFood \u003d editOrderDescriptor.getFood().orElse(orderToEdit.getFood());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return new Order(updatedName, updatedPhone, updatedAddress, updatedDate, updatedFood);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                \u0026\u0026 editOrderDescriptor.equals(e.editOrderDescriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Stores the details to edit the order with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * corresponding field value of the order."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static class EditOrderDescriptor {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        private OrderDate orderDate;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        private Set\u003cFood\u003e food;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        public EditOrderDescriptor() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         * A defensive copy of {@code food} is used internally."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        public EditOrderDescriptor(EditOrderDescriptor toCopy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            setDate(toCopy.orderDate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            setFood(toCopy.food);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, address, orderDate, food);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        public void setDate(OrderDate orderDate) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            this.orderDate \u003d orderDate;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        public Optional\u003cOrderDate\u003e getDate() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return Optional.ofNullable(orderDate);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         * Sets {@code food} to this object\u0027s {@code food}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         * A defensive copy of {@code food} is used internally."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        public void setFood(Set\u003cFood\u003e food) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            this.food \u003d (food !\u003d null) ? new HashSet\u003c\u003e(food) : null;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         * Returns an unmodifiable food set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        public Optional\u003cSet\u003cFood\u003e\u003e getFood() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return (food !\u003d null) ? Optional.of(Collections.unmodifiableSet(food)) : Optional.empty();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            if (!(other instanceof EditOrderDescriptor)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            EditOrderDescriptor e \u003d (EditOrderDescriptor) other;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                    \u0026\u0026 getFood().equals(e.getFood());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 227,
      "kohchihao": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/order/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.order.OrderContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * Finds and lists all orders in orders list whose name or phone contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class FindCommand extends OrderCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + \": Finds the order whose name or phone number contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            + \"Parameters: n/NAME p/PHONE\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            + \"Example: \" + OrderCommand.COMMAND_WORD + \" \" + COMMAND_WORD + \" n/John \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            + \"Example: \" + OrderCommand.COMMAND_WORD + \" \" + COMMAND_WORD + \" p/1234578\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private final OrderContainsAnyKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public FindCommand(OrderContainsAnyKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        model.updateFilteredOrderList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                String.format(Messages.MESSAGE_ORDERS_LISTED_OVERVIEW, model.getFilteredOrderList().size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 45,
      "monmanuela": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/order/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Lists all orders in the order book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class ListCommand extends OrderCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all orders\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 3,
      "rrtheonlyone": 5,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/order/OrderCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * Base Command for all order commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public abstract class OrderCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"/order\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/order/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Selects an order identified using it\u0027s displayed index from the order book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class SelectCommand extends OrderCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            + \": Selects the order identified by the index number used in the displayed order list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            + \"Example: \" + OrderCommand.COMMAND_WORD + \" \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String MESSAGE_SELECT_ORDER_SUCCESS \u003d \"Selected Order: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        List\u003cOrder\u003e filteredOrderList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredOrderList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_ORDER_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 3,
      "monmanuela": 1,
      "rrtheonlyone": 8,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 3,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final Prefix PREFIX_FOOD \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    public static final Prefix PREFIX_ORDER \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"pw/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monmanuela": 1,
      "rrtheonlyone": 2,
      "kohchihao": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LoginCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Password;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Username;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Parses input arguments and creates a new LoginCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class LoginCommandParser implements Parser\u003cLoginCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public LoginCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Username username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Password password \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User user \u003d new User(username, password);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return new LoginCommand(user);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/OrderBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.LogoutCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.SignUpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.deliveryman.DeliverymanCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.OrderCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.parser.deliveryman.DeliverymanCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.order.OrderCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderBookParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        case OrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return new OrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        case DeliverymanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return new DeliverymanCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        case SignUpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return new SignUpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        case LoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return new LoginCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        case LogoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return new LogoutCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 6,
      "juxd": 2,
      "rrtheonlyone": 1,
      "kohchihao": 12,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Password;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Username;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.Food;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.OrderDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    public static Set\u003cIndex\u003e parseIndexes(Collection\u003cString\u003e index) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        final Set\u003cIndex\u003e indexSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        for (String indexNo : index) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            indexSet.add(parseIndex(indexNo));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        return indexSet;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Parses a {@code String orderDate} into a Java Date."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @throws ParseException if the given {@code orderDate} is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static OrderDate parseDate(String orderDate) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        requireNonNull(orderDate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        String trimmedDate \u003d orderDate.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!OrderDate.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new ParseException(OrderDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return new OrderDate(trimmedDate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Parses a {@code String food} into a {@code Food}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @throws ParseException if the given {@code food} is invalid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static Food parseFood(String food) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        String trimmedFood \u003d food.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!Food.isValidFood(trimmedFood)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new ParseException(Food.MESSAGE_FOOD_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return new Food(trimmedFood);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static Set\u003cFood\u003e parseFoods(Collection\u003cString\u003e food) throws ParseException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        final Set\u003cFood\u003e foodSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        for (String foodName : food) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            foodSet.add(parseFood(foodName));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return foodSet;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Parses a {@code String username} into an {@code Username}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @throws ParseException if the given {@code username} is invalid."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static Username parseUsername(String username) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String trimmedUsername \u003d username.trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (!Username.isValidUsername(trimmedUsername)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new ParseException(Username.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return new Username(trimmedUsername);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Parses a {@code String password} into an {@code Password}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @throws ParseException if the given {@code password} is invalid."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static Password parsePassword(String password) throws ParseException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String trimmedPassword \u003d password.trim();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (!Password.isValidPassword(trimmedPassword)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new ParseException(Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return new Password(trimmedPassword);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monmanuela": 13,
      "rrtheonlyone": 36,
      "kohchihao": 47,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SignUpCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.SignUpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Password;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Username;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Parses input arguments and creates a new SignUpCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class SignUpCommandParser implements Parser\u003cSignUpCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public SignUpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_USERNAME, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_USERNAME, PREFIX_PASSWORD)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SignUpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Username username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Password password \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User user \u003d new User(name, username, password);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return new SignUpCommand(user);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliveryman/DeliverymanAddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.logic.parser.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.deliveryman.DeliverymanAddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": " * Parses input arguments and creates a new DeliverymanAddCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymanAddCommandParser implements Parser\u003cDeliverymanAddCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Parses a user command into a DeliverymanAddCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public DeliverymanAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (!arePrefixesPresent(argumentMultimap, PREFIX_NAME) || !argumentMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "                    DeliverymanAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argumentMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Deliveryman deliveryman \u003d new Deliveryman(name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return new DeliverymanAddCommand(deliveryman);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 48,
      "kohchihao": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliveryman/DeliverymanCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.logic.parser.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DELIVERYMAN_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.deliveryman.DeliverymanAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.deliveryman.DeliverymanCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.deliveryman.DeliverymanDeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.deliveryman.DeliverymanFindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.deliveryman.DeliverymanListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": " * Parses deliveryman input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymanCommandParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeliverymanCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * and returns an DeliverymanCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public DeliverymanCommand parse (String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_DELIVERYMAN_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "                    HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "        case DeliverymanAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return new DeliverymanAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "        case DeliverymanDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return new DeliverymanDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": "        case DeliverymanListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return new DeliverymanListCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        case DeliverymanFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return new DeliverymanFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 5,
      "juxd": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliveryman/DeliverymanDeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.logic.parser.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.deliveryman.DeliverymanDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": " * Parses the input arguments to produce a DeliverymanDeleteCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymanDeleteCommandParser implements Parser\u003cDeliverymanDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Parses the given {@code String} of arguments and returns a DeliverymanDeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * @throws ParseException if the input does not conform to the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public DeliverymanDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return new DeliverymanDeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeliverymanDeleteCommand.MESSAGE_USAGE), pe"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "            );"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliveryman/DeliverymanFindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.parser.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.deliveryman.DeliverymanCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.deliveryman.DeliverymanFindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymanNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * Parses the given {@code String} of arguments in the context of the DeliverymanFindCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * and returns an DeliverymanFindCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class DeliverymanFindCommandParser implements Parser\u003cDeliverymanCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeliverymanFindCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * and returns an DeliverymanFindCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public DeliverymanCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeliverymanFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String name \u003d argMultimap.getValue(PREFIX_NAME).get().trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String[] nameKeywords \u003d name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return new DeliverymanFindCommand(new DeliverymanNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/order/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.Food;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.OrderDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_ADDRESS, PREFIX_DATE, PREFIX_FOOD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_DATE, PREFIX_FOOD)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderDate orderDate \u003d ParserUtil.parseDate((argMultimap).getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Set\u003cFood\u003e foodList \u003d ParserUtil.parseFoods(argMultimap.getAllValues(PREFIX_FOOD));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order order \u003d new Order(name, phone, address, orderDate, foodList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return new AddCommand(order);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 7,
      "rrtheonlyone": 17,
      "kohchihao": 6,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/order/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 4,
      "rrtheonlyone": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/order/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.EditCommand.EditOrderDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.OrderCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.order.Food;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class EditCommandParser implements Parser\u003cOrderCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE , PREFIX_ADDRESS, PREFIX_DATE, PREFIX_FOOD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditOrderDescriptor editOrderDescriptor \u003d new EditOrderDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            editOrderDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            editOrderDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            editOrderDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            editOrderDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        parseFoodForEdit(argMultimap.getAllValues(PREFIX_FOOD)).ifPresent(editOrderDescriptor::setFood);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        if (!editOrderDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return new EditCommand(index, editOrderDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e food} into a {@code Set\u003cFood\u003e} if {@code food} is non-empty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * If {@code food} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * {@code Set\u003cFood\u003e} containing zero food."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private Optional\u003cSet\u003cFood\u003e\u003e parseFoodForEdit(Collection\u003cString\u003e food) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assert food !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        if (food.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        if (food.size() \u003d\u003d 1 \u0026\u0026 food.contains(\"\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            throw new ParseException(String.format(Food.MESSAGE_FOOD_CONSTRAINTS));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return Optional.of(ParserUtil.parseFoods(food));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/order/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ORDER_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.OrderCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.order.OrderNameContainsKeywordPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.order.OrderPhoneContainsKeywordPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * Parses the given {@code String} of arguments in the context of the OrderFindCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * and returns an OrderFindCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class FindCommandParser implements Parser\u003cOrderCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the OrderFindCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * and returns an OrderFindCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public OrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_ORDER_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            String name \u003d argMultimap.getValue(PREFIX_NAME).get().trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            String[] nameKeywords \u003d name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return new FindCommand(new OrderNameContainsKeywordPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            String phone \u003d argMultimap.getValue(PREFIX_PHONE).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return new FindCommand(new OrderPhoneContainsKeywordPredicate(phone));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_ORDER_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/order/OrderCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ORDER_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.OrderCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * Parses order input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class OrderCommandParser implements Parser\u003cOrderCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the OrderCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * and returns an OrderCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public OrderCommand parse (String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_ORDER_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/order/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 4,
      "rrtheonlyone": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymenList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    Predicate\u003cOrder\u003e PREDICATE_SHOW_ALL_ORDERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    Predicate\u003cUser\u003e PREDICATE_SHOW_ALL_USERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * {@code Predicate} that always evaluates to true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "    Predicate\u003cDeliveryman\u003e PREDICATE_SHOW_ALL_DELIVERYMEN \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d order book/order related methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    void resetData(ReadOnlyOrderBook newData);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns the OrderBook"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    ReadOnlyOrderBook getOrderBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns true if a common with the same identity as {@code order} exists in the order book."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    boolean hasOrder(Order order);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Deletes the given order."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * The order must exist in the address book."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    void deleteOrder(Order target);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Adds the given order."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * {@code order} must not already exist in the address book."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    void addOrder(Order order);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Replaces the given order {@code target} with {@code editedOrder}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * The order identity of {@code editedOrder} must not be the same as another existing order in the order book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    void updateOrder(Order target, Order editedOrder);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns an unmodifiable view of the filtered order list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredOrderList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Updates the filter of the filtered order list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns true if the model has previous order book states to restore."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    boolean canUndoOrderBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns true if the model has undone order book states to restore."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    boolean canRedoOrderBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Restores the model\u0027s order book to its previous state."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    void undoOrderBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Restores the model\u0027s order book to its previously undone state."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    void redoOrderBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Saves the current order book state for undo/redo."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    void commitOrderBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User related methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Return true if user exist inside user list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    boolean hasUser(User user);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Add user to usersList."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    void addUser(User user);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Saves the current users list for undo/redo."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    void commitUsersList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Updates the filter of the filtered user list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    void updateFilteredUsersList(Predicate\u003cUser\u003e predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns an unmodifiable view of the filtered users list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    ObservableList\u003cUser\u003e getFilteredUsersList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Return true if user is registered with application."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    boolean isRegisteredUser(User user);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns the UsersList"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    ReadOnlyUsersList getUsersList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Return true if user is logged into FoodZoom."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    boolean isUserLoggedIn();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Store the user session details."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    void storeUserInSession(User user);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Return the logged in user details."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    User getLoggedInUserDetails();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Clear the user session details."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    void clearUserInSession();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deliveryman related methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    void resetDeliverymenData(DeliverymenList newData);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns the DeliverymenList"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "juxd"
        },
        "content": "    DeliverymenList getDeliverymenList();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Returns true if a deliveryman with the same identity as {@code deliveryman} exists in the address book."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "juxd"
        },
        "content": "    boolean hasDeliveryman(Deliveryman deliveryman);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Deletes the given deliveryman."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * The deliveryman must exist in the address book."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "juxd"
        },
        "content": "    void deleteDeliveryman(Deliveryman target);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Adds the given deliveryman."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * {@code deliveryman} must not already exist in the address book."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "juxd"
        },
        "content": "    void addDeliveryman(Deliveryman deliveryman);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Replaces the given deliveryman {@code target} with {@code editedDeliveryman}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * The deliveryman identity of {@code editedDeliveryman} must not be the same as another"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * existing deliveryman in the deliverymen list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "juxd"
        },
        "content": "    void updateDeliveryman(Deliveryman target, Deliveryman editedDeliveryman);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns an unmodifiable view of the filtered deliveryman list"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "juxd"
        },
        "content": "    ObservableList\u003cDeliveryman\u003e getFilteredDeliverymenList();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Updates the filter of the filtered deliveryman list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "juxd"
        },
        "content": "    void updateFilteredDeliverymenList(Predicate\u003cDeliveryman\u003e predicate);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "juxd"
        },
        "content": "    boolean canUndoDeliverymenList();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "juxd"
        },
        "content": "    boolean canRedoDeliverymenList();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "juxd"
        },
        "content": "    void undoDeliverymenList();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "juxd"
        },
        "content": "    void redoDeliverymenList();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "juxd"
        },
        "content": "    void commitDeliverymenList();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 40,
      "monmanuela": 6,
      "rrtheonlyone": 40,
      "kohchihao": 79,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.commons.events.model.DeliverymenListChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.events.model.OrderBookChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.events.model.UserLoggedInEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.events.model.UserLoggedOutEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.events.model.UsersListChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymenList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.VersionedDeliverymenList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.UserSession;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final VersionedOrderBook versionedOrderBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final VersionedUsersList versionedUsersList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    private final FilteredList\u003cOrder\u003e filteredOrders;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final FilteredList\u003cUser\u003e filteredUsers;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private final VersionedDeliverymenList versionedDeliverymenList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private final FilteredList\u003cDeliveryman\u003e filteredDeliverymen;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final UserSession userSession;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, usersList and userPrefs."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public ModelManager(ReadOnlyOrderBook orderBook, ReadOnlyUsersList usersList,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                        DeliverymenList deliverymenList, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireAllNonNull(orderBook, userPrefs, deliverymenList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        logger.fine(\"Initializing with order book: \" + orderBook"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                + \" and users list \" + usersList"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                + \" and deliverymen list \" + deliverymenList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        versionedOrderBook \u003d new VersionedOrderBook(orderBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        versionedUsersList \u003d new VersionedUsersList(usersList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": "        versionedDeliverymenList \u003d new VersionedDeliverymenList(deliverymenList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        filteredOrders \u003d new FilteredList\u003c\u003e(versionedOrderBook.getOrderList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        filteredUsers \u003d new FilteredList\u003c\u003e(versionedUsersList.getUserList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juxd"
        },
        "content": "        filteredDeliverymen \u003d new FilteredList\u003c\u003e(versionedDeliverymenList.getDeliverymenList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        userSession \u003d new UserSession();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        logger.fine(\"Initializing with order book: \" + orderBook"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" and users list \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + usersList"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": "                + \" and deliverymen list\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": "                + deliverymenList"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" and user prefs \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this(new OrderBook(), new UsersList(), new DeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void resetData(ReadOnlyOrderBook newData) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        versionedOrderBook.resetData(newData);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        indicateOrderBookChanged();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void resetDeliverymenData(DeliverymenList newData) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juxd"
        },
        "content": "        versionedDeliverymenList.resetData(newData);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juxd"
        },
        "content": "        indicateDeliverymenListChanged();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public ReadOnlyOrderBook getOrderBook() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return versionedOrderBook;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public DeliverymenList getDeliverymenList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return versionedDeliverymenList;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private void indicateOrderBookChanged() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        raise(new OrderBookChangedEvent(versionedOrderBook));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Raises an event to indicate the deliverymen list model has changed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private void indicateDeliverymenListChanged() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juxd"
        },
        "content": "        raise(new DeliverymenListChangedEvent(versionedDeliverymenList));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private void indicateUsersListChanged() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        raise(new UsersListChangedEvent(versionedUsersList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Raises an event to indicate user have logged in."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private void indicateUserLoggedIn(User user) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        raise(new UserLoggedInEvent(user));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Raises an event to indicate user have logged out."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private void indicateUserLoggedOut() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        raise(new UserLoggedOutEvent());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return versionedOrderBook.hasOrder(order);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void deleteOrder(Order target) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        versionedOrderBook.removeOrder(target);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        indicateOrderBookChanged();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void addOrder(Order order) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        versionedOrderBook.addOrder(order);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        indicateOrderBookChanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void updateOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        requireAllNonNull(target, editedOrder);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        versionedOrderBook.updateOrder(target, editedOrder);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        indicateOrderBookChanged();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "juxd"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deliveryman methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public boolean hasDeliveryman(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "juxd"
        },
        "content": "        requireNonNull(deliveryman);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return versionedDeliverymenList.hasDeliveryman(deliveryman);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void deleteDeliveryman(Deliveryman target) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "juxd"
        },
        "content": "        versionedDeliverymenList.removeDeliveryman(target);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "juxd"
        },
        "content": "        indicateDeliverymenListChanged();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void addDeliveryman(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "juxd"
        },
        "content": "        versionedDeliverymenList.addDeliveryman(deliveryman);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "juxd"
        },
        "content": "        indicateDeliverymenListChanged();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void updateDeliveryman(Deliveryman target, Deliveryman editedDeliveryman) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "juxd"
        },
        "content": "        versionedDeliverymenList.updateDeliveryman(target, editedDeliveryman);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "juxd"
        },
        "content": "        indicateDeliverymenListChanged();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Orders List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Order} backed by the internal list of"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * {@code versionedOrderBook}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredOrders);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        filteredOrders.setPredicate(predicate);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "juxd"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Deliveryman List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Deliveryman} backed by the internal list"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * of {@code versionedDeliverymenList}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e getFilteredDeliverymenList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredDeliverymen);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void updateFilteredDeliverymenList(Predicate\u003cDeliveryman\u003e predicate) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "juxd"
        },
        "content": "        filteredDeliverymen.setPredicate(predicate);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean canUndoOrderBook() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return versionedOrderBook.canUndo();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean canRedoOrderBook() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return versionedOrderBook.canRedo();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void undoOrderBook() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        versionedOrderBook.undo();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        indicateOrderBookChanged();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void redoOrderBook() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        versionedOrderBook.redo();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        indicateOrderBookChanged();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void commitOrderBook() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        versionedOrderBook.commit();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered User List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean hasUser(User user) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(user);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return versionedUsersList.hasUser(user);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void addUser(User user) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        versionedUsersList.addUser(user);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        updateFilteredUsersList(PREDICATE_SHOW_ALL_USERS);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        indicateUsersListChanged();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void commitUsersList() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        versionedUsersList.commit();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void updateFilteredUsersList(Predicate\u003cUser\u003e predicate) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        filteredUsers.setPredicate(predicate);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public ObservableList\u003cUser\u003e getFilteredUsersList() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredUsers);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean isRegisteredUser(User user) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(user);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return versionedUsersList.isRegisteredUser(user);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public ReadOnlyUsersList getUsersList() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return versionedUsersList;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean isUserLoggedIn() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return userSession.isUserAlreadyLoggedIn();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void storeUserInSession(User user) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        userSession.setUserSession(user);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        indicateUserLoggedIn(user);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public User getLoggedInUserDetails() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return userSession.getLoggedInUserDetails();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void clearUserInSession() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        userSession.clearUserSession();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        indicateUserLoggedOut();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public boolean canUndoDeliverymenList() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return versionedDeliverymenList.canUndo();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public boolean canRedoDeliverymenList() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return versionedDeliverymenList.canRedo();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void undoDeliverymenList() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "juxd"
        },
        "content": "        versionedDeliverymenList.undo();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "juxd"
        },
        "content": "        indicateDeliverymenListChanged();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void redoDeliverymenList() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "juxd"
        },
        "content": "        versionedDeliverymenList.redo();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "juxd"
        },
        "content": "        indicateDeliverymenListChanged();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void commitDeliverymenList() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "juxd"
        },
        "content": "        versionedDeliverymenList.commit();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return versionedOrderBook.equals(other.versionedOrderBook)"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "juxd"
        },
        "content": "                \u0026\u0026 filteredOrders.equals(other.filteredOrders)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "juxd"
        },
        "content": "                \u0026\u0026 versionedUsersList.equals(other.versionedUsersList)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                \u0026\u0026 filteredUsers.equals(other.filteredUsers)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                \u0026\u0026 versionedDeliverymenList.equals(other.versionedDeliverymenList)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                \u0026\u0026 filteredDeliverymen.equals(other.filteredDeliverymen);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 83,
      "monmanuela": 10,
      "rrtheonlyone": 48,
      "kohchihao": 107,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/OrderBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.UniqueOrderList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderBook implements ReadOnlyOrderBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final UniqueOrderList orders;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orders \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderBook() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Creates an OrderBook using the Orders in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderBook(ReadOnlyOrderBook toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Replaces the contents of the order list with {@code orders}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * {@code orders} must not contain duplicate orders."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void setOrders(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this.orders.setOrder(orders);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Resets the existing data of this {@code OrderBook} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void resetData(ReadOnlyOrderBook newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        setOrders(newData.getOrderList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    //// common-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns true if an order with the same identity as {@code order} exists in the order book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean hasOrder(Order person) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return orders.contains(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Adds an order to the order book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * The order must not already exist in the order book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void addOrder(Order o) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (o.getTag() \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juxd"
        },
        "content": "            o.assignTag();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orders.add(o);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Replaces the given order {@code target} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * {@code target} must exist in the order book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * The order identity of {@code editedOrder} must not be the same as another existing order in the order book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void updateOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        requireNonNull(editedOrder);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (editedOrder.getTag() \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juxd"
        },
        "content": "            editedOrder.assignTag();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orders.setOrder(target, editedOrder);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Removes {@code key} from this {@code OrderBook}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void removeOrder(Order key) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orders.remove(key);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return orders.asUnmodifiableObservableList().size() + \" orders\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public ObservableList\u003cOrder\u003e getOrderList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return orders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                || (other instanceof OrderBook // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 orders.equals(((OrderBook) other).orders));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return orders.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 6,
      "rrtheonlyone": 121,
      "kohchihao": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyOrderBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Unmodifiable view of an order book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public interface ReadOnlyOrderBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns an unmodifiable view of the orders list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * This list will not contain any duplicate orders."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    ObservableList\u003cOrder\u003e getOrderList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUsersList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Unmodifiable view of users"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public interface ReadOnlyUsersList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns an unmodifiable view of the user list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * This list will not contain any duplicate users."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    ObservableList\u003cUser\u003e getUserList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TaggedObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": " * Represents the Objects that need an ID for storage \u0026 reference"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "public abstract class TaggedObject {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String MESSAGE_INVALID_ID \u003d \"Not an valid ID! Please check XML File.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private UUID tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "    protected TaggedObject() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "        tag \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "    protected TaggedObject(UUID id) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.tag \u003d id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public UUID getTag() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void assignTag() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "        tag \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public boolean hasSameTag(TaggedObject other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return getTag().equals(other.getTag());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    private Path routeListFilePath \u003d Paths.get(\"data\", \"routelist.xml\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Path usersListFilePath \u003d Paths.get(\"data\", \"users.xml\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private Path deliverymenListFilePath \u003d Paths.get(\"data\" , \"deliverymen.xml\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    public Path getRouteListFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        return routeListFilePath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    public void setRouteListFilePath(Path routeListFilePath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        this.routeListFilePath \u003d routeListFilePath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public Path getUsersListFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return usersListFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setUsersListFilePath(Path usersListFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.usersListFilePath \u003d usersListFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public Path getDeliverymenListFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return deliverymenListFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void setDeliverymenListFilePath(Path deliverymenListFilePath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.deliverymenListFilePath \u003d deliverymenListFilePath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + usersListFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 8,
      "monmanuela": 9,
      "kohchihao": 10,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UsersList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.UniqueUserList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Wraps all data at the users list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Duplicates are not allowed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class UsersList implements ReadOnlyUsersList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final UniqueUserList users;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        users \u003d new UniqueUserList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public UsersList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Creates an UsersList using the User in the {@code toBeCopied}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public UsersList(ReadOnlyUsersList toBeCopied) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Replaces the contents of the user list with {@code users}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * {@code persons} must not contain duplicate user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setUsers(List\u003cUser\u003e users) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.users.setUsers(users);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Resets the existing data of this {@code UsersList} with {@code newData}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void resetData(ReadOnlyUsersList newData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        setUsers(newData.getUserList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns true if a user with the same identity as {@code user} exists in the usersList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean hasUser(User user) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(user);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return users.contains(user);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns true if a user with the same identity as {@code user} exists in the usersList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean isRegisteredUser(User user) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(user);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return users.check(user);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Adds a user to the user list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * The user must not already exist in the user list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void addUser(User u) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        users.add(u);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Replaces the given common {@code target} in the list with {@code editedUser}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * {@code target} must exist in the users list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * The common identity of {@code editedPerson} must not be the same as another existing user in the users list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void updateUser(User target, User editedUser) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(editedUser);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        users.setUser(target, editedUser);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Removes {@code key} from this {@code UsersList}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * {@code key} must exist in the userslist."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void removeUser(User key) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        users.remove(key);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return users.asUnmodifiableObservableList().size() + \" users\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public ObservableList\u003cUser\u003e getUserList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return users.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                || (other instanceof UsersList // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u0026\u0026 users.equals(((UsersList) other).users));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return users.hashCode();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kohchihao": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedOrderBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * {@code OrderBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class VersionedOrderBook extends OrderBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final List\u003cReadOnlyOrderBook\u003e orderBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public VersionedOrderBook(ReadOnlyOrderBook initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderBookStateList.add(new OrderBook(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Saves a copy of the current {@code OrderBook} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderBookStateList.add(new OrderBook(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderBookStateList.subList(currentStatePointer + 1, orderBookStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        resetData(orderBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        resetData(orderBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return currentStatePointer \u003c orderBookStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!(other instanceof VersionedOrderBook)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook otherVersionedOrderBook \u003d (VersionedOrderBook) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return super.equals(otherVersionedOrderBook)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 orderBookStateList.equals(otherVersionedOrderBook.orderBookStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedOrderBook.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            super(\"Current state pointer at start of orderBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            super(\"Current state pointer at end of orderBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 19,
      "-": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedUsersList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * {@code UsersList} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class VersionedUsersList extends UsersList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final List\u003cReadOnlyUsersList\u003e usersListState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public VersionedUsersList(ReadOnlyUsersList initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        usersListState \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        usersListState.add(new UsersList(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Saves a copy of the current {@code UsersList} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        usersListState.add(new UsersList(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        usersListState.subList(currentStatePointer + 1, usersListState.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Restores the users list to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        resetData(usersListState.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Restores the users list to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        resetData(usersListState.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns true if {@code undo()} has users list states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns true if {@code redo()} has users list states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return currentStatePointer \u003c usersListState.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (!(other instanceof VersionedUsersList)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList otherVersionedUsersList \u003d (VersionedUsersList) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return super.equals(otherVersionedUsersList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u0026\u0026 usersListState.equals(otherVersionedUsersList.usersListState)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedUsersList.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            super(\"Current state pointer at start of usersListState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            super(\"Current state pointer at end of usersListState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/common/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/common/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/common/Password.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Represents a Person\u0027s password in FoodZoom."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPassword(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class Password {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String MESSAGE_PASSWORD_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            \"Password should only contain alphanumeric characters , should be at least 6 characters \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    + \"and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * The first character of the password must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String PASSWORD_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}]{6,}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Constructs a {@code Password}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @param password A valid password."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public Password(String password) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        isValidPassword(password);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        value \u003d password;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns true if a given string is a valid password."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static boolean isValidPassword(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return test.matches(PASSWORD_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                || (other instanceof Password // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u0026\u0026 value.equals(((Password) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/common/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/common/Username.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Represents a Person\u0027s username in FoodZoom."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidUsername(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class Username {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String MESSAGE_USERNAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            \"Username should only contain alphanumeric characters and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * The first character of the username must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String USERNAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}]+\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Constructs a {@code Username}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @param username A valid username."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public Username(String username) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        isValidUsername(username);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        value \u003d username;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns true if a given string is a valid username."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static boolean isValidUsername(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return test.matches(USERNAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                || (other instanceof Username // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u0026\u0026 value.equals(((Username) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/common/exceptions/DuplicatePersonException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model.common.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/common/exceptions/PersonNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model.common.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Signals that the operation is unable to find the specified common."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliveryman/Deliveryman.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.model.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.TaggedObject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": " * Represents a Deliveryman in FoodZoom."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": " * Guarantees: has a name that is unique."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class Deliveryman extends TaggedObject {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "    //TODO:  add field for orders/routes attached to deliveryman."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public Deliveryman(Name name) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /** This constructor is used when the {@code id} is specified. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public Deliveryman(UUID id, Name name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns if this is the same common as {@code other}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public boolean isSameDeliveryman(Deliveryman other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return other !\u003d null \u0026\u0026 other.getName().equals(getName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Returns true if both deliverymen have the same identity and data fields."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (!(other instanceof Deliveryman)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Deliveryman otherPerson \u003d (Deliveryman) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juxd"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juxd"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 75,
      "kohchihao": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliveryman/DeliverymanNameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.model.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * Tests that a {@code Deliveryman}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymanNameContainsKeywordsPredicate implements Predicate\u003cDeliveryman\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public DeliverymanNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public boolean test(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(deliveryman.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "                || (other instanceof DeliverymanNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": "                \u0026\u0026 keywords.equals(((DeliverymanNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 1,
      "juxd": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliveryman/DeliverymenList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.model.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": " * Wraps all data into a deliverymen list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": " * Duplicates are not allowed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymenList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private final UniqueDeliverymenList deliverymenList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "        deliverymenList \u003d new UniqueDeliverymenList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public DeliverymenList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public DeliverymenList(DeliverymenList toBeCopied) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /// list overwrite operations"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Replaces the contents of the deliverymen list with {@code deliverymen}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * {@code deliverymen} must not contain duplicate persons."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void setDeliverymen(List\u003cDeliveryman\u003e deliverymen) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.deliverymenList.setDeliverymen(deliverymen);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Resets the contents of the deliverymen list with the contents of {@code newData}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * @param newData The DeliverymenList to get the contents from"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void resetData(DeliverymenList newData) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "        setDeliverymen(newData.getDeliverymenList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /// deliveryman-level operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Returns true if the {@code DeliverymenList} contains a {@code deliveryman}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * @param deliveryman"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public boolean hasDeliveryman(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": "        requireNonNull(deliveryman);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return deliverymenList.contains(deliveryman);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Adds a deliveryman to the {@code deliverymenList}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * @param d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void addDeliveryman(Deliveryman d) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (d.getTag() \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": "            d.assignTag();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": "        deliverymenList.add(d);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Replaces the {@code target} deliveryman with an {@code edited} deliveryman."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void updateDeliveryman(Deliveryman target, Deliveryman editedD) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juxd"
        },
        "content": "        requireNonNull(editedD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (editedD.getTag() \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juxd"
        },
        "content": "            editedD.assignTag();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juxd"
        },
        "content": "        deliverymenList.setDeliveryman(target, editedD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void removeDeliveryman(Deliveryman key) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juxd"
        },
        "content": "        deliverymenList.remove(key);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return deliverymenList.asUnmodifiableObservableList().size() + \" deliverymen\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e getDeliverymenList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return deliverymenList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juxd"
        },
        "content": "                || (other instanceof DeliverymenList"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juxd"
        },
        "content": "                    \u0026\u0026 deliverymenList.equals(((DeliverymenList) other).deliverymenList));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return deliverymenList.hashCode();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliveryman/UniqueDeliverymenList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.model.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": " * A list of unique deliverymen"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class UniqueDeliverymenList implements Iterable\u003cDeliveryman\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private final ObservableList\u003cDeliveryman\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns true if the list contains an equivalent common as the given argument."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public boolean contains(Deliveryman toCheck) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDeliveryman);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Adds deliveryman to the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * The deliveryman must not already exist in the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void add(Deliveryman toAdd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "            //TODO: add appropriate exception for this"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Remove the equivalent deliveryman from the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * deliveryman must exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void remove(Deliveryman toRemove) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Replaces the deliveryman {@code target} in the list with {@code edited}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * The deliveryman identity of {@code edited} must not be the same as another deliveryman in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void setDeliveryman(Deliveryman target, Deliveryman edited) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juxd"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juxd"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": "            //TODO: add appropriate exception"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (!target.isSameDeliveryman(edited) \u0026\u0026 contains(edited)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juxd"
        },
        "content": "        internalList.set(index, edited);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void setDeliverymen(UniqueDeliverymenList replacement) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juxd"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juxd"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void setDeliverymen(List\u003cDeliveryman\u003e deliverymen) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juxd"
        },
        "content": "        requireAllNonNull(deliverymen);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (!deliverymenAreUnique(deliverymen)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juxd"
        },
        "content": "        internalList.setAll(deliverymen);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public ObservableList\u003cDeliveryman\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public Iterator\u003cDeliveryman\u003e iterator() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juxd"
        },
        "content": "                || (other instanceof UniqueDeliverymenList"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juxd"
        },
        "content": "                    \u0026\u0026 internalList.equals(((UniqueDeliverymenList) other).internalList));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Returns true if all the deliverymen in the list are unique."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private boolean deliverymenAreUnique(List\u003cDeliveryman\u003e deliverymen) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juxd"
        },
        "content": "        for (int i \u003d 0; i \u003c deliverymen.size() - 1; i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juxd"
        },
        "content": "            for (int j \u003d i + 1; j \u003c deliverymen.size(); j++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juxd"
        },
        "content": "                if (deliverymen.get(i).isSameDeliveryman(deliverymen.get(j))) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juxd"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juxd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juxd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 119,
      "kohchihao": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliveryman/VersionedDeliverymenList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.model.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": " * Represents a versioned version of the deliverymen list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class VersionedDeliverymenList extends DeliverymenList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private final List\u003cDeliverymenList\u003e deliverymenListStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public VersionedDeliverymenList(DeliverymenList initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "        deliverymenListStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "        deliverymenListStateList.add(new DeliverymenList(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Saves a copy of the current {@code DeliverymenList} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": "        deliverymenListStateList.add(new DeliverymenList(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "        deliverymenListStateList.subList(currentStatePointer + 1, deliverymenListStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Restores the deliverymen list to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "        resetData(deliverymenListStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Restores the deliverymen list to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juxd"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": "        resetData(deliverymenListStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return currentStatePointer \u003c deliverymenListStateList.size() - 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (!(other instanceof VersionedDeliverymenList)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juxd"
        },
        "content": "        VersionedDeliverymenList otherList \u003d (VersionedDeliverymenList) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return super.equals(otherList)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juxd"
        },
        "content": "                \u0026\u0026 deliverymenListStateList.equals(otherList.deliverymenListStateList)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juxd"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherList.currentStatePointer;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juxd"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juxd"
        },
        "content": "            super(\"Current state pointer at start of deliverymenListState list, unable to undo.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juxd"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juxd"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/Food.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Represents a Food\u0027s name in the order book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFoodName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String MESSAGE_FOOD_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            \"Food should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * The first character of the food must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String FOOD_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public final String foodName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Constructs a {@code Food}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Food(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        checkArgument(isValidFood(name), MESSAGE_FOOD_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        foodName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns true if a given string is a valid Food."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static boolean isValidFood(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return test.matches(FOOD_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return foodName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                || (other instanceof Food // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 foodName.equals(((Food) other).foodName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return foodName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Tests that a {@code Order}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cOrder\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean test(Order order) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(order.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/Order.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.TaggedObject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Represents an Order in the order book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class Order extends TaggedObject {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final OrderDate orderDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final Set\u003cFood\u003e food \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final OrderStatus orderStatus;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Order(Name name, Phone phone, Address address, OrderDate orderDate,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                 Set\u003cFood\u003e food) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this(null, name, phone, address, orderDate, new OrderStatus(), food);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Order(Name name, Phone phone, Address address, OrderDate orderDate, OrderStatus orderStatus,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                 Set\u003cFood\u003e food) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this(null, name, phone, address, orderDate, orderStatus, food);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * This constructor is used to create an {@code order} with a specified id."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Order(UUID id, Name name, Phone phone, Address address, OrderDate orderDate, OrderStatus orderStatus,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                 Set\u003cFood\u003e food) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juxd"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": "        requireAllNonNull(name, phone, address, orderDate, food);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.food.addAll(food);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.orderDate \u003d orderDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this.orderStatus \u003d orderStatus;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderDate getDate() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return this.orderDate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderStatus getOrderStatus() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return orderStatus;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns a food set"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Set\u003cFood\u003e getFood() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return food;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns true if both orders of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * This defines a weaker notion of equality between two orders."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean isSameOrder(Order otherOrder) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (otherOrder \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return otherOrder !\u003d null"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 otherOrder.getName().equals(getName())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 (otherOrder.getPhone().equals(getPhone()))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 (otherOrder.getDate().equals(getDate()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns true if both orders have the same identity and data fields."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * This defines a stronger notion of equality between two orders."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!(other instanceof Order)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order otherOrder \u003d (Order) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return otherOrder.getName().equals(getName())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 otherOrder.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 otherOrder.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 (otherOrder.getDate().equals(getDate()))"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 otherOrder.getFood().equals(getFood())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 otherOrder.getOrderStatus().equals(getOrderStatus());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return Objects.hash(name, phone, address, orderStatus, food);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .append(\" Status: \")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .append(getOrderStatus())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .append(\" Food: \");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        getFood().forEach(builder::append);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 16,
      "rrtheonlyone": 130,
      "kohchihao": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/OrderContainsAnyKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * Tests that a {@code Order} matches any of the keywords given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public interface OrderContainsAnyKeywordsPredicate extends Predicate\u003cOrder\u003e {}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/OrderDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Represents an Order\u0027s date in the order book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)} (String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderDate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \"Date should be in the format dd-MM-yyyy HH:mm:ss and it should be a valid date.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    private static final SimpleDateFormat sf \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private Date date \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Constructs a {@code OrderDate}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @param orderDate A valid Order Date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderDate(String orderDate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        requireNonNull(orderDate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            sf.setLenient(false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            date \u003d sf.parse(orderDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        } catch (ParseException pE) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            checkArgument(false, MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static boolean isValidDate(String orderDate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            sf.setLenient(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            sf.parse(orderDate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        } catch (ParseException pE) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return sf.format(date);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                || (other instanceof OrderDate // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 date.equals(((OrderDate) other).date)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monmanuela": 4,
      "rrtheonlyone": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/OrderNameContainsKeywordPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * Tests that a {@code Order}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class OrderNameContainsKeywordPredicate implements OrderContainsAnyKeywordsPredicate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public OrderNameContainsKeywordPredicate(List\u003cString\u003e names) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        keywords \u003d names;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public boolean test(Order order) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(order.getName().fullName, keyword));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                || (other instanceof OrderNameContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                \u0026\u0026 keywords.equals(((OrderNameContainsKeywordPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/OrderPhoneContainsKeywordPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class OrderPhoneContainsKeywordPredicate implements OrderContainsAnyKeywordsPredicate {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public OrderPhoneContainsKeywordPredicate(String phone) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        phone \u003d removeAllWhiteSpace(phone);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        keyword \u003d phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public boolean test(Order order) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return keyword.equals(order.getPhone().value);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                || (other instanceof OrderPhoneContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                \u0026\u0026 keyword.equals(((OrderPhoneContainsKeywordPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Remove all trailing whitespace and whitespaces in between {@code input}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private String removeAllWhiteSpace(String input) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return input.trim().replaceAll(\"\\\\s+\", \"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/OrderStatus.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Represents an Order\u0027s Status in the order book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)} (String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderStatus {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            \"Status should be either: PENDING, ONGOING or COMPLETED\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *  Valid Status Fields."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private enum Status {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        PENDING,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        ONGOING,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        COMPLETED"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private Status orderState \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Constructs a {@code OrderStatus}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderStatus() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this(Status.PENDING.name());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Constructs a {@code OrderStatus} with a parameter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @param status A valid Order Status string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderStatus(String status) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderState \u003d Status.valueOf(status);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns true if a given string is a valid status."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static boolean isValidStatus(String orderStatus) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        for (Status s : Status.values()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            if (orderStatus.equals(s.name())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return orderState.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                || (other instanceof OrderStatus // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 orderState.equals(((OrderStatus) other).orderState)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return orderState.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/UniqueOrderList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.exceptions.OrderNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * A list of orders that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * An order is considered unique by comparing using {@code Order#isSameOrder(Order)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * orders uses Order#isSameOrder(Order) for equality so as to ensure that the Order being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * unique in terms of identity in the UniqueOrderList. However, the removal of an Order uses Order#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * as to ensure that the order with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * @see Order#isSameOrder(Order)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class UniqueOrderList implements Iterable\u003cOrder\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final ObservableList\u003cOrder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns true if the list contains an equivalent order as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean contains(Order toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameOrder);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Adds an Order to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * The order must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void add(Order toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Replaces the order {@code target} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * The order identity of {@code editedOrder} must not be the same as another existing order in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        requireAllNonNull(target, editedOrder);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!target.isSameOrder(editedOrder) \u0026\u0026 contains(editedOrder)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        internalList.set(index, editedOrder);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void setOrder(UniqueOrderList replacement) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Replaces the contents of this list with {@code orders}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * {@code orders} must not contain duplicate persons."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void setOrder(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        requireAllNonNull(orders);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!ordersAreUnique(orders)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        internalList.setAll(orders);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Removes the equivalent order from the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * The order must exist in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void remove(Order toRemove) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public ObservableList\u003cOrder\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Iterator\u003cOrder\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                || (other instanceof UniqueOrderList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueOrderList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns true if {@code orders} contains only unique orders."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private boolean ordersAreUnique(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        for (int i \u003d 0; i \u003c orders.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            for (int j \u003d i + 1; j \u003c orders.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                if (orders.get(i).isSameOrder(orders.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/exceptions/DuplicateOrderException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.model.order.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Signals that the operation will result in duplicate Order (Orders are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class DuplicateOrderException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public DuplicateOrderException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        super(\"Operation would result in duplicate orders\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/exceptions/OrderNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.model.order.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Signals that the operation is unable to find the specified order."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/UniqueUserList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * A list of unique users"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class UniqueUserList implements Iterable\u003cUser\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final ObservableList\u003cUser\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns true if the list contains an equivalent user as the given argument."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean contains(User toCheck) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns true if the list contains an equivalent user as the given username and password."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean check(User toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameExistingUser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Adds a user to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * The user must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void add(User toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Replaces the user {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * The common identity of {@code editedPerson} must not be the same as another existing user in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setUser(User target, User editedPerson) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (!target.isSameUser(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Removes the equivalent user from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * The user must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void remove(User toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setUsers(UniqueUserList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Replaces the contents of this list with {@code users}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * {@code users} must not contain duplicate users."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setUsers(List\u003cUser\u003e users) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireAllNonNull(users);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (!usersAreUnique(users)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        internalList.setAll(users);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public ObservableList\u003cUser\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public Iterator\u003cUser\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                || (other instanceof UniqueUserList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueUserList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns true if {@code users} contains only unique users."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private boolean usersAreUnique(List\u003cUser\u003e users) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        for (int i \u003d 0; i \u003c users.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            for (int j \u003d i + 1; j \u003c users.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                if (users.get(i).isSameUser(users.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/User.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Password;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Username;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Represents a User in the FoodZoom."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class User {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final Username username;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final Password password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public User(Name name, Username username, Password password) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireAllNonNull(name, username, password);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public User(Username username, Password password) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireAllNonNull(username, password);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public Username getUsername() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public Password getPassword() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns true if both users of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean isSameUser(User otherUser) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (otherUser \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return otherUser !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u0026\u0026 otherUser.getName().equals(getName())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u0026\u0026 otherUser.getUsername().equals(getUsername());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns true if both users of the same username and password."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean isSameExistingUser(User otherUser) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (otherUser \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return otherUser !\u003d null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u0026\u0026 otherUser.getUsername().equals(getUsername())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u0026\u0026 otherUser.getPassword().equals(getPassword());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (!(other instanceof User)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User otherPerson \u003d (User) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (otherPerson.getName() \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return otherPerson.getUsername().equals(getUsername())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    \u0026\u0026 otherPerson.getPassword().equals(getPassword());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    \u0026\u0026 otherPerson.getUsername().equals(getUsername())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    \u0026\u0026 otherPerson.getPassword().equals(getPassword());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        //To print for Login"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (getName() \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            builder.append(\"Username: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    .append(getUsername());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            builder.append(getName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    .append(\" Username: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    .append(getUsername())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    .append(\" Password: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    .append(getPassword());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/UserSession.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * UserSession represent a logged in user session."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class UserSession {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private User loggedInUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private boolean isLoggedIn;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Initializes an empty UserSession."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public UserSession() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        isLoggedIn \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Initializes a UserSession with user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @param toLogin User that has successfully logged in."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public UserSession(User toLogin) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(toLogin);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        loggedInUser \u003d toLogin;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.isLoggedIn \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Set up user session."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @param toLogin User that has successfully logged in."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setUserSession(User toLogin) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(toLogin);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.loggedInUser \u003d toLogin;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.isLoggedIn \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Check if user is already logged into FoodZoom."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean isUserAlreadyLoggedIn() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return this.isLoggedIn;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * To clear user session details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void clearUserSession() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.isLoggedIn \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.loggedInUser \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Return logged in user details."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public User getLoggedInUserDetails() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return this.loggedInUser;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.ReadOnlyUsersList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.UsersList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Password;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Username;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymenList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.Food;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.OrderDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Contains utility methods for populating {@code OrderBook} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static Order[] getSampleOrders() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Order[] orders \u003d new Order[]{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            new Order(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        new Address(\"Blk 30 Geylang Street 29, #06-40\"), new OrderDate(\"01-10-2018 10:00:00\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        getFoodSet(\"Ice Tea\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            new Order(new Name(\"Bernice Yu\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new OrderDate(\"01-10-2018 10:00:00\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        getFoodSet(\"Chicken Rice\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            new Order(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new OrderDate(\"01-10-2018 10:00:00\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        getFoodSet(\"Nasi Goreng\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            new Order(new Name(\"David Li\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        new OrderDate(\"01-10-2018 10:00:00\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        getFoodSet(\"Satay\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            new Order(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        new Address(\"Blk 47 Tampines Street 20, #17-35\"), new OrderDate(\"01-10-2018 10:00:00\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        getFoodSet(\"Fish and Chips\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            new Order(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new OrderDate(\"01-10-2018 10:00:00\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        getFoodSet(\"Sugercane Juice\"))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return orders;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static Deliveryman[] getSampleDeliverymen() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return new Deliveryman[]{"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": "            new Deliveryman(new Name(\"Hoh Chi Kao\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": "            new Deliveryman(new Name(\"Tan Yin Jing\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": "            new Deliveryman(new Name(\"Rajul Rahesh\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juxd"
        },
        "content": "            new Deliveryman(new Name(\"Manika Monuela\"))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juxd"
        },
        "content": "        };"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static ReadOnlyOrderBook getSampleOrderBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderBook sampleAb \u003d new OrderBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        for (Order sampleOrder : getSampleOrders()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            sampleAb.addOrder(sampleOrder);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static User[] getSampleUsers() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return new User[]{"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            new User(new Name(\"Alice Pauline\"), new Username(\"alicepauline\"), new Password(\"alicepauline01\")),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            new User(new Name(\"Benson Meier\"), new Username(\"bensonmeier\"), new Password(\"bensonmeier02\")),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            new User(new Name(\"Carl Kurz\"), new Username(\"carlkurz\"), new Password(\"carlkurz03\")),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            new User(new Name(\"Hoon Meier\"), new Username(\"hoonmeier\"), new Password(\"hoonmeier04\"))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        };"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static ReadOnlyUsersList getSampleUsersList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        UsersList usersList \u003d new UsersList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        for (User user : getSampleUsers()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            usersList.addUser(user);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return usersList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static DeliverymenList getSampleDeliverymenList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymenList sampleDl \u003d new DeliverymenList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juxd"
        },
        "content": "        for (Deliveryman sampleD : getSampleDeliverymen()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juxd"
        },
        "content": "            sampleDl.addDeliveryman(sampleD);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return sampleDl;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns a food set containing the list of strings given."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static Set\u003cFood\u003e getFoodSet(String... strings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .map(Food::new)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 19,
      "monmanuela": 1,
      "rrtheonlyone": 30,
      "kohchihao": 27,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 1,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/OrderBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Represents a storage for {@link OrderBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public interface OrderBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    Path getOrderBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns OrderBook data as a {@link ReadOnlyOrderBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    Optional\u003cReadOnlyOrderBook\u003e readOrderBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    Optional\u003cReadOnlyOrderBook\u003e readOrderBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @param orderBook cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    void saveOrderBook(ReadOnlyOrderBook orderBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @see #saveOrderBook(ReadOnlyOrderBook)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    void saveOrderBook(ReadOnlyOrderBook orderBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 14,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.commons.events.model.DeliverymenListChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.events.model.OrderBookChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.events.model.UsersListChangedEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.ReadOnlyUsersList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymenList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.storage.deliveryman.DeliverymenListStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.storage.user.UsersListStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public interface Storage extends OrderBookStorage, UserPrefsStorage, UsersListStorage, DeliverymenListStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    Path getOrderBookFilePath();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    Optional\u003cReadOnlyOrderBook\u003e readOrderBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    void saveOrderBook(ReadOnlyOrderBook orderBook) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the data file if it is missing."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    void handleOrderBookChangedEvent(OrderBookChangedEvent abce);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    Path getUsersListFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    Optional\u003cReadOnlyUsersList\u003e readUsersList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    void saveUsersList(ReadOnlyUsersList usersList) throws IOException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Saves the current version of the UsersList to the hard disk."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Creates the data file if it is missing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    void handleUsersListChangedEvent(UsersListChangedEvent ulce);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juxd"
        },
        "content": "    Path getDeliverymenListFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juxd"
        },
        "content": "    Optional\u003cDeliverymenList\u003e readDeliverymenList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juxd"
        },
        "content": "    void saveDeliverymenList(DeliverymenList deliverymenList) throws IOException;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juxd"
        },
        "content": "    * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juxd"
        },
        "content": "    *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juxd"
        },
        "content": "    * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juxd"
        },
        "content": "    */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juxd"
        },
        "content": "    void handleDeliverymenListChangedEvent(DeliverymenListChangedEvent abce);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 19,
      "monmanuela": 2,
      "rrtheonlyone": 6,
      "kohchihao": 18,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.commons.events.model.DeliverymenListChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.events.model.OrderBookChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.events.model.UsersListChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.ReadOnlyUsersList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymenList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.storage.deliveryman.DeliverymenListStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.storage.user.UsersListStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Manages storage of OrderBook data in local storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private OrderBookStorage orderBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private DeliverymenListStorage deliverymenListStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private UsersListStorage usersListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public StorageManager(OrderBookStorage orderBookStorage, UsersListStorage usersListStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                          DeliverymenListStorage deliverymenListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this.orderBookStorage \u003d orderBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.deliverymenListStorage \u003d deliverymenListStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.usersListStorage \u003d usersListStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UsersList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public Path getUsersListFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return usersListStorage.getUsersListFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public Optional\u003cReadOnlyUsersList\u003e readUsersList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return readUsersList(usersListStorage.getUsersListFilePath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public Optional\u003cReadOnlyUsersList\u003e readUsersList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return usersListStorage.readUsersList(filePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void saveUsersList(ReadOnlyUsersList usersList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        saveUsersList(usersList, usersListStorage.getUsersListFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void saveUsersList(ReadOnlyUsersList usersList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        usersListStorage.saveUsersList(usersList, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void handleUsersListChangedEvent(UsersListChangedEvent event) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            saveUsersList(event.data);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d OrderBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return orderBookStorage.getOrderBookFilePath();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Optional\u003cReadOnlyOrderBook\u003e readOrderBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return readOrderBook(orderBookStorage.getOrderBookFilePath());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Optional\u003cReadOnlyOrderBook\u003e readOrderBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return orderBookStorage.readOrderBook(filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void saveOrderBook(ReadOnlyOrderBook orderBook) throws IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        saveOrderBook(orderBook, orderBookStorage.getOrderBookFilePath());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void saveOrderBook(ReadOnlyOrderBook orderBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderBookStorage.saveOrderBook(orderBook, filePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void handleOrderBookChangedEvent(OrderBookChangedEvent event) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            saveOrderBook(event.data);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "juxd"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DeliverymenList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public Path getDeliverymenListFilePath() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return deliverymenListStorage.getDeliverymenListFilePath();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public Optional\u003cDeliverymenList\u003e readDeliverymenList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return readDeliverymenList(deliverymenListStorage.getDeliverymenListFilePath());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public Optional\u003cDeliverymenList\u003e readDeliverymenList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "juxd"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return deliverymenListStorage.readDeliverymenList(filePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void saveDeliverymenList(DeliverymenList deliverymenList) throws IOException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "juxd"
        },
        "content": "        saveDeliverymenList(deliverymenList, deliverymenListStorage.getDeliverymenListFilePath());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void saveDeliverymenList(DeliverymenList deliverymenList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "juxd"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "juxd"
        },
        "content": "        deliverymenListStorage.saveDeliverymenList(deliverymenList, filePath);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void handleDeliverymenListChangedEvent(DeliverymenListChangedEvent event) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "juxd"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "juxd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "juxd"
        },
        "content": "            saveDeliverymenList(event.data);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "juxd"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "juxd"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 42,
      "monmanuela": 2,
      "rrtheonlyone": 18,
      "kohchihao": 43,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.UserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 2,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedFood.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Food;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * JAXB-friendly adapted version of the Food."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class XmlAdaptedFood {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private String foodName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public XmlAdaptedFood() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Constructs a {@code XmlAdaptedFood} with the given {@code foodName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public XmlAdaptedFood(String foodName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Converts a given Food into this class for JAXB use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public XmlAdaptedFood(Food source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        foodName \u003d source.foodName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Converts this jaxb-friendly adapted food object into the model\u0027s Food object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted order"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Food toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!Food.isValidFood(foodName)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new IllegalValueException(Food.MESSAGE_FOOD_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return new Food(foodName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!(other instanceof XmlAdaptedFood)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return foodName.equals(((XmlAdaptedFood) other).foodName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedOrder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.model.TaggedObject.MESSAGE_INVALID_ID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "import javax.xml.bind.annotation.XmlID;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Food;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.OrderDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.OrderStatus;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * JAXB-friendly version of the Order."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class XmlAdaptedOrder {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Order\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @XmlAttribute (required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @XmlID"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private String tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private String status;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private List\u003cXmlAdaptedFood\u003e food \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Constructs an XmlAdaptedOrder."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public XmlAdaptedOrder() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Constructs an {@code XmlAdaptedOrder} with the given order details."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public XmlAdaptedOrder(String tag, String name, String phone, String address, String date, String status,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": "                           List\u003cXmlAdaptedFood\u003e food) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (food \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juxd"
        },
        "content": "            this.food \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juxd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juxd"
        },
        "content": "            this.food \u003d new ArrayList\u003c\u003e(food);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Constructs an {@code XmlAdaptedOrder} with the given order details."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public XmlAdaptedOrder(String name, String phone, String address, String date, String status,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                           List\u003cXmlAdaptedFood\u003e food) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this(UUID.randomUUID().toString(), name, phone, address, date, status, food);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Converts a given Order into this class for JAXB use."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedOrder"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public XmlAdaptedOrder(Order source) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juxd"
        },
        "content": "        tag \u003d source.getTag().toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        status \u003d source.getOrderStatus().toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        food \u003d source.getFood().stream()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .map(XmlAdaptedFood::new)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Converts this jaxb-friendly adapted order object into the model\u0027s Order object."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted order"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Order toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        final List\u003cFood\u003e foodStore \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        for (XmlAdaptedFood foodItem : food) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            foodStore.add(foodItem.toModelType());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!OrderDate.isValidDate(date)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new IllegalValueException(OrderDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        final OrderDate modelDate \u003d new OrderDate(date);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (foodStore.isEmpty()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Food.class.getSimpleName()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        final Set\u003cFood\u003e modelFood \u003d new HashSet\u003c\u003e(foodStore);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juxd"
        },
        "content": "        UUID modelTag;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "juxd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "juxd"
        },
        "content": "            modelTag \u003d UUID.fromString(tag);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "juxd"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                    OrderStatus.class.getSimpleName()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!OrderStatus.isValidStatus(status)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                    OrderStatus.class.getSimpleName()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        final OrderStatus orderStatus \u003d new OrderStatus(status);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return new Order(modelTag, modelName, modelPhone, modelAddress, modelDate, orderStatus, modelFood);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!(other instanceof XmlAdaptedOrder)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlAdaptedOrder otherOrder \u003d (XmlAdaptedOrder) other;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return tag.equals(otherOrder.tag)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "juxd"
        },
        "content": "                \u0026\u0026 Objects.equals(name, otherOrder.name)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherOrder.phone)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherOrder.address)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 Objects.equals(date, otherOrder.date)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 Objects.equals(status, otherOrder.status)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 food.equals(otherOrder.food);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 34,
      "rrtheonlyone": 154,
      "kohchihao": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public XmlAdaptedTag() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted common"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 2,
      "kohchihao": 1,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.storage.deliveryman.XmlSerializableDeliverymenList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.storage.user.XmlSerializableUsersList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Stores orderbook data in an XML file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Saves the given orderBook data to the specified file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableOrderBook orderBook)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            XmlUtil.saveDataToFile(file, orderBook);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "     * Returns address book in the file or an empty address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static XmlSerializableOrderBook loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableOrderBook.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Saves the given users list data to the specified file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static void saveUsersDataToFile(Path file, XmlSerializableUsersList usersList)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            XmlUtil.saveDataToFile(file, usersList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns users list in the file or an empty users list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static XmlSerializableUsersList loadUsersDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                                                                                       FileNotFoundException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableUsersList.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Saves the given deliverymen data to the specified file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static void saveDeliverymenDataToFile(Path file, XmlSerializableDeliverymenList deliverymenList)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juxd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juxd"
        },
        "content": "            XmlUtil.saveDataToFile(file, deliverymenList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juxd"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Returns deliverymen list in the file or an empty deliverymen list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static XmlSerializableDeliverymenList loadDeliverymenDataFromSaveFile(Path file)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juxd"
        },
        "content": "        throws DataConversionException, FileNotFoundException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juxd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableDeliverymenList.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juxd"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 23,
      "monmanuela": 2,
      "rrtheonlyone": 6,
      "kohchihao": 20,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlOrderBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * A class to access OrderBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class XmlOrderBookStorage implements OrderBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlOrderBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public XmlOrderBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Optional\u003cReadOnlyOrderBook\u003e readOrderBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return readOrderBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Similar to {@link #readOrderBook()} ()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Optional\u003cReadOnlyOrderBook\u003e readOrderBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            logger.info(\"OrderBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlSerializableOrderBook xmlOrderBook \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return Optional.of(xmlOrderBook.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void saveOrderBook(ReadOnlyOrderBook orderBook) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        saveOrderBook(orderBook, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Similar to {@link #saveOrderBook(ReadOnlyOrderBook)}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void saveOrderBook(ReadOnlyOrderBook orderBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        requireNonNull(orderBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableOrderBook(orderBook));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 21,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableOrderBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * An Immutable OrderBook that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "@XmlRootElement(name \u003d \"orderbook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class XmlSerializableOrderBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDER \u003d \"Orders list contains duplicate order(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private List\u003cXmlAdaptedOrder\u003e orders;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Creates an empty XmlSerializableOrderBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public XmlSerializableOrderBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public XmlSerializableOrderBook(ReadOnlyOrderBook src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orders.addAll(src.getOrderList().stream().map(XmlAdaptedOrder::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Converts this orderbook into the model\u0027s {@code OrderBook} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *                               {@code XmlAdaptedOrder}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderBook orderBook \u003d new OrderBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        for (XmlAdaptedOrder o : orders) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            Order order \u003d o.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            if (orderBook.hasOrder(order)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            orderBook.addOrder(order);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return orderBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!(other instanceof XmlSerializableOrderBook)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return orders.equals(((XmlSerializableOrderBook) other).orders);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/deliveryman/DeliverymenListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.storage.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymenList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": " * Represents the Storage interface for DeliverymenList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "public interface DeliverymenListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "    Path getDeliverymenListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Returns a list of deliveryman as a {@link DeliverymenList}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * @throws DataConversionException if the data is not in the expected format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "    Optional\u003cDeliverymenList\u003e readDeliverymenList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * @see #getDeliverymanFilePath()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "    Optional\u003cDeliverymenList\u003e readDeliverymenList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Saves the given {@link DeliverymenList} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * @param deliverymanList cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "    void saveDeliverymenList(DeliverymenList deliverymanList) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * @see #saveDeliverymenList(DeliverymenList)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "    void saveDeliverymenList(DeliverymenList deliverymanList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/deliveryman/XmlAdaptedDeliveryman.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.storage.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.model.TaggedObject.MESSAGE_INVALID_ID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "import javax.xml.bind.annotation.XmlAttribute;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import javax.xml.bind.annotation.XmlID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": " * Represents the XML for storage of Deliveryman"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class XmlAdaptedDeliveryman {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Deliveryman\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @XmlAttribute"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @XmlID"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private String tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public XmlAdaptedDeliveryman() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Constructs an {@code XmlAdapterDeliveryman} with the given common details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public XmlAdaptedDeliveryman(String tag, String name) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Constructs an {@code XmlAdapterDeliveryman} with the given common details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public XmlAdaptedDeliveryman(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.tag \u003d UUID.randomUUID().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Converts a given deliveryman into this class for JAXB use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juxd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * @param source"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public XmlAdaptedDeliveryman(Deliveryman source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juxd"
        },
        "content": "        tag \u003d source.getTag().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Converts this jaxb-friendly adapted deliveryman object into the model\u0027s Deliveryman object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juxd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * @throws IllegalValueException If there were any data constraints violated."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public Deliveryman toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juxd"
        },
        "content": "        UUID modelTag;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juxd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juxd"
        },
        "content": "            modelTag \u003d UUID.fromString(tag);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juxd"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juxd"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return new Deliveryman(modelTag, modelName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (!(other instanceof XmlAdaptedDeliveryman)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juxd"
        },
        "content": "        XmlAdaptedDeliveryman otherDman \u003d (XmlAdaptedDeliveryman) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return tag.equals(otherDman.tag)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juxd"
        },
        "content": "                \u0026\u0026 Objects.equals(name, otherDman.name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 91,
      "kohchihao": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/deliveryman/XmlDeliverymenListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.storage.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymenList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.storage.XmlFileStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": " * Represents the Storage methods for storage of XML deliverymen list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class XmlDeliverymenListStorage implements DeliverymenListStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlDeliverymenListStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public XmlDeliverymenListStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public Path getDeliverymenListFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public Optional\u003cDeliverymenList\u003e readDeliverymenList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return readDeliverymenList(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Similar to {@link #readDeliverymenList()}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public Optional\u003cDeliverymenList\u003e readDeliverymenList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": "            logger.info(\"DeliverymenList file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": "        XmlSerializableDeliverymenList xmlDeliverymenList \u003d XmlFileStorage.loadDeliverymenDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return Optional.of(xmlDeliverymenList.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void saveDeliverymenList(DeliverymenList addressBook) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juxd"
        },
        "content": "        saveDeliverymenList(addressBook, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Similar to {@link #saveDeliverymenList(DeliverymenList)}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void saveDeliverymenList(DeliverymenList addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juxd"
        },
        "content": "        XmlFileStorage.saveDeliverymenDataToFile(filePath, new XmlSerializableDeliverymenList(addressBook));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 21,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/deliveryman/XmlSerializableDeliverymenList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.storage.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymenList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": " * An Immutable DeliverymenList that is serializable to XML format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "@XmlRootElement(name \u003d \"deliverymenlist\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class XmlSerializableDeliverymenList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DELIVERYMAN \u003d \"Deliverymen List contains duplicate deliverymen.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private List\u003cXmlAdaptedDeliveryman\u003e deliverymen;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Creates an empty XmlSerializableDeliverymenList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Required for marshalling."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public XmlSerializableDeliverymenList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "        deliverymen \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Converts DeliverymenList to Serializable"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public XmlSerializableDeliverymenList(DeliverymenList src) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "        deliverymen.addAll(src.getDeliverymenList().stream().map(XmlAdaptedDeliveryman::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Converts this deliverymen list into the model\u0027s {@code DeliverymenList} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or dupicates"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public DeliverymenList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymenList deliverymenList \u003d new DeliverymenList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": "        for (XmlAdaptedDeliveryman d : deliverymen) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juxd"
        },
        "content": "            Deliveryman dMan \u003d d.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": "            if (deliverymenList.hasDeliveryman(dMan)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DELIVERYMAN);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juxd"
        },
        "content": "            deliverymenList.addDeliveryman(dMan);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return deliverymenList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (!(other instanceof XmlSerializableDeliverymenList)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return deliverymen.equals(((XmlSerializableDeliverymenList) other).deliverymen);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/user/UsersListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.storage.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.ReadOnlyUsersList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UsersList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public interface UsersListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    Path getUsersListFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns UsersList data as a {@link ReadOnlyUsersList}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    Optional\u003cReadOnlyUsersList\u003e readUsersList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @see #getUsersListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    Optional\u003cReadOnlyUsersList\u003e readUsersList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Saves the given {@link ReadOnlyUsersList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @param usersList cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    void saveUsersList(ReadOnlyUsersList usersList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @see #saveUsersList(ReadOnlyUsersList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    void saveUsersList(ReadOnlyUsersList usersList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/user/XmlAdaptedUser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.storage.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Password;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Username;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * JAXB-friendly version of the User."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class XmlAdaptedUser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"User\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Constructs an XmlAdaptedUser."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public XmlAdaptedUser() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Constructs an {@code XmlAdaptedUser} with the given common details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public XmlAdaptedUser(String name, String username, String password) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Converts a given User into this class for JAXB use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedUser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public XmlAdaptedUser(User source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        username \u003d source.getUsername().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        password \u003d source.getPassword().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Converts this jaxb-friendly adapted common object into the model\u0027s User object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted user"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public User toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (username \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    Username.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (!Username.isValidUsername(username)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new IllegalValueException(Username.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        final Username modelUsername \u003d new Username(username);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    Password.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (!Password.isValidPassword(password)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new IllegalValueException(Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        final Password modelPassword \u003d new Password(password);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return new User(modelName, modelUsername, modelPassword);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (!(other instanceof XmlAdaptedUser)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        XmlAdaptedUser otherUser \u003d (XmlAdaptedUser) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return Objects.equals(name, otherUser.name)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u0026\u0026 Objects.equals(username, otherUser.username)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u0026\u0026 Objects.equals(password, otherUser.password);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/user/XmlSerializableUsersList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.storage.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.ReadOnlyUsersList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.UsersList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * An Immutable User that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "@XmlRootElement(name \u003d \"userslist\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class XmlSerializableUsersList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_USER \u003d \"User list contains duplicate user(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private List\u003cXmlAdaptedUser\u003e users;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public XmlSerializableUsersList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        users \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public XmlSerializableUsersList(ReadOnlyUsersList src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        users.addAll(src.getUserList().stream().map(XmlAdaptedUser::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *                               {@code XmlAdaptedPerson}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public UsersList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        UsersList usersList \u003d new UsersList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        for (XmlAdaptedUser u : users) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            User user \u003d u.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            if (usersList.hasUser(user)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_USER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            usersList.addUser(user);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return usersList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (!(other instanceof XmlSerializableUsersList)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return users.equals(((XmlSerializableUsersList) other).users);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/user/XmlUsersListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.storage.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.ReadOnlyUsersList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.storage.XmlFileStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * A class to access UsersList data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class XmlUsersListStorage implements UsersListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlUsersListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public XmlUsersListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public Path getUsersListFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public Optional\u003cReadOnlyUsersList\u003e readUsersList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return readUsersList(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Similar to {@link #readUsersList()}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public Optional\u003cReadOnlyUsersList\u003e readUsersList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            logger.info(\"UsersList file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        XmlSerializableUsersList xmlUsersList \u003d XmlFileStorage.loadUsersDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return Optional.of(xmlUsersList.toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void saveUsersList(ReadOnlyUsersList usersList) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        saveUsersList(usersList, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Similar to {@link #saveUsersList(ReadOnlyUsersList)}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void saveUsersList(ReadOnlyUsersList usersList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(usersList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        XmlFileStorage.saveUsersDataToFile(filePath, new XmlSerializableUsersList(usersList));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.events.ui.OrderPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private void loadOrderPage(Order order) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + order.getName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private void handleOrderPanelSelectionChangedEvent(OrderPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        loadOrderPage(event.getNewSelection());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 6,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeliverymanCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * An UI component that displays information of a {@code Order}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class DeliverymanCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final String FXML \u003d \"DeliverymanListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on OrderBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public final Deliveryman deliveryman;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private VBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public DeliverymanCard(Deliveryman deliveryman, int displayedIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this.deliveryman \u003d deliveryman;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        name.setText(deliveryman.getName().fullName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!(other instanceof DeliverymanCard)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        DeliverymanCard card \u003d (DeliverymanCard) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return deliveryman.equals(card.deliveryman);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeliverymanListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.events.ui.DeliveryManPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Panel containing the list of orders."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class DeliverymanListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final String FXML \u003d \"DeliverymanListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeliverymanListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private ListView\u003cDeliveryman\u003e deliverymanListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public DeliverymanListPanel(ObservableList\u003cDeliveryman\u003e deliveryManList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        setConnections(deliveryManList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private void setConnections(ObservableList\u003cDeliveryman\u003e orderList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        deliverymanListView.setItems(orderList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        deliverymanListView.setCellFactory(listView -\u003e new DeliveryManListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        deliverymanListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        logger.fine(\"Selection in delivery man list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        raise(new DeliveryManPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Scrolls to the {@code OrderCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            deliverymanListView.scrollTo(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            deliverymanListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Order} using a {@code OrderCard}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    class DeliveryManListViewCell extends ListCell\u003cDeliveryman\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        protected void updateItem(Deliveryman deliveryman, boolean empty) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            super.updateItem(deliveryman, empty);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            if (empty || deliveryman \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                setGraphic(new DeliverymanCard(deliveryman, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Display.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Panel containing the list of orders."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class Display extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final String FXML \u003d \"Display.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Display.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Display() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LoggedInPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Panel containing the main split pane."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class LoggedInPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private static final String FXML \u003d \"LoggedInPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LoginPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Display display;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private OrderListPanel orderListPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private DeliverymanListPanel deliveryMenListPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private LoginPanel loginPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private StackPane displayPlaceholder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private StackPane orderListPanelPlaceholder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private StackPane deliveryMenListPanelPlaceholder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public LoggedInPanel(Logic logic) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        display \u003d new Display();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        displayPlaceholder.getChildren().add(display.getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        orderListPanel \u003d new OrderListPanel(logic.getFilteredOrderList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        orderListPanelPlaceholder.getChildren().add(orderListPanel.getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        deliveryMenListPanel \u003d new DeliverymanListPanel(logic.getFilteredDeliverymanList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        deliveryMenListPanelPlaceholder.getChildren().add(deliveryMenListPanel.getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LoginPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Panel containing the login screen."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class LoginPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private static final String FXML \u003d \"LoginPanel.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LoginPanel.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public LoginPanel() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.events.model.UserLoggedInEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.events.model.UserLoggedOutEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private static final String DISPLAYING_LOGGED_IN_PANEL \u003d \"Displaying logged in panel\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private static final String HIDE_LOGGED_IN_PANEL \u003d \"Hiding logged in panel\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private LoginPanel loginPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private LoggedInPanel loggedInPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private AnchorPane mainDisplayPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        loginPanel \u003d new LoginPanel();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        mainDisplayPlaceholder.getChildren().add(loginPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Display logged in panel after login successful."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    void displayLoggedInPanel() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        mainDisplayPlaceholder.getChildren().removeAll(loginPanel.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        loggedInPanel \u003d new LoggedInPanel(logic);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        mainDisplayPlaceholder.getChildren().add(loggedInPanel.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Hide logged in panel after logout successful."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    void hideLoggedInPanel() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        mainDisplayPlaceholder.getChildren().removeAll(loggedInPanel.getRoot());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        mainDisplayPlaceholder.getChildren().add(loginPanel.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private void handleUserLoggedInEvent(UserLoggedInEvent event) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        logger.info(DISPLAYING_LOGGED_IN_PANEL);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        displayLoggedInPanel();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private void handleUserLoggedOutEvent(UserLoggedOutEvent event) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        logger.info(HIDE_LOGGED_IN_PANEL);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        hideLoggedInPanel();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 2,
      "kohchihao": 33,
      "-": 193
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OrderCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Food;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * An UI component that displays information of a {@code Order}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final String FXML \u003d \"OrderListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on OrderBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public final Order order;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private Label foodList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private Label orderDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderCard(Order order, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        id.setText(\"#\" + displayedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        address.setText(order.getAddress().value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        for (Food food : order.getFood()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            sb.append(food.foodName + \",\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        foodList.setText(sb.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderDate.setText(order.getDate().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!(other instanceof OrderCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderCard card \u003d (OrderCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 order.equals(card.order);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OrderListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.events.ui.OrderPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Panel containing the list of orders."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final String FXML \u003d \"OrderListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(OrderListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private ListView\u003cOrder\u003e orderListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderListPanel(ObservableList\u003cOrder\u003e orderList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        setConnections(orderList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private void setConnections(ObservableList\u003cOrder\u003e orderList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderListView.setItems(orderList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderListView.setCellFactory(listView -\u003e new OrderListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        logger.fine(\"Selection in order list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        raise(new OrderPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Scrolls to the {@code OrderCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            orderListView.scrollTo(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            orderListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Order} using a {@code OrderCard}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    class OrderListViewCell extends ListCell\u003cOrder\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        protected void updateItem(Order order, boolean empty) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            super.updateItem(order, empty);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            if (empty || order \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                setGraphic(new OrderCard(order, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.events.model.OrderBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void handleOrderBookChangedEvent(OrderBookChangedEvent abce) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 10,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Stops the UI."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    void stop();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 6,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/scooter.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 21,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises the event via {@link EventsCenter#post(BaseEvent)}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(event);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Registers the object as an event handler at the {@link EventsCenter}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param handler usually {@code this}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 18,
      "-": 95
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cBorderPane xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "   \u003ccenter\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003cStackPane styleClass\u003d\"stack-pane\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "             \u003cTextField fx:id\u003d\"commandTextField\" maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"-Infinity\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\" promptText\u003d\"Enter command here...\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "   \u003c/center\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "   \u003cleft\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003cLabel fx:id\u003d\"commandIcon\" text\u003d\"FoodZoom\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "   \u003c/left\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 15,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-border-color: transparent transparent derive(-fx-base, 80%) transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap: 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 1,
      "-": 346
    }
  },
  {
    "path": "src/main/resources/view/DeliverymanListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cBorderPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"150.0\" prefWidth\u003d\"150.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "   \u003ccenter\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            \u003cImage url\u003d\"@../images/deliveryboy.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "   \u003c/center\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "   \u003cbottom\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" BorderPane.alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "   \u003c/bottom\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "   \u003ctop\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003cLabel fx:id\u003d\"deliverymanStatus\" text\u003d\"Available\" BorderPane.alignment\u003d\"TOP_RIGHT\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "   \u003c/top\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 23
    }
  },
  {
    "path": "src/main/resources/view/DeliverymanListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cListView fx:id\u003d\"deliverymanListView\" VBox.vgrow\u003d\"ALWAYS\" orientation\u003d\"HORIZONTAL\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 7
    }
  },
  {
    "path": "src/main/resources/view/Display.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.chart.BarChart?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cSplitPane fx:id\u003d\"displayBox\" dividerPositions\u003d\"0.6595394736842105\" minHeight\u003d\"370\" VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cVBox minWidth\u003d\"260\" prefWidth\u003d\"260\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003cHBox prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            \u003cLabel fx:id\u003d\"displayPending\" text\u003d\"Total Pending Orders\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            \u003cProgressBar fx:id\u003d\"progressBar\" prefWidth\u003d\"200.0\" progress\u003d\"0.5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cStackPane fx:id\u003d\"mapWrapper\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            \u003cImageView fitHeight\u003d\"300.0\" fitWidth\u003d\"550.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "               \u003cimage\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                  \u003cImage url\u003d\"@../images/sgmap.png\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "               \u003c/image\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cVBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cStackPane prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cStackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003cBarChart prefHeight\u003d\"220.0\" prefWidth\u003d\"125.0\" title\u003d\"Orders Completed over Time\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cxAxis\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "          \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cyAxis\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "          \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/SplitPane\u003e"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 57
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Help\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cWebView fx:id\u003d\"browser\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 4,
      "-": 14
    }
  },
  {
    "path": "src/main/resources/view/LoggedInPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003cAnchorPane style\u003d\"-fx-background-color: #f44336;\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.bottomAnchor\u003d\"0.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003cVBox AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "          AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cSplitPane fx:id\u003d\"mainSplitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"260\" prefWidth\u003d\"260\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u003cStackPane fx:id\u003d\"orderListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u003cStackPane fx:id\u003d\"displayPlaceholder\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u003cStackPane fx:id\u003d\"deliveryMenListPanelPlaceholder\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 36
    }
  },
  {
    "path": "src/main/resources/view/LoginPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003cAnchorPane id\u003d\"loginPane\" styleClass\u003d\"TestTheme.css\" AnchorPane.bottomAnchor\u003d\"0\" AnchorPane.leftAnchor\u003d\"0\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            AnchorPane.rightAnchor\u003d\"0\" AnchorPane.topAnchor\u003d\"0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "              AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u003cText fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                      text\u003d\"Please Login to the application before moving on.\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 17
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/9.0.4\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cImage url\u003d\"@/images/scooter.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u003cURL value\u003d\"@TestTheme.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                           styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                \u003cAnchorPane fx:id\u003d\"mainDisplayPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" style\u003d\"-fx-background-color: #9c27b0;\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 5,
      "kohchihao": 9,
      "-": 40
    }
  },
  {
    "path": "src/main/resources/view/MapCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            fx:controller\u003d\"view.MapCard\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 14
    }
  },
  {
    "path": "src/main/resources/view/OrderListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cGridPane fx:id\u003d\"cardPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003cLabel fx:id\u003d\"id\" text\u003d\"\\$id\" textAlignment\u003d\"RIGHT\" GridPane.columnIndex\u003d\"6\" GridPane.halignment\u003d\"RIGHT\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003cLabel fx:id\u003d\"foodList\" prefHeight\u003d\"17.0\" prefWidth\u003d\"123.0\" text\u003d\"\\$first\" GridPane.columnIndex\u003d\"1\" GridPane.columnSpan\u003d\"2147483647\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003cImageView fitHeight\u003d\"20.0\" fitWidth\u003d\"20.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            \u003cImage url\u003d\"@../images/cutlery.png\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003cLabel fx:id\u003d\"orderStatus\" text\u003d\"Pending\" GridPane.columnSpan\u003d\"5\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" text\u003d\"\\$first\" GridPane.columnSpan\u003d\"2147483647\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "      \u003cLabel fx:id\u003d\"orderDate\" text\u003d\"\\$first\" GridPane.columnSpan\u003d\"2147483647\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 38
    }
  },
  {
    "path": "src/main/resources/view/OrderListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cListView fx:id\u003d\"orderListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 7
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import org.controlsfx.control.StatusBar?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cGridPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"grid-pane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"syncStatus\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cStatusBar styleClass\u003d\"stack-pane\" fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "               nodeOrientation\u003d\"RIGHT_TO_LEFT\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 3,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/TestTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-color: derive(#14281D, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-family: \"Times New Roman\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-color: derive(#14281D, 20%);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-border-color: derive(#14281D, 10%);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-color: derive(#F1F5F2, 20%);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-family: \"Times New Roman\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#commandIcon {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-family: \"Rockwell\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-effect: dropshadow( gaussian , rgba(255,255,255,0.5) , 0,0,0,1 );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-padding: 10;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-color: #F1F5F2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-family: \"Chalkboard\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-color: derive(#355834, 20%);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#mainSplitPane {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-color: derive(#14281D, 20%);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-color: #14281D;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#orderListView .list-cell {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-insets: 4px ;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-border-color: #14281D;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#orderListView .list-cell:filled:even {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-color: #e5ffde;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#orderListView .list-cell:filled:odd {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-color: derive(#e5ffde, 30%);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#orderListView .list-cell:filled:selected {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#orderStatus {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#id {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-family: \"Verdana\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-size: 14;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#foodList {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-family: \"Verdana\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-size: 14;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-underline: true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#address {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-family: \"Verdana\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#orderDate {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-family: \"Verdana\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-size: 12;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#deliverymanListView .list-cell {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-insets: 4px ;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-border-color: #14281D;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#deliverymanListView .list-cell:filled:even {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-color: #f8deff;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#deliverymanListView .list-cell:filled:odd {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-color: derive(#f8deff, 30%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#deliverymanListView .list-cell:filled:selected {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#name {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-family: Verdana;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-style: bold;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-size: 14;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#deliverymanStatus {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-color: #14281D;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-family: Verdana;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#displayBox {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-background-color: derive(#F1F5F2, 20%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#displayPending {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-family: Chalkboard;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-style: bold;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-font-size: 14;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-padding: 10;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#progressBar {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    -fx-padding: 10;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "#loginPane {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    -fx-background-color: derive(#14281D, 20%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 190,
      "kohchihao": 4
    }
  },
  {
    "path": "src/test/data/XmlDeliverymenListStorageTest/invalidAndValidDeliverymenDeliverymenList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003cdeliverymenlist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003c!-- Valid Person --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003cdeliverymen tag\u003d\"71cac1b0-33ea-4d0e-b1bd-c9e72cd3351f\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003c/deliverymen\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003cdeliverymen tag\u003d\"71cac1b0-33ea-4d0e-b1bd-c9e72cd3351f\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003c/deliverymen\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003c/deliverymenlist\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 11
    }
  },
  {
    "path": "src/test/data/XmlDeliverymenListStorageTest/invalidDeliverymanDeliverymenList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003cdeliverymenlist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003c!-- Person with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003cdeliverymen\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003c/deliverymen\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003c/deliverymenlist\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 7
    }
  },
  {
    "path": "src/test/data/XmlOrderBookStorageTest/invalidAndValidOrderOrderBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003corderbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c!-- Valid Order --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003corders tag\u003d\"03b326f4-4000-4c71-a200-975b93b8d066\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003emilo\u003c/food\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003corders tag\u003d\"27bef72a-03b2-46d9-94d7-b8a0d359ec6e\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003emilo\u003c/food\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/orderbook\u003e"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 13,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlOrderBookStorageTest/invalidOrderOrderBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003corderbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c!-- Order with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003corders\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003emilo\u003c/food\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/orderbook\u003e"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 8,
      "-": 4
    }
  },
  {
    "path": "src/test/data/XmlRouteListStorageTest/NotXmlFormatRouteList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "not xml format!"
      }
    ],
    "authorContributionMap": {
      "monmanuela": 1
    }
  },
  {
    "path": "src/test/data/XmlRouteListStorageTest/invalidAndValidRouteRouteList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003croutelist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    \u003c!-- Valid route --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003croutes tag\u003d\"0a52f570-4f41-4460-b303-e0567910e9b3\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003csource\u003e12 Clementi Rd\u003c/source\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003corders tag\u003d\"92c54d56-e971-407a-81e7-5df71c3c82fc\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cname\u003eJane Doe\u003c/name\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cphone\u003e84625432\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003caddress\u003e6 College Ave\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cdate\u003e12-10-2018 01:56:00\u003c/date\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cfood\u003ePrata\u003c/food\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003c/orders\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    \u003c/routes\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    \u003c!-- Route with invalid source and destination field --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003croutes tag\u003d\"778909e5-f134-472a-bfd8-d34b35cf0b62\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003csource\u003e \u003c/source\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003corders tag\u003d\"92c54d56-e971-407a-81e7-5df71c3c82fc\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cphone\u003e84625432\u003c/phone\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003caddress\u003e6 College Ave\u003c/address\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cdate\u003e12-10-2018 01:56:00\u003c/date\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cfood\u003ePrata\u003c/food\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003c/orders\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    \u003c/routes\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003c/routelist\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 4,
      "monmanuela": 21
    }
  },
  {
    "path": "src/test/data/XmlRouteListStorageTest/invalidRouteRouteList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003croutelist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003c!-- Route with invalid source and destination field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003croutes tag\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003csource\u003e \u003c/source\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003corders\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cphone\u003e84625432\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003caddress\u003e6 College Ave\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cdate\u003e12-10-2018 01:56:00\u003c/date\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cfood\u003ePrata\u003c/food\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003c/orders\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    \u003c/routes\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003c/routelist\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 2,
      "monmanuela": 12
    }
  },
  {
    "path": "src/test/data/XmlSerializableDeliverymenListTest/duplicateDeliverymenDeliverymenList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003cdeliverymenlist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003cdeliverymen tag\u003d\"71cac1b0-33ea-4d0e-b1bd-c9e72cd3351f\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003c/deliverymen\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003c!-- Person with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003cdeliverymen tag\u003d\"71cac1b0-33ea-4d0e-b1bd-c9e72cd3351f\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003c/deliverymen\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003c/deliverymenlist\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 13
    }
  },
  {
    "path": "src/test/data/XmlSerializableDeliverymenListTest/invalidDeliverymanDeliverymenList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003cdeliverymenlist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003c!-- Person with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003cdeliverymen tag\u003d\"71cac1b0-33ea-4d0e-b1bd-c9e72cd3351f\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003cname\u003eHans Mu5+er\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003c/deliverymen\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003c/deliverymenlist\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 7
    }
  },
  {
    "path": "src/test/data/XmlSerializableDeliverymenListTest/typicalDeliverymenDeliverymenList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003c!-- deliverymenlist save file which contains the same Person values as in Typicaldeliverymen#getTypicaldeliverymenlist() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003cdeliverymenlist\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003cdeliverymen tag\u003d\"0a52f570-4f41-4460-b303-e0567910e9b3\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003cname\u003eHoh Chi Kao\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003c/deliverymen\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003cdeliverymen tag\u003d\"e6f8a44a-fc0c-4a38-b650-4f5a9947fd31\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003cname\u003eManika Monuela\u003c/name\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003c/deliverymen\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003cdeliverymen tag\u003d\"778909e5-f134-472a-bfd8-d34b35cf0b62\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003cname\u003eRajul Rahesh\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003c/deliverymen\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003cdeliverymen tag\u003d\"71cac1b0-33ea-4d0e-b1bd-c9e72cd3351f\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003cname\u003eTan Yin Jing\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003c/deliverymen\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003c/deliverymenlist\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 16
    }
  },
  {
    "path": "src/test/data/XmlSerializableOrderBookTest/duplicateOrderOrderBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003corderbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003corders tag\u003d\"e7dc53e1-a1a0-4208-8f29-a6b24f215ff9\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003echocolate milk\u003c/food\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c!-- Order with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003corders tag\u003d\"e7dc53e1-a1a0-4208-8f29-a6b24f215ff9\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003etea\u003c/food\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/orderbook\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 2,
      "rrtheonlyone": 11,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableOrderBookTest/invalidOrderOrderBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003corderbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c!-- Order with invalid phone field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003corders tag\u003d\"e7dc53e1-a1a0-4208-8f29-a6b24f215ff9\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424ab\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003etest\u003c/food\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/orderbook\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 1,
      "rrtheonlyone": 11
    }
  },
  {
    "path": "src/test/data/XmlSerializableOrderBookTest/typicalOrdersOrderBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c!-- OrderBook save file which contains the same Order values as in TypicalOrders#getTypicalOrderBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003corderbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003corders tag\u003d\"92c54d56-e971-407a-81e7-5df71c3c82fc\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003eRoti Prata\u003c/food\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003corders tag\u003d\"e328789f-c707-49a9-8147-d93e213fb1d7\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003eEgg Fried Rice\u003c/food\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003eMilo\u003c/food\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003corders tag\u003d\"6c974f14-e5f5-4652-ba14-4df75e259b25\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003eMilkshake\u003c/food\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003corders tag\u003d\"ec11e415-4794-44c2-9d29-861d359d8b76\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003eFish and Chips\u003c/food\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003corders tag\u003d\"d0abc707-2363-46b2-8c45-92667f3d9e0e\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003eChicken Chop\u003c/food\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003corders tag\u003d\"77bd3598-2d3a-450e-a37b-a79de94792dc\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003eTuna Sandwich\u003c/food\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003corders tag\u003d\"e7dc53e1-a1a0-4208-8f29-a6b24f215ff9\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003eIce cream\u003c/food\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/orderbook\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 7,
      "rrtheonlyone": 32,
      "-": 22
    }
  },
  {
    "path": "src/test/data/XmlSerializableRouteListTest/duplicateRouteRouteList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003croutelist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003croutes tag\u003d\"9e1c61c1-5cae-40bf-95b5-8fb5265805c3\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003csource\u003e12 Clementi Rd\u003c/source\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003corders tag\u003d\"ec11e415-4794-44c2-9d29-861d359d8b76\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cfood\u003eMilkshake\u003c/food\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003c/orders\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    \u003c/routes\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003c!-- Route with same source and destination --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003croutes tag\u003d\"9e1c61c1-5cae-40bf-95b5-8fb5263805c3\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003csource\u003e12 Clementi Rd\u003c/source\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003corders tag\u003d\"ec11e415-4794-44c2-9d29-861d359d8b76\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cfood\u003eMilkshake\u003c/food\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003c/orders\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    \u003c/routes\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003c/routelist\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 5,
      "monmanuela": 21
    }
  },
  {
    "path": "src/test/data/XmlSerializableRouteListTest/invalidRouteRouteList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003croutelist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    \u003c!-- Route with invalid destination field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003croutes tag\u003d\"9e1c61c1-5cae-40bf-95b5-8fb5265805c3\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003csource\u003e12 Clementi Rd\u003c/source\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003cdestination\u003e \u003c/destination\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    \u003c/routes\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003c/routelist\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 1,
      "monmanuela": 7
    }
  },
  {
    "path": "src/test/data/XmlSerializableRouteListTest/typicalRouteRouteList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003c!-- Routelist save file which contains the same Route values as in TypicalRoutes#getTypicalRouteList() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003croutelist\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003croutes tag\u003d\"92c54d56-e971-407a-81e7-5df71c3c82fc\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003csource\u003e12 Clementi Rd\u003c/source\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003corders tag\u003d\"92c54d56-e971-407a-81e7-5df71c3c82fc\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cfood\u003eRoti Prata\u003c/food\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003c/orders\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003corders tag\u003d\"e328789f-c707-49a9-8147-d93e213fb1d7\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cfood\u003eEgg Fried Rice\u003c/food\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cfood\u003eMilo\u003c/food\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003c/orders\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    \u003c/routes\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003croutes tag\u003d\"6c974f14-e5f5-4652-ba14-4df75e259b25\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003csource\u003e12 Clementi Rd\u003c/source\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003corders tag\u003d\"6c974f14-e5f5-4652-ba14-4df75e259b25\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cfood\u003eMilkshake\u003c/food\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003c/orders\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    \u003c/routes\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003croutes tag\u003d\"ec11e415-4794-44c2-9d29-861d359d8b76\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003csource\u003e12 Clementi Rd\u003c/source\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003corders tag\u003d\"ec11e415-4794-44c2-9d29-861d359d8b76\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            \u003cfood\u003eFish and Chips\u003c/food\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        \u003c/orders\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    \u003c/routes\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003c/routelist\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 7,
      "monmanuela": 35
    }
  },
  {
    "path": "src/test/data/XmlSerializableUsersListTest/duplicateUsersList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003cuserslist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003cusers\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cname\u003eMarcus Koh\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cusername\u003emanager01\u003c/username\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cpassword\u003epassword123\u003c/password\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003c/users\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003c!--User with same identity--\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003cusers\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cname\u003eMarcus Koh\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cusername\u003emanager01\u003c/username\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cpassword\u003epassword123\u003c/password\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003c/users\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c/userslist\u003e"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 17
    }
  },
  {
    "path": "src/test/data/XmlSerializableUsersListTest/invalidUsersList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003cuserslist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003c!--User with invalid password--\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003cusers\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cname\u003emarcuskoh\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cusername\u003ekohchihao\u003c/username\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cpassword\u003epa12\u003c/password\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003c/users\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c/userslist\u003e"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 9
    }
  },
  {
    "path": "src/test/data/XmlSerializableUsersListTest/typicalUsersList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003cuserslist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003c!--Valid User--\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003cusers\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cusername\u003ealicepauline\u003c/username\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cpassword\u003ealicepauline01\u003c/password\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003c/users\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003cusers\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cusername\u003ebensonmeier\u003c/username\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cpassword\u003ebensonmeier02\u003c/password\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003c/users\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003cusers\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cusername\u003ecarlkurz\u003c/username\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cpassword\u003ecarlkurz03\u003c/password\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003c/users\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c/userslist\u003e"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 23
    }
  },
  {
    "path": "src/test/data/XmlUsersListStorageTest/NotXmlFormatUsersList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "not xml format!"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 1
    }
  },
  {
    "path": "src/test/data/XmlUsersListStorageTest/invalidAndValidUsersList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003cuserslist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003c!--Valid User--\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003cusers\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cname\u003eMarcus Koh\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cusername\u003emanager01\u003c/username\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cpassword\u003epassword123\u003c/password\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003c/users\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003c!--User with invalid password--\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003cusers\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cname\u003emarcuskoh\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cusername\u003ekohchihao\u003c/username\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cpassword\u003epass\u003c/password\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003c/users\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c/userslist\u003e"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 16
    }
  },
  {
    "path": "src/test/data/XmlUsersListStorageTest/invalidUsersList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003cuserslist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "   \u003c!--User with invalid name--\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003cusers\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cname\u003emarcuskoh@@\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cusername\u003ekohchihao\u003c/username\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        \u003cpassword\u003epassword123\u003c/password\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    \u003c/users\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "\u003c/userslist\u003e"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidDeliverymanField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003c!-- Deliveryman with an invalid name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003cdeliveryman tag\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003cname\u003einv@lid name\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003c/deliveryman\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 5
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidOrderField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c!-- Order with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003corder tag\u003d\"1650dbab-e584-4e7f-87dc-fcac93a2aea9\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cfood\u003emilo\u003c/food\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/order\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 1,
      "rrtheonlyone": 5,
      "-": 4
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingOrderField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c!-- Order with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003corder tag\u003d\"1650dbab-e584-4e7f-87dc-fcac93a2aea9\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cfood\u003emilo\u003c/food\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/order\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 1,
      "rrtheonlyone": 5,
      "-": 3
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempOrderBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003corderbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003corder\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cid\u003e1\u003c/id\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfirstName\u003eJohn\u003c/firstName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003clastName\u003eDoe\u003c/lastName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cgithubUsername\u003e\u003c/githubUsername\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cstreet\u003e\u003c/street\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpostalCode\u003e\u003c/postalCode\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccity\u003e\u003c/city\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/order\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/orderbook\u003e"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 4,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validDeliveryman.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003cdeliveryman tag\u003d\"1650dbab-e584-4e7f-87dc-fcac93a2aea9\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003c/deliveryman\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 4
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validDeliverymenList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003cdeliverymenlist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003cdeliverymen tag\u003d\"c81d7f3a-4460-4da6-9dd2-cd142b83ffc7\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003cname\u003eHoh Chi Kao\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003c/deliverymen\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003cdeliverymen tag\u003d\"14855aa8-5b64-4232-a327-ec941a053155\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "        \u003cname\u003eManika Monuela\u003c/name\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003c/deliverymen\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003c/deliverymenlist\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validOrder.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": "\u003corder tag\u003d\"1650dbab-e584-4e7f-87dc-fcac93a2aea9\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003cfood\u003emilo\u003c/food\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/order\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 1,
      "rrtheonlyone": 5,
      "-": 4
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validOrderBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003corderbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003corders tag\u003d\"03b326f4-4000-4c71-a200-975b93b8d066\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003emilo\u003c/food\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003corders tag\u003d\"27bef72a-03b2-46d9-94d7-b8a0d359ec6e\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003emilo\u003c/food\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003corders tag\u003d\"f2fa7cb9-03fe-4305-95d1-119cb644bd7f\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003emilo\u003c/food\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003corders tag\u003d\"91fab618-8cdf-4be1-b3a7-f94a01953e54\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003emilo\u003c/food\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003corders tag\u003d\"e05002f3-4d81-4ae6-8f27-515125e91d9a\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003emilo\u003c/food\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003corders tag\u003d\"652302e0-e8b2-4a2e-ad97-c8048681b515\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003emilo\u003c/food\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003corders tag\u003d\"00fc91a1-35a9-473b-8635-430556017c2d\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003emilo\u003c/food\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003corders tag\u003d\"8cd10f97-0318-4bbe-b810-6b55f2d088e8\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003emilo\u003c/food\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": "    \u003corders tag\u003d\"e8b01f33-373f-4515-ba13-d4926c526d2f\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cstatus\u003ePENDING\u003c/status\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        \u003cfood\u003emilo\u003c/food\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    \u003c/orders\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/orderbook\u003e"
      }
    ],
    "authorContributionMap": {
      "juxd": 9,
      "rrtheonlyone": 38,
      "-": 28
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/DisplayPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * A handler for the {@code BrowserPanel} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class DisplayPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String BROWSER_ID \u003d \"#browser\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private boolean isWebViewLoaded \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private URL lastRememberedUrl;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public DisplayPanelHandle(Node browserPanelNode) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        super(browserPanelNode);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 22
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private OrderListPanelHandle orderListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setOrderListPanel() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        orderListPanel \u003d new OrderListPanelHandle(getChildNode(OrderListPanelHandle.ORDER_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderListPanelHandle getOrderListPanel() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return orderListPanel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 2,
      "kohchihao": 6,
      "-": 42
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/OrderCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Provides a handle to a order card in the order list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final String FOOD_FIELD_ID \u003d \"#foodList\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final Label foodLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        foodLabel \u003d getChildNode(FOOD_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public List\u003cString\u003e getFood() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return Arrays.asList(foodLabel.getText().split(\",\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns true if this handle contains {@code order}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean equals(Order order) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return getAddress().equals(order.getAddress().value)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getFood()).equals(ImmutableMultiset.copyOf(order.getFood().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .map(food -\u003e food.foodName)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 15,
      "-": 40
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/OrderListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Provides a handle for {@code OrderListPanel} containing the list of {@code OrderCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderListPanelHandle extends NodeHandle\u003cListView\u003cOrder\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String ORDER_LIST_VIEW_ID \u003d \"#orderListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private Optional\u003cOrder\u003e lastRememberedSelectedOrderCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderListPanelHandle(ListView\u003cOrder\u003e orderListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        super(orderListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns a handle to the selected {@code OrderCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError        if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        List\u003cOrder\u003e selectedOrderList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (selectedOrderList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new AssertionError(\"Order list size expected 1.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .map(OrderCardHandle::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedOrderList.get(0)))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        List\u003cOrder\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Navigates the listview to display {@code order}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void navigateToCard(Order order) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        if (!getRootNode().getItems().contains(order)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new IllegalArgumentException(\"Order does not exist.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            getRootNode().scrollTo(order);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Selects the {@code OrderCard} at {@code index} in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns the order card handle of an order associated with the {@code index} in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderCardHandle getOrderCardHandle(int index) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .map(OrderCardHandle::new)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .filter(handle -\u003e handle.equals(getOrder(index)))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private Order getOrder(int index) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Remembers the selected {@code OrderCard} in the list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void rememberSelectedOrderCard() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        List\u003cOrder\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            lastRememberedSelectedOrderCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            lastRememberedSelectedOrderCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns true if the selected {@code OrderCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * {@code rememberSelectedOrderCard()} call."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public boolean isSelectedOrderCardChanged() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        List\u003cOrder\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return lastRememberedSelectedOrderCard.isPresent();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return !lastRememberedSelectedOrderCard.isPresent()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                    || !lastRememberedSelectedOrderCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 40,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.storage.XmlSerializableOrderBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    protected Supplier\u003cReadOnlyOrderBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyOrderBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            createDataFileWithData(new XmlSerializableOrderBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns a defensive copy of the order book data stored inside the storage file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderBook readStorageOrderBook() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return new OrderBook(storage.readOrderBook().get());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new AssertionError(\"Data is not in the OrderBook format.\", dce);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return storage.getOrderBookFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model copy \u003d new ModelManager(model.getOrderBook(), model.getUsersList(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                model.getDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredOrderList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monmanuela": 1,
      "rrtheonlyone": 16,
      "kohchihao": 1,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymenList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.storage.XmlAdaptedFood;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.storage.XmlAdaptedOrder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.storage.XmlSerializableOrderBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.storage.deliveryman.XmlAdaptedDeliveryman;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.storage.deliveryman.XmlSerializableDeliverymenList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.testutil.OrderBookBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validOrderBook.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private static final Path VALID_DELIVERYMEN_LIST_FILE \u003d TEST_DATA_FOLDER.resolve(\"validDeliverymenList.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final Path MISSING_ORDER_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingOrderField.xml\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final Path INVALID_ORDER_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidOrderField.xml\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private static final Path INVALID_DELIVERYMAN_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidDeliverymanField.xml\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final Path VALID_ORDER_FILE \u003d TEST_DATA_FOLDER.resolve(\"validOrder.xml\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private static final Path VALID_DELIVERYMAN_FILE \u003d TEST_DATA_FOLDER.resolve(\"validDeliveryman.xml\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempOrderBook.xml\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private static final String VALID_ID \u003d \"1650dbab-e584-4e7f-87dc-fcac93a2aea9\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final String VALID_STATUS \u003d \"PENDING\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final String VALID_DATE \u003d \"01-10-2018 10:00:00\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private static final List\u003cXmlAdaptedFood\u003e VALID_FOOD \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Collections.singletonList(new XmlAdaptedFood(\"milo\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlUtil.getDataFromFile(null, OrderBook.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, OrderBook.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, OrderBook.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableOrderBook.class).toModelType();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(9, dataFromFile.getOrderList().size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymenList deliverymenDataFromFile \u003d XmlUtil.getDataFromFile(VALID_DELIVERYMEN_LIST_FILE,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juxd"
        },
        "content": "                XmlSerializableDeliverymenList.class).toModelType();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(2, deliverymenDataFromFile.getDeliverymenList().size());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void xmlAdaptedOrderFromFile_fileWithMissingOrderField_validResult() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlAdaptedOrder actualOrder \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                MISSING_ORDER_FIELD_FILE, XmlAdaptedOrderWithRootElement.class);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlAdaptedOrder expectedOrder \u003d new XmlAdaptedOrder("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                VALID_ID, null, VALID_PHONE, VALID_ADDRESS, VALID_DATE, VALID_STATUS, VALID_FOOD);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(expectedOrder, actualOrder);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void xmlAdaptedOrderFromFile_fileWithInvalidOrderField_validResult() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlAdaptedOrder actualOrder \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                INVALID_ORDER_FIELD_FILE, XmlAdaptedOrderWithRootElement.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlAdaptedOrder expectedOrder \u003d new XmlAdaptedOrder("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                VALID_ID, VALID_NAME, INVALID_PHONE, VALID_ADDRESS, VALID_DATE, VALID_STATUS, VALID_FOOD);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(expectedOrder, actualOrder);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juxd"
        },
        "content": "        XmlAdaptedDeliveryman actualDeliveryman \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juxd"
        },
        "content": "            INVALID_DELIVERYMAN_FIELD_FILE, XmlAdaptedDeliverymanWithRootElement.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juxd"
        },
        "content": "        XmlAdaptedDeliveryman expectedDeliveryman \u003d new XmlAdaptedDeliveryman(VALID_NAME);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertNotEquals(expectedDeliveryman, actualDeliveryman);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void xmlAdaptedOrderFromFile_fileWithValidOrder_validResult() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlAdaptedOrder actualOrder \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                VALID_ORDER_FILE, XmlAdaptedOrderWithRootElement.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlAdaptedOrder expectedOrder \u003d new XmlAdaptedOrder("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                VALID_ID, VALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_DATE, VALID_STATUS, VALID_FOOD);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(expectedOrder, actualOrder);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juxd"
        },
        "content": "        XmlAdaptedDeliveryman actualDeliveryman \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juxd"
        },
        "content": "            VALID_DELIVERYMAN_FILE, XmlAdaptedDeliverymanWithRootElement.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "juxd"
        },
        "content": "        XmlAdaptedDeliveryman expectedDeliveryman \u003d new XmlAdaptedDeliveryman(VALID_ID, VALID_NAME);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(expectedDeliveryman, actualDeliveryman);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlUtil.saveDataToFile(null, new OrderBook());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new OrderBook());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlSerializableOrderBook dataToWrite \u003d new XmlSerializableOrderBook(new OrderBook());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlSerializableOrderBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableOrderBook.class);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderBookBuilder builder \u003d new OrderBookBuilder(new OrderBook());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        dataToWrite \u003d new XmlSerializableOrderBook("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                builder.withOrder(new OrderBuilder().build()).build());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableOrderBook.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedOrder}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @XmlRootElement(name \u003d \"order\")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private static class XmlAdaptedOrderWithRootElement extends XmlAdaptedOrder {}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * {@code XmlAdaptedDeliveryman} objects."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @XmlRootElement(name \u003d \"deliveryman\")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private static class XmlAdaptedDeliverymanWithRootElement extends XmlAdaptedDeliveryman {}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 32,
      "rrtheonlyone": 46,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_NAME_IDA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.SignUpCommand.MESSAGE_LOGGED_IN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.SignUpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.OrderCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.testutil.user.UserBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private String signupCommandWord \u003d SignUpCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private String signUpCommand \u003d signupCommandWord + PREFIX_NAME + VALID_MANAGER_NAME_IDA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            + \" \" + PREFIX_USERNAME + VALID_MANAGER_USERNAME_IDA"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_IDA;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public LogicManagerTest() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        signUp();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertHistoryCorrect(invalidCommand, signUpCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String deleteCommand \u003d \"/order delete 9\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertHistoryCorrect(deleteCommand, signUpCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String listCommand \u003d OrderCommand.COMMAND_WORD + \" \" + ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertHistoryCorrect(listCommand, signUpCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        logic.getFilteredOrderList().remove(0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Signup a user to use the commands."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private void signUp() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String signupCommand \u003d SignUpCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String command \u003d signupCommand + PREFIX_NAME + VALID_MANAGER_NAME_IDA"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_USERNAME + VALID_MANAGER_USERNAME_IDA"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_IDA;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User ida \u003d new UserBuilder()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withName(VALID_MANAGER_NAME_IDA)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withUsername(VALID_MANAGER_USERNAME_IDA)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withPassword(VALID_MANAGER_PASSWORD_IDA)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String expectedResultMessage \u003d String.format(SignUpCommand.MESSAGE_SUCCESS, ida)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + MESSAGE_LOGGED_IN;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, model);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getOrderBook(), model.getUsersList(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                model.getDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, model);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                                       String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 4,
      "rrtheonlyone": 7,
      "kohchihao": 43,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymanNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.testutil.EditOrderDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String VALID_NAME_RAJUL \u003d \"Rajul Rahesh\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    public static final String VALID_ADDRESS_ANGMOKIO \u003d \"123 Ang Mo Kio St\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String VALID_DATE_AMY \u003d \"01-10-2018 10:00:00\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String VALID_DATE_BOB \u003d \"02-10-2018 10:00:00\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String VALID_FOOD_BURGER \u003d \"burger\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String VALID_FOOD_RICE \u003d \"fried rice\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String NAME_DESC_RAJUL \u003d \" \" + PREFIX_NAME + VALID_NAME_RAJUL;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String DATE_DESC_AMY \u003d \" \" + PREFIX_DATE + VALID_DATE_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String DATE_DESC_BOB \u003d \" \" + PREFIX_DATE + VALID_DATE_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    public static final String ADDRESS_DESC_ANGMOKIO \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_ANGMOKIO;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String FOOD_DESC_BURGER \u003d \" \" + PREFIX_FOOD + VALID_FOOD_BURGER;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String FOOD_DESC_RICE \u003d \" \" + PREFIX_FOOD + VALID_FOOD_RICE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"09/11/18\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static final String INVALID_FOOD_DESC \u003d \" \" + PREFIX_FOOD + \"milo*\"; // \u0027*\u0027 not allowed in food"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_MANAGER_NAME_ALICE \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_MANAGER_NAME_BENSON \u003d \"Benson Meier\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_MANAGER_NAME_IDA \u003d \"Ida Mueller\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_MANAGER_NAME_HOON \u003d \"Hoon Meier\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_MANAGER_NAME_KENNY \u003d \"Kenny Chan\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_MANAGER_USERNAME_ALICE \u003d \"alicepauline\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_MANAGER_USERNAME_BENSON \u003d \"bensonmeier\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_MANAGER_USERNAME_IDA \u003d \"idamueller\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_MANAGER_USERNAME_HOON \u003d \"hoonmeier\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_MANAGER_USERNAME_KENNY \u003d \"kennychan\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_MANAGER_PASSWORD_ALICE \u003d \"alicepauline01\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_MANAGER_PASSWORD_BENSON \u003d \"bensonmeier02\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_MANAGER_PASSWORD_IDA \u003d \"idamueller05\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_MANAGER_PASSWORD_HOON \u003d \"hoonmeier04\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_MANAGER_PASSWORD_KENNY \u003d \"kennychan06\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String NAME_DESC_ALICE \u003d \" \" + PREFIX_NAME + VALID_MANAGER_NAME_ALICE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String NAME_DESC_BENSON \u003d \" \" + PREFIX_NAME + VALID_MANAGER_NAME_BENSON;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String USERNAME_DESC_ALICE \u003d \" \" + PREFIX_USERNAME + VALID_MANAGER_USERNAME_ALICE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String USERNAME_DESC_BENSON \u003d \" \" + PREFIX_USERNAME + VALID_MANAGER_USERNAME_BENSON;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String PASSWORD_DESC_ALICE \u003d \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String PASSWORD_DESC_BENSON \u003d \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_BENSON;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String INVALID_USERNAME_DESC \u003d \" \" + PREFIX_USERNAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in usernames"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String INVALID_PASSWORD_DESC \u003d \" \" + PREFIX_PASSWORD + \"Jam\u0026\"; // \u0027\u0026\u0027 not allowed in password"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static final EditCommand.EditOrderDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static final EditCommand.EditOrderDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        DESC_AMY \u003d new EditOrderDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withDate(VALID_DATE_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                .withFood(VALID_FOOD_BURGER).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        DESC_BOB \u003d new EditOrderDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withDate(VALID_DATE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                .withFood(VALID_FOOD_RICE, VALID_FOOD_BURGER).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * - the address book and the filtered common list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderBook expectedOrderBook \u003d new OrderBook(actualModel.getOrderBook());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        List\u003cOrder\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredOrderList());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            assertEquals(expectedOrderBook, actualModel.getOrderBook());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredOrderList());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the order at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * {@code model}\u0027s order list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static void showOrderAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredOrderList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order order \u003d model.getFilteredOrderList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        final String[] splitName \u003d order.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.updateFilteredOrderList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(1, model.getFilteredOrderList().size());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the deliveryman at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * {@code model}\u0027s deliverymen list."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static void showDeliverymanAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredDeliverymenList().size());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Deliveryman deliveryman \u003d model.getFilteredDeliverymenList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "juxd"
        },
        "content": "        final String[] splitName \u003d deliveryman.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "juxd"
        },
        "content": "        model.updateFilteredDeliverymenList(new DeliverymanNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(1, model.getFilteredDeliverymenList().size());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Deletes the first common in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order firstOrder \u003d model.getFilteredOrderList().get(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.deleteOrder(firstOrder);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.commitOrderBook();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 11,
      "juxd": 19,
      "monmanuela": 2,
      "rrtheonlyone": 27,
      "kohchihao": 30,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LoginCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.getTypicalDeliverymenList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.getTypicalUsersList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.testutil.user.UserBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class LoginCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOrderBook(), getTypicalUsersList(), getTypicalDeliverymenList(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void constructor_nullUser_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        new LoginCommand(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void execute_userAcceptedByModel_cannotLoginAfterLogin() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User validUser \u003d new UserBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withUsername(VALID_MANAGER_USERNAME_ALICE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withPassword(VALID_MANAGER_PASSWORD_ALICE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        CommandResult commandResult \u003d new LoginCommand(validUser).execute(model, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(String.format(LoginCommand.MESSAGE_SUCCESS, validUser), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User anotherUser \u003d new UserBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withUsername(VALID_MANAGER_USERNAME_BENSON)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withPassword(VALID_MANAGER_PASSWORD_BENSON)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        commandResult \u003d new LoginCommand(anotherUser).execute(model, commandHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String expectedResult \u003d String.format(LoginCommand.MESSAGE_ALREADY_LOGGED_IN, validUser.getUsername())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + LoginCommand.MESSAGE_REDIRECT_TO_LOGOUT;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(expectedResult, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void execute_userAcceptedByModel_loginSuccessful() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User validUser \u003d new UserBuilder()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withUsername(VALID_MANAGER_USERNAME_ALICE)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withPassword(VALID_MANAGER_PASSWORD_ALICE)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        CommandResult commandResult \u003d new LoginCommand(validUser).execute(model, commandHistory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(String.format(LoginCommand.MESSAGE_SUCCESS, validUser), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void execute_userFailedByModel_loginFail() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User validUser \u003d new UserBuilder()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withUsername(VALID_MANAGER_USERNAME_ALICE)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withPassword(VALID_MANAGER_PASSWORD_BENSON)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        CommandResult commandResult \u003d new LoginCommand(validUser).execute(model, commandHistory);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(String.format(LoginCommand.MESSAGE_FAILURE, validUser), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void execute_userNotExist_loginFail() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User validUser \u003d new UserBuilder()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withUsername(INVALID_USERNAME_DESC)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withPassword(VALID_MANAGER_PASSWORD_BENSON)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        CommandResult commandResult \u003d new LoginCommand(validUser).execute(model, commandHistory);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(String.format(LoginCommand.MESSAGE_FAILURE, validUser), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User alice \u003d new UserBuilder()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withUsername(VALID_MANAGER_USERNAME_ALICE)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withPassword(VALID_MANAGER_PASSWORD_ALICE)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User benson \u003d new UserBuilder()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withUsername(VALID_MANAGER_USERNAME_BENSON)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withPassword(VALID_MANAGER_PASSWORD_BENSON)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        LoginCommand loginAliceCommand \u003d new LoginCommand(alice);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        LoginCommand loginBensonCommand \u003d new LoginCommand(benson);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(loginAliceCommand.equals(loginAliceCommand));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        LoginCommand loginAliceCommandCopy \u003d new LoginCommand(alice);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(loginAliceCommand.equals(loginAliceCommandCopy));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(loginAliceCommand.equals(1));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(loginAliceCommand.equals(null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // different common -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(loginAliceCommand.equals(loginBensonCommand));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 1,
      "kohchihao": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LogoutCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.LogoutCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.LogoutCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.getTypicalDeliverymenList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.getTypicalUsersList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.testutil.user.UserBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class LogoutCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOrderBook(), getTypicalUsersList(), getTypicalDeliverymenList(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void execute_noLoggedInUser_logoutFail() throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        CommandResult commandResult \u003d new LogoutCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(MESSAGE_FAILURE, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void execute_haveLoggedInUser_logoutSuccess() throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Login user*/"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User validUser \u003d new UserBuilder()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withUsername(VALID_MANAGER_USERNAME_ALICE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withPassword(VALID_MANAGER_PASSWORD_ALICE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        CommandResult commandResult \u003d new LoginCommand(validUser).execute(model, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(String.format(LoginCommand.MESSAGE_SUCCESS, validUser), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Logout user */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        commandResult \u003d new LogoutCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(MESSAGE_SUCCESS, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.getTypicalDeliverymenList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.getTypicalUsersList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalOrderBook(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            getTypicalUsersList(), getTypicalDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalOrderBook(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            getTypicalUsersList(), getTypicalDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.undoOrderBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.undoOrderBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.undoOrderBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.undoOrderBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.redoOrderBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.redoOrderBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 1,
      "monmanuela": 2,
      "rrtheonlyone": 7,
      "kohchihao": 3,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SignUpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_NAME_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_NAME_BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.LoginCommand.MESSAGE_ALREADY_LOGGED_IN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.LoginCommand.MESSAGE_REDIRECT_TO_LOGOUT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.SignUpCommand.MESSAGE_LOGGED_IN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.SignUpCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.getTypicalDeliverymenList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.BENSON_MANAGER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.HOON_MANAGER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.IDA_MANAGER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.getTypicalUsersList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.testutil.user.UserBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class SignUpCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOrderBook(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            getTypicalUsersList(), getTypicalDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void constructor_nullUser_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        new SignUpCommand(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void execute_userAcceptedByModel_cannotSignupAfterSignup() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User validUser \u003d new UserBuilder(HOON_MANAGER).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        CommandResult commandResult \u003d new SignUpCommand(validUser).execute(model, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_SUCCESS, validUser)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + MESSAGE_LOGGED_IN;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(expectedResult, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User anotherUser \u003d new UserBuilder(IDA_MANAGER).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        commandResult \u003d new SignUpCommand(anotherUser).execute(model, commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        expectedResult \u003d String.format(MESSAGE_ALREADY_LOGGED_IN, validUser.getUsername())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + MESSAGE_REDIRECT_TO_LOGOUT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(expectedResult, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void execute_userAcceptedByModel_signUpSuccessful() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User validUser \u003d new UserBuilder(HOON_MANAGER).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        CommandResult commandResult \u003d new SignUpCommand(validUser).execute(model, commandHistory);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_SUCCESS, validUser)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + MESSAGE_LOGGED_IN;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(expectedResult, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void execute_duplicateUser_signUpFailure() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User duplicateUser \u003d new UserBuilder(BENSON_MANAGER).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expectMessage(SignUpCommand.MESSAGE_DUPLICATE_USER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        CommandResult commandResult \u003d new SignUpCommand(duplicateUser).execute(model, commandHistory);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User alice \u003d new UserBuilder()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withName(VALID_MANAGER_NAME_ALICE)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withUsername(VALID_MANAGER_USERNAME_ALICE)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withPassword(VALID_MANAGER_PASSWORD_ALICE)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User benson \u003d new UserBuilder()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withName(VALID_MANAGER_NAME_BENSON)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withUsername(VALID_MANAGER_USERNAME_BENSON)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withPassword(VALID_MANAGER_PASSWORD_BENSON)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        SignUpCommand signUpAliceCommand \u003d new SignUpCommand(alice);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        SignUpCommand signUpBensonCommand \u003d new SignUpCommand(benson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(signUpAliceCommand.equals(signUpAliceCommand));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        SignUpCommand signUpAliceCommandCopy \u003d new SignUpCommand(alice);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(signUpAliceCommand.equals(signUpAliceCommandCopy));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(signUpAliceCommandCopy.equals(1));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(signUpAliceCommandCopy.equals(null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // different common -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(signUpAliceCommandCopy.equals(signUpBensonCommand));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 1,
      "monmanuela": 1,
      "kohchihao": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.getTypicalDeliverymenList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.getTypicalUsersList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalOrderBook(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            getTypicalUsersList(), getTypicalDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalOrderBook(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            getTypicalUsersList(), getTypicalDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.undoOrderBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.undoOrderBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 1,
      "monmanuela": 2,
      "rrtheonlyone": 3,
      "kohchihao": 3,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliveryman/DeliverymanAddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.ReadOnlyUsersList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymenList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.testutil.DeliverymanBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": " * Contains tests related to the DeliverymanAddCommand class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymanAddCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void constructor_nullDeliveryman_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "        new DeliverymanAddCommand(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void execute_deliverymanAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": "        ModelStubAcceptingDeliverymanAdded modelStub \u003d new ModelStubAcceptingDeliverymanAdded();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Deliveryman validDeliveryman \u003d new DeliverymanBuilder().withName(\"Linus\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "        CommandResult commandResults \u003d new DeliverymanAddCommand(validDeliveryman).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(String.format(DeliverymanAddCommand.MESSAGE_SUCCESS, validDeliveryman),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": "            commandResults.feedbackToUser);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(Arrays.asList(validDeliveryman), modelStub.deliverymenAdded);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void execute_duplicateOrder_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Deliveryman validDeliveryman \u003d new DeliverymanBuilder().withName(\"Matthew\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymanAddCommand deliverymanAddCommand \u003d new DeliverymanAddCommand(validDeliveryman);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juxd"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithDeliveryman(validDeliveryman);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expectMessage(DeliverymanAddCommand.MESSAGE_DUPLICATE_DELIVERYMAN);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": "        deliverymanAddCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Deliveryman matthew \u003d new DeliverymanBuilder().withName(\"Matthew\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Deliveryman linus \u003d new DeliverymanBuilder().withName(\"Linus\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymanAddCommand addMatthewCommand \u003d new DeliverymanAddCommand(matthew);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymanAddCommand addLinusCommand \u003d new DeliverymanAddCommand(linus);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juxd"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(addMatthewCommand.equals(addMatthewCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juxd"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymanAddCommand addMatthewCommandCopy \u003d new DeliverymanAddCommand(matthew);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(addMatthewCommand.equals(addMatthewCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juxd"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertFalse(addMatthewCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juxd"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertFalse(addMatthewCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // different common -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertFalse(addMatthewCommand.equals(addLinusCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void addOrder(Order order) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void addDeliveryman(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void resetData(ReadOnlyOrderBook newData) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void resetDeliverymenData(DeliverymenList newData) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public ReadOnlyOrderBook getOrderBook() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public DeliverymenList getDeliverymenList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\" This message should not be called\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void deleteOrder(Order target) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void updateOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public boolean canUndoOrderBook() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public boolean canRedoOrderBook() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void undoOrderBook() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void redoOrderBook() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void commitOrderBook() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public boolean hasUser(User user) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void addUser(User user) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void commitUsersList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void updateFilteredUsersList(Predicate\u003cUser\u003e predicate) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public ObservableList\u003cUser\u003e getFilteredUsersList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public boolean isRegisteredUser(User user) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public ReadOnlyUsersList getUsersList() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public boolean isUserLoggedIn() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void storeUserInSession(User user) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public User getLoggedInUserDetails() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        public void clearUserInSession() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public boolean hasDeliveryman(Deliveryman person) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void deleteDeliveryman(Deliveryman target) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void updateDeliveryman(Deliveryman target, Deliveryman editedDeliveryman) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public ObservableList\u003cDeliveryman\u003e getFilteredDeliverymenList() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void updateFilteredDeliverymenList(Predicate\u003cDeliveryman\u003e predicate) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public boolean canUndoDeliverymenList() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public boolean canRedoDeliverymenList() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void undoDeliverymenList() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void redoDeliverymenList() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void commitDeliverymenList() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * A Model stub that contains a single order."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private class ModelStubWithDeliveryman extends ModelStub {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "juxd"
        },
        "content": "        private final Deliveryman deliveryman;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "juxd"
        },
        "content": "        ModelStubWithDeliveryman(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "juxd"
        },
        "content": "            requireNonNull(deliveryman);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "juxd"
        },
        "content": "            this.deliveryman \u003d deliveryman;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public boolean hasDeliveryman(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "juxd"
        },
        "content": "            requireNonNull(deliveryman);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return this.deliveryman.isSameDeliveryman(deliveryman);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * A Model stub that always accept the order being added."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private class ModelStubAcceptingDeliverymanAdded extends ModelStub {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "juxd"
        },
        "content": "        final ArrayList\u003cDeliveryman\u003e deliverymenAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public boolean hasDeliveryman(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "juxd"
        },
        "content": "            requireNonNull(deliveryman);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return deliverymenAdded.stream().anyMatch(deliveryman::isSameDeliveryman);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void addDeliveryman(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "juxd"
        },
        "content": "            requireNonNull(deliveryman);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "juxd"
        },
        "content": "            deliverymenAdded.add(deliveryman);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void commitDeliverymenList() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "juxd"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public DeliverymenList getDeliverymenList() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return new DeliverymenList();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 325,
      "kohchihao": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliveryman/DeliverymanDeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showDeliverymanAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.getTypicalDeliverymenList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.getTypicalUsersList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymanDeleteCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOrderBook(), getTypicalUsersList(), getTypicalDeliverymenList(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Deliveryman deliverymanToDelete \u003d model.getFilteredDeliverymenList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymanDeleteCommand deleteCommand \u003d new DeliverymanDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "        String expectedMessage \u003d String.format(DeliverymanDeleteCommand.MESSAGE_DELETE_DELIVERYMAN_SUCCESS,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "                deliverymanToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getOrderBook(), model.getUsersList(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "                model.getDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "        expectedModel.deleteDeliveryman(deliverymanToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": "        expectedModel.commitDeliverymenList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDeliverymenList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymanDeleteCommand deleteCommand \u003d new DeliverymanDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": "                Messages.MESSAGE_INVALID_DELIVERYMAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": "        showDeliverymanAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Deliveryman deliverymanToDelete \u003d model.getFilteredDeliverymenList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymanDeleteCommand deleteCommand \u003d new DeliverymanDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juxd"
        },
        "content": "        String expectedMessage \u003d String.format(DeliverymanDeleteCommand.MESSAGE_DELETE_DELIVERYMAN_SUCCESS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": "                deliverymanToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getOrderBook(), model.getUsersList(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": "                model.getDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juxd"
        },
        "content": "        expectedModel.deleteDeliveryman(deliverymanToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": "        expectedModel.commitDeliverymenList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": "        showNoDeliveryman(expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juxd"
        },
        "content": "        showDeliverymanAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juxd"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getDeliverymenList().getDeliverymenList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymanDeleteCommand deleteCommand \u003d new DeliverymanDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juxd"
        },
        "content": "                Messages.MESSAGE_INVALID_DELIVERYMAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymanDeleteCommand deleteFirstCommand \u003d new DeliverymanDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymanDeleteCommand deleteSecondCommand \u003d new DeliverymanDeleteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juxd"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juxd"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymanDeleteCommand deleteFirstCommandCopy \u003d new DeliverymanDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juxd"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juxd"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // different common -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private void showNoDeliveryman(Model model) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juxd"
        },
        "content": "        model.updateFilteredDeliverymenList(p -\u003e false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(model.getFilteredDeliverymenList().isEmpty());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 112,
      "kohchihao": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliveryman/DeliverymanFindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DELIVERYMEN_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.CHIKAO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.MANIKA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.RAJUL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.getTypicalDeliverymenList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.getTypicalUsersList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymanNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code DeliverymanFindCommandTest}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class DeliverymanFindCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    // TODO: Add deliveryman into Model Manager after merge"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOrderBook(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            getTypicalUsersList(), getTypicalDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalOrderBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            getTypicalUsersList(), getTypicalDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        DeliverymanNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new DeliverymanNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        DeliverymanNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new DeliverymanNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        DeliverymanFindCommand findFirstOrderCommand \u003d new DeliverymanFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        DeliverymanFindCommand findSecondOrderCommand \u003d new DeliverymanFindCommand(secondPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(findFirstOrderCommand.equals(findFirstOrderCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        DeliverymanFindCommand findFirstOrderCommandCopy \u003d new DeliverymanFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(findFirstOrderCommand.equals(findFirstOrderCommandCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(findFirstOrderCommand.equals(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(findFirstOrderCommand.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // different common -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(findFirstOrderCommand.equals(findSecondOrderCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void execute_zeroKeywords_noDeliverymanFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELIVERYMEN_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        DeliverymanNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        DeliverymanFindCommand commandName \u003d new DeliverymanFindCommand(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.updateFilteredDeliverymenList(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(commandName, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredDeliverymenList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void execute_multipleKeywords_multipleDeliverymanFound() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELIVERYMEN_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        DeliverymanNameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Chi Monuela Rajul\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        DeliverymanFindCommand command \u003d new DeliverymanFindCommand(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.updateFilteredDeliverymenList(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertEquals(Arrays.asList(CHIKAO, MANIKA, RAJUL), model.getFilteredDeliverymenList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private DeliverymanNameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return new DeliverymanNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 88,
      "kohchihao": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deliveryman/DeliverymanListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.logic.commands.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showDeliverymanAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.getTypicalDeliverymenList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.getTypicalUsersList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymanListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        model \u003d new ModelManager(getTypicalOrderBook(), getTypicalUsersList(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "            getTypicalDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getOrderBook(), model.getUsersList(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "            model.getDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertCommandSuccess(new DeliverymanListCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "            DeliverymanListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": "        showDeliverymanAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertCommandSuccess(new DeliverymanListCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "            DeliverymanListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 42,
      "kohchihao": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/order/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.getTypicalDeliverymenList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.getTypicalUsersList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        model \u003d new ModelManager(getTypicalOrderBook(), getTypicalUsersList(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                getTypicalDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void execute_newOrder_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order validOrder \u003d new OrderBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getOrderBook(), model.getUsersList(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                model.getDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.addOrder(validOrder);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.commitOrderBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertCommandSuccess(new AddCommand(validOrder), model, commandHistory,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validOrder), expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void execute_duplicateOrder_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order orderInList \u003d model.getOrderBook().getOrderList().get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertCommandFailure(new AddCommand(orderInList), model, commandHistory,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 1,
      "juxd": 1,
      "monmanuela": 2,
      "rrtheonlyone": 13,
      "kohchihao": 3,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/order/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.ReadOnlyUsersList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymenList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void constructor_nullOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void execute_orderAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        ModelStubAcceptingOrderAdded modelStub \u003d new ModelStubAcceptingOrderAdded();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order validOrder \u003d new OrderBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validOrder).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validOrder), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(Arrays.asList(validOrder), modelStub.ordersAdded);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void execute_duplicateOrder_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order validOrder \u003d new OrderBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validOrder);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithOrder(validOrder);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order alice \u003d new OrderBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order bob \u003d new OrderBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // different common -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public void addOrder(Order order) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void addDeliveryman(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public void resetData(ReadOnlyOrderBook newData) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void resetDeliverymenData(DeliverymenList newData) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public ReadOnlyOrderBook getOrderBook() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public DeliverymenList getDeliverymenList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\" This message should not be called\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public void deleteOrder(Order target) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public void updateOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public boolean canUndoOrderBook() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public boolean canRedoOrderBook() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public void undoOrderBook() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public void redoOrderBook() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public void commitOrderBook() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        public boolean hasUser(User user) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        public void addUser(User user) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        public void commitUsersList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        public void updateFilteredUsersList(Predicate\u003cUser\u003e predicate) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        public ObservableList\u003cUser\u003e getFilteredUsersList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        public boolean isRegisteredUser(User user) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        public ReadOnlyUsersList getUsersList() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        public boolean isUserLoggedIn() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        public void storeUserInSession(User user) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        public User getLoggedInUserDetails() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        public void clearUserInSession() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public boolean hasDeliveryman(Deliveryman person) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void deleteDeliveryman(Deliveryman target) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void updateDeliveryman(Deliveryman target, Deliveryman editedDeliveryman) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public ObservableList\u003cDeliveryman\u003e getFilteredDeliverymenList() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void updateFilteredDeliverymenList(Predicate\u003cDeliveryman\u003e predicate) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public boolean canUndoDeliverymenList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public boolean canRedoDeliverymenList() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void undoDeliverymenList() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void redoDeliverymenList() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void commitDeliverymenList() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * A Model stub that contains a single order."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private class ModelStubWithOrder extends ModelStub {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        private final Order order;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        ModelStubWithOrder(Order order) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            requireNonNull(order);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            this.order \u003d order;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            requireNonNull(order);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return this.order.isSameOrder(order);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * A Model stub that always accept the order being added."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private class ModelStubAcceptingOrderAdded extends ModelStub {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        final ArrayList\u003cOrder\u003e ordersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public boolean hasOrder(Order person) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return ordersAdded.stream().anyMatch(person::isSameOrder);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public void addOrder(Order order) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            requireNonNull(order);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            ordersAdded.add(order);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public void commitOrderBook() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public ReadOnlyOrderBook getOrderBook() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return new OrderBook();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 2,
      "juxd": 65,
      "monmanuela": 1,
      "rrtheonlyone": 51,
      "kohchihao": 60,
      "-": 151
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/order/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.getTypicalDeliverymenList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.getTypicalUsersList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void execute_emptyOrderBook_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.commitOrderBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void execute_nonEmptyOrderBook_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalOrderBook(), getTypicalUsersList(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                getTypicalDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalOrderBook(), getTypicalUsersList(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "                getTypicalDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.resetData(new OrderBook());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.commitOrderBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 1,
      "juxd": 2,
      "monmanuela": 1,
      "rrtheonlyone": 7,
      "kohchihao": 3,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/order/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showOrderAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.getTypicalDeliverymenList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.getTypicalUsersList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOrderBook(), getTypicalUsersList(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            getTypicalDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Order orderToDelete \u003d model.getFilteredOrderList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ORDER_SUCCESS, orderToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getOrderBook(), model.getUsersList(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "                model.getDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.deleteOrder(orderToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.commitOrderBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": "        showOrderAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Order orderToDelete \u003d model.getFilteredOrderList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ORDER_SUCCESS, orderToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getOrderBook(), model.getUsersList(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                model.getDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.deleteOrder(orderToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.commitOrderBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        showNoOrder(expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juxd"
        },
        "content": "        showOrderAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getOrderBook().getOrderList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Order orderToDelete \u003d model.getFilteredOrderList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getOrderBook(), model.getUsersList(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                model.getDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.deleteOrder(orderToDelete);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.commitOrderBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // delete -\u003e first common deleted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered common list to show all persons"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.undoOrderBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // redo -\u003e same first common deleted again"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.redoOrderBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * 1. Deletes a {@code Order} from a filtered list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted common in the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the order object regardless of indexing."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameOrderDeleted() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getOrderBook(), model.getUsersList(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                model.getDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juxd"
        },
        "content": "        showOrderAtIndex(model, INDEX_SECOND);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Order orderToDelete \u003d model.getFilteredOrderList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.deleteOrder(orderToDelete);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.commitOrderBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // delete -\u003e deletes second common in unfiltered common list / first common in filtered common list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered common list to show all persons"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.undoOrderBook();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertNotEquals(orderToDelete, model.getFilteredOrderList().get(INDEX_FIRST.getZeroBased()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // redo -\u003e deletes same second common in unfiltered common list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.redoOrderBook();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // different common -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private void showNoOrder(Model model) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.updateFilteredOrderList(p -\u003e false);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(model.getFilteredOrderList().isEmpty());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 3,
      "juxd": 20,
      "monmanuela": 4,
      "rrtheonlyone": 30,
      "kohchihao": 14,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/order/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FOOD_BURGER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showOrderAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.getTypicalDeliverymenList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.getTypicalUsersList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.EditCommand.EditOrderDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.testutil.EditOrderDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOrderBook(), getTypicalUsersList(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            getTypicalDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Order editedOrder \u003d new OrderBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder(editedOrder).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ORDER_SUCCESS, editedOrder);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getOrderBook(), model.getUsersList(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                model.getDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.updateOrder(model.getFilteredOrderList().get(0), editedOrder);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.commitOrderBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Index indexLastOrder \u003d Index.fromOneBased(model.getFilteredOrderList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Order lastOrder \u003d model.getFilteredOrderList().get(indexLastOrder.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        OrderBuilder orderInList \u003d new OrderBuilder(lastOrder);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Order editedOrder \u003d orderInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                .withFood(VALID_FOOD_BURGER).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withFood(VALID_FOOD_BURGER).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastOrder, descriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ORDER_SUCCESS, editedOrder);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getOrderBook(), model.getUsersList(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                model.getDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.updateOrder(lastOrder, editedOrder);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.commitOrderBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, new EditOrderDescriptor());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Order editedOrder \u003d model.getFilteredOrderList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ORDER_SUCCESS, editedOrder);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getOrderBook(), model.getUsersList(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                model.getDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.commitOrderBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        showOrderAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Order orderInFilteredList \u003d model.getFilteredOrderList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Order editedOrder \u003d new OrderBuilder(orderInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new EditOrderDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ORDER_SUCCESS, editedOrder);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getOrderBook(), model.getUsersList(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                model.getDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.updateOrder(model.getFilteredOrderList().get(0), editedOrder);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.commitOrderBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void execute_duplicateOrderUnfilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Order firstOrder \u003d model.getFilteredOrderList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder(firstOrder).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void execute_duplicateOrderFilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        showOrderAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // edit order in filtered list into a duplicate in order book"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Order orderInList \u003d model.getOrderBook().getOrderList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new EditOrderDescriptorBuilder(orderInList).build());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void execute_invalidOrderIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void execute_invalidOrderIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        showOrderAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of order book list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getOrderBook().getOrderList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new EditOrderDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Order editedOrder \u003d new OrderBuilder().build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Order orderToEdit \u003d model.getFilteredOrderList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder(editedOrder).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getOrderBook(), model.getUsersList(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                model.getDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.updateOrder(orderToEdit, editedOrder);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.commitOrderBook();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // edit -\u003e first order edited"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // undo -\u003e reverts orderbook back to previous state and filtered order list to show all orders"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.undoOrderBook();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // redo -\u003e same first order edited again"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.redoOrderBook();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // execution failed -\u003e order book state not added into model"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // single order book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameOrderEdited() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Order editedOrder \u003d new OrderBuilder().build();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder(editedOrder).build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getOrderBook(), model.getUsersList(),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                model.getDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        showOrderAtIndex(model, INDEX_SECOND);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Order orderToEdit \u003d model.getFilteredOrderList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.updateOrder(orderToEdit, editedOrder);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.commitOrderBook();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // edit -\u003e edits second order in unfiltered order list / first order in filtered order list"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // undo -\u003e reverts orderbook back to previous state and filtered order list to show all orders"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.undoOrderBook();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertNotEquals(model.getFilteredOrderList().get(INDEX_FIRST.getZeroBased()), orderToEdit);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // redo -\u003e edits same second order in unfiltered order list"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.redoOrderBook();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST, DESC_AMY);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditOrderDescriptor copyDescriptor \u003d new EditOrderDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND, DESC_AMY)));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST, DESC_BOB)));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "juxd"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "juxd"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "juxd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "juxd"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "juxd"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "juxd"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "juxd"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 242,
      "juxd": 23,
      "kohchihao": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/order/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ORDERS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.getTypicalDeliverymenList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.getTypicalUsersList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.order.OrderContainsAnyKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.order.OrderNameContainsKeywordPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.order.OrderPhoneContainsKeywordPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code OrderFindCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOrderBook(), getTypicalUsersList(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            getTypicalDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalOrderBook(), getTypicalUsersList(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            getTypicalDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        OrderContainsAnyKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new OrderNameContainsKeywordPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        OrderContainsAnyKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new OrderNameContainsKeywordPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        FindCommand findFirstOrderCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        FindCommand findSecondOrderCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(findFirstOrderCommand.equals(findFirstOrderCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        FindCommand findFirstOrderCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(findFirstOrderCommand.equals(findFirstOrderCommandCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(findFirstOrderCommand.equals(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(findFirstOrderCommand.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // different common -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(findFirstOrderCommand.equals(findSecondOrderCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void execute_zeroKeywords_noOrderFound() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ORDERS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        OrderContainsAnyKeywordsPredicate namePredicate \u003d prepareNamePredicate(\" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        FindCommand commandName \u003d new FindCommand(namePredicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.updateFilteredOrderList(namePredicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(commandName, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredOrderList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        OrderContainsAnyKeywordsPredicate phonePredicate \u003d preparePhonePredicate(\" \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        FindCommand commandPhone \u003d new FindCommand(phonePredicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.updateFilteredOrderList(phonePredicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(commandPhone, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredOrderList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void execute_multipleKeywords_multipleOrdersFound() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ORDERS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        OrderContainsAnyKeywordsPredicate predicate \u003d prepareNamePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.updateFilteredOrderList(predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredOrderList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void execute_fullNameKeyword_singleOrderFound() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ORDERS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        OrderContainsAnyKeywordsPredicate predicate \u003d prepareNamePredicate(\"Carl Kurz\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.updateFilteredOrderList(predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertEquals(Arrays.asList(CARL), model.getFilteredOrderList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void execute_phoneKeyword_singleOrderFound() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ORDERS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        OrderContainsAnyKeywordsPredicate predicate \u003d preparePhonePredicate(\" 8765 2533 \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.updateFilteredOrderList(predicate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Parses {@code userInput} into a {@code OrderContainsAnyKeywordsPredicate}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private OrderContainsAnyKeywordsPredicate prepareNamePredicate(String userInput) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return new OrderNameContainsKeywordPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Parses {@code userInput} into a {@code OrderContainsAnyKeywordsPredicate}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private OrderContainsAnyKeywordsPredicate preparePhonePredicate(String userInput) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return new OrderPhoneContainsKeywordPredicate(userInput.trim().replaceAll(\"\\\\s+\", \"\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 122,
      "monmanuela": 1,
      "kohchihao": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/order/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showOrderAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.getTypicalDeliverymenList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.getTypicalUsersList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        model \u003d new ModelManager(getTypicalOrderBook(), getTypicalUsersList(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                getTypicalDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getOrderBook(), model.getUsersList(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                model.getDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "        showOrderAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 1,
      "juxd": 3,
      "monmanuela": 2,
      "rrtheonlyone": 2,
      "kohchihao": 3,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/order/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.commands.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showOrderAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.getTypicalDeliverymenList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.getTypicalUsersList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalOrderBook(), getTypicalUsersList(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "            getTypicalDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalOrderBook(), getTypicalUsersList(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "            getTypicalDeliverymenList(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredOrderList().size() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juxd"
        },
        "content": "        showOrderAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juxd"
        },
        "content": "        showOrderAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": "        showOrderAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": "        showOrderAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of order book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getOrderBook().getOrderList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juxd"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juxd"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juxd"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // different common -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_ORDER_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 1,
      "juxd": 16,
      "monmanuela": 1,
      "rrtheonlyone": 9,
      "kohchihao": 4,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/LoginCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.USERNAME_DESC_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.USERNAME_DESC_BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.testutil.user.UserBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class LoginCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private LoginCommandParser parser \u003d new LoginCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User expectedUser \u003d new UserBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withUsername(VALID_MANAGER_USERNAME_ALICE)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withPassword(VALID_MANAGER_PASSWORD_ALICE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + USERNAME_DESC_ALICE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + PASSWORD_DESC_ALICE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                new LoginCommand(expectedUser));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // multiple usernames - last username accepted"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertParseSuccess(parser, USERNAME_DESC_BENSON"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + USERNAME_DESC_ALICE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + PASSWORD_DESC_ALICE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                new LoginCommand(expectedUser));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // multiple password - last password accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertParseSuccess(parser, USERNAME_DESC_ALICE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + PASSWORD_DESC_BENSON"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + PASSWORD_DESC_ALICE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                new LoginCommand(expectedUser));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // missing username prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertParseFailure(parser, VALID_MANAGER_USERNAME_ALICE + PASSWORD_DESC_ALICE, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // missing password prefix"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertParseFailure(parser, USERNAME_DESC_ALICE + VALID_MANAGER_PASSWORD_ALICE, expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/OrderBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DELIVERYMAN_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ORDER_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.deliveryman.DeliverymanCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.OrderCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderBookParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final OrderBookParser parser \u003d new OrderBookParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void parseCommand_order() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_ORDER_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        parser.parseCommand(OrderCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void parseCommand_deliveryman() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_DELIVERYMAN_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juxd"
        },
        "content": "        parser.parseCommand(DeliverymanCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        assertTrue(parser.parseCommand(\"/redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        assertTrue(parser.parseCommand(\"/undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 6,
      "juxd": 9,
      "monmanuela": 2,
      "rrtheonlyone": 3,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 3,
      "kohchihao": 3,
      "-": 177
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SignUpCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PASSWORD_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.USERNAME_DESC_ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.USERNAME_DESC_BENSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_NAME_ALICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_ALICE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.ALICE_MANAGER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.SignUpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Password;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Username;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.testutil.user.UserBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class SignUpCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private SignUpCommandParser parser \u003d new SignUpCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User expectedUser \u003d new UserBuilder(ALICE_MANAGER).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + NAME_DESC_ALICE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + USERNAME_DESC_ALICE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + PASSWORD_DESC_ALICE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                new SignUpCommand(expectedUser));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BENSON"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + NAME_DESC_ALICE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + USERNAME_DESC_ALICE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + PASSWORD_DESC_ALICE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                new SignUpCommand(expectedUser));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // multiple usernames - last username accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_ALICE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + USERNAME_DESC_BENSON"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + USERNAME_DESC_ALICE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + PASSWORD_DESC_ALICE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                new SignUpCommand(expectedUser));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // multiple password - last password accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_ALICE"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + USERNAME_DESC_ALICE"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + PASSWORD_DESC_BENSON"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + PASSWORD_DESC_ALICE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                new SignUpCommand(expectedUser));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SignUpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertParseFailure(parser, VALID_MANAGER_NAME_ALICE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + USERNAME_DESC_ALICE"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + PASSWORD_DESC_ALICE,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // missing username prefix"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_ALICE"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + VALID_MANAGER_USERNAME_ALICE"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + PASSWORD_DESC_ALICE,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // missing password prefix"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_ALICE"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + USERNAME_DESC_ALICE"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + VALID_MANAGER_PASSWORD_ALICE,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + USERNAME_DESC_ALICE"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + PASSWORD_DESC_ALICE,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // invalid username"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_ALICE"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + INVALID_USERNAME_DESC"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + PASSWORD_DESC_ALICE,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                Username.MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // invalid password"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_ALICE"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + USERNAME_DESC_ALICE"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + INVALID_PASSWORD_DESC,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + NAME_DESC_BENSON"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + USERNAME_DESC_BENSON"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                        + PASSWORD_DESC_BENSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SignUpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kohchihao": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deliveryman/DeliverymanAddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.logic.parser.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_RAJUL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_RAJUL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.RAJUL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.deliveryman.DeliverymanAddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.testutil.DeliverymanBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymanAddCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private DeliverymanAddCommandParser parser \u003d new DeliverymanAddCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Deliveryman expectedDeliveryman \u003d new DeliverymanBuilder(RAJUL).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_RAJUL,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "                new DeliverymanAddCommand(expectedDeliveryman));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_RAJUL,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "                new DeliverymanAddCommand(expectedDeliveryman));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeliverymanAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "        //missing name prefic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_RAJUL, expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 43,
      "kohchihao": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deliveryman/DeliverymanCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.logic.parser.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DELIVERYMAN_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.deliveryman.DeliverymanAddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.deliveryman.DeliverymanDeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.deliveryman.DeliverymanFindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.deliveryman.DeliverymanListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymanNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.testutil.DeliverymanBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.testutil.DeliverymanUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymanCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private final DeliverymanCommandParser parser \u003d new DeliverymanCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void parse_add() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Deliveryman deliveryman \u003d new DeliverymanBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymanAddCommand command \u003d (DeliverymanAddCommand)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "            parser.parse(DeliverymanUtil.getDeliverymanAddCommand(deliveryman));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(new DeliverymanAddCommand(deliveryman), command);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void parse_delete() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymanDeleteCommand command \u003d (DeliverymanDeleteCommand) parser.parse("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "                DeliverymanDeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(new DeliverymanDeleteCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void parse_list() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(parser.parse(DeliverymanListCommand.COMMAND_WORD) instanceof DeliverymanListCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(parser.parse(DeliverymanListCommand.COMMAND_WORD + \" 3\") instanceof DeliverymanListCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void parse_find() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String keyword \u003d \"foo\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        DeliverymanFindCommand command \u003d (DeliverymanFindCommand) parser.parse("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                DeliverymanFindCommand.COMMAND_WORD + \" n/\" + keyword);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertEquals(new DeliverymanFindCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new DeliverymanNameContainsKeywordsPredicate(Arrays.asList(keyword))), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void parse_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_DELIVERYMAN_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": "        parser.parse(\"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": "        parser.parse(\"3\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void parse_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juxd"
        },
        "content": "        parser.parse(\"unknownCommand\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 15,
      "juxd": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deliveryman/DeliverymanDeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.logic.parser.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.deliveryman.DeliverymanDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymanDeleteCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private DeliverymanDeleteCommandParser parser \u003d new DeliverymanDeleteCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeliverymanDeleteCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "                DeliverymanDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deliveryman/DeliverymanFindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.parser.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.deliveryman.DeliverymanFindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymanNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class DeliverymanFindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private DeliverymanFindCommandParser parser \u003d new DeliverymanFindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeliverymanFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertParseFailure(parser, \"find \","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeliverymanFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        DeliverymanFindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new DeliverymanFindCommand(new DeliverymanNameContainsKeywordsPredicate(Arrays.asList(\"Alex\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertParseSuccess(parser, \" n/Alex\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/order/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FOOD_DESC_BURGER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FOOD_DESC_RICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FOOD_BURGER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FOOD_RICE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.AddCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order expectedOrder \u003d new OrderBuilder(BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                + ADDRESS_DESC_BOB + DATE_DESC_BOB + FOOD_DESC_RICE, new AddCommand(expectedOrder));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                + ADDRESS_DESC_BOB + DATE_DESC_BOB + FOOD_DESC_RICE, new AddCommand(expectedOrder));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                + ADDRESS_DESC_BOB + DATE_DESC_BOB + FOOD_DESC_RICE, new AddCommand(expectedOrder));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                + ADDRESS_DESC_BOB + DATE_DESC_BOB + FOOD_DESC_RICE, new AddCommand(expectedOrder));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // multiple date - last date accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                + DATE_DESC_AMY + DATE_DESC_BOB + FOOD_DESC_RICE, new AddCommand(expectedOrder));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // multiple food - all accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order expectedOrderMultipleFood \u003d new OrderBuilder(BOB).withFood(VALID_FOOD_BURGER, VALID_FOOD_RICE)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                + FOOD_DESC_BURGER + FOOD_DESC_RICE, new AddCommand(expectedOrderMultipleFood));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        + FOOD_DESC_BURGER,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + ADDRESS_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        + FOOD_DESC_BURGER,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_ADDRESS_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        + FOOD_DESC_BURGER,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // missing food prefix"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        + VALID_FOOD_BURGER,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB + VALID_DATE_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        + FOOD_DESC_BURGER,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_ADDRESS_BOB + VALID_DATE_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        + VALID_FOOD_BURGER,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + ADDRESS_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                + FOOD_DESC_BURGER + FOOD_DESC_RICE, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                + FOOD_DESC_BURGER + FOOD_DESC_RICE, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_ADDRESS_DESC + DATE_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                + FOOD_DESC_BURGER + FOOD_DESC_RICE, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + INVALID_ADDRESS_DESC + DATE_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        + FOOD_DESC_BURGER,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                        + ADDRESS_DESC_BOB + FOOD_DESC_RICE + FOOD_DESC_BURGER,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 2,
      "rrtheonlyone": 52,
      "kohchihao": 4,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/order/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 2,
      "juxd": 2,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/order/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FOOD_DESC_BURGER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FOOD_DESC_RICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FOOD_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FOOD_BURGER;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FOOD_RICE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.EditCommand.EditOrderDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.Food;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.OrderDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.testutil.EditOrderDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private static final String FOOD_EMPTY \u003d \" \" + PREFIX_FOOD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, OrderDate.MESSAGE_DATE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_FOOD_DESC, Food.MESSAGE_FOOD_CONSTRAINTS); // invalid food"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // invalid phone followed by valid date"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + DATE_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // empty food provided"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertParseFailure(parser, \"1\" + FOOD_EMPTY, Food.MESSAGE_FOOD_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // parsing empty food with valid food"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertParseFailure(parser, \"1\" + FOOD_EMPTY + FOOD_DESC_RICE, Food.MESSAGE_FOOD_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertParseFailure(parser, \"1\" + FOOD_DESC_RICE + FOOD_EMPTY, Food.MESSAGE_FOOD_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertParseFailure(parser, \"1\" + FOOD_DESC_BURGER + FOOD_EMPTY + FOOD_DESC_RICE, Food.MESSAGE_FOOD_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_DATE_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + FOOD_DESC_RICE"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                + DATE_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + FOOD_DESC_BURGER;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withDate(VALID_DATE_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                .withFood(VALID_FOOD_RICE, VALID_FOOD_BURGER).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditCommand expectedCommnand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommnand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + DATE_DESC_AMY;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                .withDate(VALID_DATE_AMY).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor \u003d new EditOrderDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor \u003d new EditOrderDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_AMY;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor \u003d new EditOrderDescriptorBuilder().withDate(VALID_DATE_AMY).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // food"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + FOOD_DESC_BURGER;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor \u003d new EditOrderDescriptorBuilder().withFood(VALID_FOOD_BURGER).build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + DATE_DESC_AMY"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                + FOOD_DESC_BURGER + PHONE_DESC_BOB + ADDRESS_DESC_BOB + DATE_DESC_BOB + FOOD_DESC_RICE;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                .withDate(VALID_DATE_BOB).withAddress(VALID_ADDRESS_BOB).withFood(VALID_FOOD_BURGER, VALID_FOOD_RICE)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // one type"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor \u003d new EditOrderDescriptorBuilder().withDate(VALID_DATE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 71,
      "kohchihao": 5,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/order/EditOrderDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FOOD_RICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.EditCommand.EditOrderDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.testutil.EditOrderDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class EditOrderDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditOrderDescriptor descriptorWithSameValues \u003d new EditOrderDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditOrderDescriptor editedAmy \u003d new EditOrderDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        editedAmy \u003d new EditOrderDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        editedAmy \u003d new EditOrderDescriptorBuilder(DESC_AMY).withDate(VALID_DATE_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        editedAmy \u003d new EditOrderDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        editedAmy \u003d new EditOrderDescriptorBuilder(DESC_AMY).withFood(VALID_FOOD_RICE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 13,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/order/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ORDER_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.order.OrderNameContainsKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.order.OrderPhoneContainsKeywordPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                String.format(MESSAGE_INVALID_ORDER_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertParseFailure(parser, \"find \","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                String.format(MESSAGE_INVALID_ORDER_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        FindCommand expectedNameFindCommand \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new FindCommand(new OrderNameContainsKeywordPredicate(Arrays.asList(\"Alex\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertParseSuccess(parser, \" n/Alex\", expectedNameFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        FindCommand expectedPhoneFindCommand \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new FindCommand(new OrderPhoneContainsKeywordPredicate(\"81223455\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertParseSuccess(parser, \" p/81223455\", expectedPhoneFindCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Supplying both name and phone"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertParseFailure(parser, \" n/testname p/12345\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                String.format(MESSAGE_INVALID_ORDER_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/order/OrderCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ORDER_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.EditCommand.EditOrderDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.SelectCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.order.OrderNameContainsKeywordPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.testutil.EditOrderDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.testutil.OrderUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class OrderCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private final OrderCommandParser parser \u003d new OrderCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void parse_add() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Order order \u003d new OrderBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parse(OrderUtil.getAddCommand(order));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertEquals(new AddCommand(order), command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void parse_clear() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(parser.parse(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(parser.parse(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void parse_delete() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parse("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void parse_list() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(parser.parse(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(parser.parse(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void parse_select() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parse("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juxd"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void parse_find() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parse("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                FindCommand.COMMAND_WORD + \" n/\" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertEquals(new FindCommand(new OrderNameContainsKeywordPredicate(keywords)), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void parse_edit() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Order order \u003d new OrderBuilder().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditOrderDescriptor descriptor \u003d new EditOrderDescriptorBuilder(order).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parse(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \" + OrderUtil.getEditOrderDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void parse_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_ORDER_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        parser.parse(\"\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        parser.parse(\"3\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void parse_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        parser.parse(\"unknownCommand\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 99,
      "juxd": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/order/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.logic.parser.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 2,
      "juxd": 2,
      "rrtheonlyone": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDERS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.CHIKAO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.RAJUL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.ALICE_MANAGER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.CARL_MANAGER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymenList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.testutil.DeliverymenListBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.testutil.OrderBookBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.testutil.user.UserBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.testutil.user.UsersListBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void hasOrder_nullOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        modelManager.hasOrder(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void hasOrder_orderNotInOrderBook_returnsFalse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(modelManager.hasOrder(ALICE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void hasOrder_orderInOrderBook_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        modelManager.addOrder(ALICE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(modelManager.hasOrder(ALICE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void getFilteredOrderList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        modelManager.getFilteredOrderList().remove(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void isUserLoggedIn_isLoggedIn_returnsTrue() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User alice \u003d new UserBuilder(ALICE_MANAGER).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        modelManager.storeUserInSession(alice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(modelManager.isUserLoggedIn());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void isUserLoggedIn_isNotLoggedIn_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(modelManager.isUserLoggedIn());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void getLoggedInUserDetails_isLoggedIn_returnsNotNull() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User alice \u003d new UserBuilder(ALICE_MANAGER).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        modelManager.storeUserInSession(alice);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertNotNull(modelManager.getLoggedInUserDetails());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void getLoggedInUserDetails_isNotLoggedIn_returnsNull() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertNull(modelManager.getLoggedInUserDetails());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderBook orderBook \u003d new OrderBookBuilder().withOrder(ALICE).withOrder(BENSON).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderBook differentOrderBook \u003d new OrderBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymenList deliverymenList \u003d new DeliverymenListBuilder().withDeliveryman(RAJUL).withDeliveryman(CHIKAO)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juxd"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymenList differentDeliverymenList \u003d new DeliverymenList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        UsersList usersList \u003d new UsersListBuilder().withUser(ALICE_MANAGER).withUser(CARL_MANAGER).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        UsersList differentUsersList \u003d new UsersList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        modelManager \u003d new ModelManager(orderBook, usersList, deliverymenList, userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(orderBook, usersList, deliverymenList, userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juxd"
        },
        "content": "        // different OrderBook -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentOrderBook, differentUsersList,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juxd"
        },
        "content": "                differentDeliverymenList, userPrefs)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentOrderBook, usersList,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                deliverymenList, userPrefs)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        modelManager.updateFilteredOrderList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(orderBook, usersList, deliverymenList, userPrefs)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        modelManager.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(orderBook, usersList,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                deliverymenList, differentUserPrefs)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 9,
      "monmanuela": 2,
      "rrtheonlyone": 18,
      "kohchihao": 40,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/OrderBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FOOD_BURGER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final OrderBook orderBook \u003d new OrderBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(Collections.emptyList(), orderBook.getOrderList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderBook.resetData(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void resetData_withValidReadOnlyOrderBook_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderBook newData \u003d getTypicalOrderBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderBook.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(newData, orderBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order editedAlice \u003d new OrderBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withFood(VALID_FOOD_BURGER)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        List\u003cOrder\u003e newOrders \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderBookStub newData \u003d new OrderBookStub(newOrders);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(DuplicateOrderException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderBook.resetData(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void hasOrder_nullOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderBook.hasOrder(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void hasOrder_orderNotInOrderBook_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(orderBook.hasOrder(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void hasOrder_orderInOrderBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderBook.addOrder(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(orderBook.hasOrder(ALICE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void hasOrder_orderWithSameIdentityFieldsInOrderBook_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderBook.addOrder(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order editedAlice \u003d new OrderBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withFood(VALID_FOOD_BURGER)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(orderBook.hasOrder(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void getOrderList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderBook.getOrderList().remove(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * A stub ReadOnlyOrderBook whose orders list can violate interface constraints."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static class OrderBookStub implements ReadOnlyOrderBook {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        private final ObservableList\u003cOrder\u003e orders \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderBookStub(Collection\u003cOrder\u003e order) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            this.orders.setAll(order);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public ObservableList\u003cOrder\u003e getOrderList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return orders;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UsersListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.ALICE_MANAGER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.getTypicalUsersList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.testutil.user.UserBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class UsersListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final UsersList usersList \u003d new UsersList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(Collections.emptyList(), usersList.getUserList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        usersList.resetData(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void resetData_withValidReadOnlyUsersList_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        UsersList newData \u003d getTypicalUsersList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        newData.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(newData, usersList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void resetData_withDuplicateUsers_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User editedAlice \u003d new UserBuilder(ALICE_MANAGER).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        List\u003cUser\u003e newUsers \u003d Arrays.asList(ALICE_MANAGER, editedAlice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        UsersListStub newData \u003d new UsersListStub(newUsers);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        usersList.resetData(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void hasUser_nullUser_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        usersList.hasUser(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void hasUser_userNotInUsersList_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(usersList.hasUser(ALICE_MANAGER));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void hasUser_userInUsersList_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        usersList.addUser(ALICE_MANAGER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(usersList.hasUser(ALICE_MANAGER));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void getUserList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        usersList.getUserList().remove(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * A stub ReadOnlyUsersList whose users list can violate interface constraints."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private static class UsersListStub implements ReadOnlyUsersList {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        private final ObservableList\u003cUser\u003e users \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        UsersListStub(Collection\u003cUser\u003e users) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            this.users.setAll(users);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        public ObservableList\u003cUser\u003e getUserList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            return users;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedOrderBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.testutil.OrderBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class VersionedOrderBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final ReadOnlyOrderBook orderBookWithAlice \u003d new OrderBookBuilder().withOrder(ALICE).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final ReadOnlyOrderBook orderBookWithBob \u003d new OrderBookBuilder().withOrder(BENSON).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final ReadOnlyOrderBook orderBookWithCarl \u003d new OrderBookBuilder().withOrder(CARL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final ReadOnlyOrderBook emptyOrderBook \u003d new OrderBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void commit_singleOrderBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList(emptyOrderBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        versionedOrderBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertOrderBookListStatus(versionedOrderBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                Collections.singletonList(emptyOrderBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                emptyOrderBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void commit_multipleOrderBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                emptyOrderBook, orderBookWithAlice, orderBookWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        versionedOrderBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertOrderBookListStatus(versionedOrderBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                Arrays.asList(emptyOrderBook, orderBookWithAlice, orderBookWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                orderBookWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void commit_multipleOrderBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                emptyOrderBook, orderBookWithAlice, orderBookWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedOrderBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        versionedOrderBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertOrderBookListStatus(versionedOrderBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                Collections.singletonList(emptyOrderBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                emptyOrderBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void canUndo_multipleOrderBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                emptyOrderBook, orderBookWithAlice, orderBookWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(versionedOrderBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void canUndo_multipleOrderBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                emptyOrderBook, orderBookWithAlice, orderBookWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedOrderBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(versionedOrderBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void canUndo_singleOrderBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList(emptyOrderBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(versionedOrderBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void canUndo_multipleOrderBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                emptyOrderBook, orderBookWithAlice, orderBookWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedOrderBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(versionedOrderBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void canRedo_multipleOrderBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                emptyOrderBook, orderBookWithAlice, orderBookWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedOrderBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(versionedOrderBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void canRedo_multipleOrderBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                emptyOrderBook, orderBookWithAlice, orderBookWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedOrderBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(versionedOrderBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void canRedo_singleOrderBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList(emptyOrderBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(versionedOrderBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void canRedo_multipleOrderBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                emptyOrderBook, orderBookWithAlice, orderBookWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(versionedOrderBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void undo_multipleOrderBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                emptyOrderBook, orderBookWithAlice, orderBookWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        versionedOrderBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertOrderBookListStatus(versionedOrderBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                Collections.singletonList(emptyOrderBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                orderBookWithAlice,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                Collections.singletonList(orderBookWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void undo_multipleOrderBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                emptyOrderBook, orderBookWithAlice, orderBookWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedOrderBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        versionedOrderBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertOrderBookListStatus(versionedOrderBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                emptyOrderBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                Arrays.asList(orderBookWithAlice, orderBookWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void undo_singleOrderBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList(emptyOrderBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertThrows(VersionedOrderBook.NoUndoableStateException.class, versionedOrderBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void undo_multipleOrderBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                emptyOrderBook, orderBookWithAlice, orderBookWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedOrderBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertThrows(VersionedOrderBook.NoUndoableStateException.class, versionedOrderBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void redo_multipleOrderBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                emptyOrderBook, orderBookWithAlice, orderBookWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedOrderBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        versionedOrderBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertOrderBookListStatus(versionedOrderBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                Arrays.asList(emptyOrderBook, orderBookWithAlice),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                orderBookWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void redo_multipleOrderBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                emptyOrderBook, orderBookWithAlice, orderBookWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedOrderBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        versionedOrderBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertOrderBookListStatus(versionedOrderBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                Collections.singletonList(emptyOrderBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                orderBookWithAlice,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                Collections.singletonList(orderBookWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void redo_singleOrderBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList(emptyOrderBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertThrows(VersionedOrderBook.NoRedoableStateException.class, versionedOrderBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void redo_multipleOrderBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                emptyOrderBook, orderBookWithAlice, orderBookWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertThrows(VersionedOrderBook.NoRedoableStateException.class, versionedOrderBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d prepareOrderBookList(orderBookWithAlice, orderBookWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook copy \u003d prepareOrderBookList(orderBookWithAlice, orderBookWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(versionedOrderBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(versionedOrderBook.equals(versionedOrderBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(versionedOrderBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(versionedOrderBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook differentOrderBookList \u003d prepareOrderBookList(orderBookWithBob, orderBookWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(versionedOrderBook.equals(differentOrderBookList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook differentCurrentStatePointer \u003d prepareOrderBookList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                orderBookWithAlice, orderBookWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedOrderBook, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(versionedOrderBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Asserts that {@code versionedOrderBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private void assertOrderBookListStatus(VersionedOrderBook versionedOrderBook,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                                           List\u003cReadOnlyOrderBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                                           ReadOnlyOrderBook expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                                           List\u003cReadOnlyOrderBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(new OrderBook(versionedOrderBook), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        while (versionedOrderBook.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            versionedOrderBook.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        for (ReadOnlyOrderBook expectedOrderBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            assertEquals(expectedOrderBook, new OrderBook(versionedOrderBook));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            versionedOrderBook.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        for (ReadOnlyOrderBook expectedOrderBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            versionedOrderBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            assertEquals(expectedOrderBook, new OrderBook(versionedOrderBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(versionedOrderBook.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedOrderBook.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Creates and returns a {@code VersionedOrderBook} with the {@code orderBookStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * {@code VersionedOrderBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private VersionedOrderBook prepareOrderBookList(ReadOnlyOrderBook... orderBookStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(orderBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        VersionedOrderBook versionedOrderBook \u003d new VersionedOrderBook(orderBookStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        for (int i \u003d 1; i \u003c orderBookStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            versionedOrderBook.resetData(orderBookStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            versionedOrderBook.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return versionedOrderBook;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Shifts the {@code versionedOrderBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedOrderBook versionedOrderBook, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            versionedOrderBook.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 298
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedUsersListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.ALICE_MANAGER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.BENSON_MANAGER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.CARL_MANAGER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.testutil.user.UsersListBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class VersionedUsersListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final ReadOnlyUsersList usersListWithAlice \u003d new UsersListBuilder().withUser(ALICE_MANAGER).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final ReadOnlyUsersList usersListWithBenson \u003d new UsersListBuilder().withUser(BENSON_MANAGER).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final ReadOnlyUsersList usersListWithCarl \u003d new UsersListBuilder().withUser(CARL_MANAGER).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final ReadOnlyUsersList emptyUsersList \u003d new UsersListBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void commit_singleUsersList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d prepareUsersList(emptyUsersList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        versionedUsersList.commit();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertUsersListStatus(versionedUsersList,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                Collections.singletonList(emptyUsersList),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                emptyUsersList,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void commit_multipleUsersListPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d prepareUsersList(emptyUsersList, usersListWithAlice,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                usersListWithBenson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        versionedUsersList.commit();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertUsersListStatus(versionedUsersList,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                Arrays.asList(emptyUsersList, usersListWithAlice, usersListWithBenson),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                usersListWithBenson,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void commit_multipleUsersListPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d prepareUsersList(emptyUsersList, usersListWithAlice,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                usersListWithBenson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedUsersList, 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        versionedUsersList.commit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertUsersListStatus(versionedUsersList,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                Collections.singletonList(emptyUsersList),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                emptyUsersList,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void canUndo_multipleUsersListPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d prepareUsersList(emptyUsersList, usersListWithAlice,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                usersListWithBenson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(versionedUsersList.canUndo());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void canUndo_multipleUsersListPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d prepareUsersList(emptyUsersList, usersListWithAlice,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                usersListWithBenson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedUsersList, 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(versionedUsersList.canUndo());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void canUndo_singleUsersList_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d prepareUsersList(emptyUsersList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(versionedUsersList.canUndo());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void canUndo_multipleUsersListPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d prepareUsersList(emptyUsersList, usersListWithAlice,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                usersListWithBenson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedUsersList, 2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(versionedUsersList.canUndo());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void canRedo_multipleUsersListPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d prepareUsersList(emptyUsersList, usersListWithAlice,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                usersListWithBenson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedUsersList, 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(versionedUsersList.canRedo());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void canRedo_multipleUsersListPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d prepareUsersList(emptyUsersList, usersListWithAlice,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                usersListWithBenson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedUsersList, 2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(versionedUsersList.canRedo());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void canRedo_singleUsersList_returnsFalse() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d prepareUsersList(emptyUsersList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(versionedUsersList.canRedo());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void canRedo_multipleUsersListPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d prepareUsersList(emptyUsersList, usersListWithAlice,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                usersListWithBenson);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(versionedUsersList.canRedo());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void undo_multipleUsersListPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d prepareUsersList(emptyUsersList, usersListWithAlice,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                usersListWithBenson);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        versionedUsersList.undo();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertUsersListStatus(versionedUsersList,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                Collections.singletonList(emptyUsersList),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                usersListWithAlice,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                Collections.singletonList(usersListWithBenson));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void undo_multipleUsersListPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d prepareUsersList(emptyUsersList, usersListWithAlice,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                usersListWithBenson);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedUsersList, 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        versionedUsersList.undo();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertUsersListStatus(versionedUsersList,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                emptyUsersList,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                Arrays.asList(usersListWithAlice, usersListWithBenson));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void undo_singleUsersList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d prepareUsersList(emptyUsersList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertThrows(VersionedUsersList.NoUndoableStateException.class, versionedUsersList::undo);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void undo_multipleUsersListPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d prepareUsersList(emptyUsersList, usersListWithAlice,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                usersListWithBenson);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedUsersList, 2);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertThrows(VersionedUsersList.NoUndoableStateException.class, versionedUsersList::undo);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void redo_multipleUsersListPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d prepareUsersList(emptyUsersList, usersListWithAlice,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                usersListWithBenson);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedUsersList, 1);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        versionedUsersList.redo();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertUsersListStatus(versionedUsersList,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                Arrays.asList(emptyUsersList, usersListWithAlice),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                usersListWithBenson,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void redo_multipleUsersListPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d prepareUsersList(emptyUsersList, usersListWithAlice,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                usersListWithBenson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedUsersList, 2);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        versionedUsersList.redo();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertUsersListStatus(versionedUsersList,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                Collections.singletonList(emptyUsersList),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                usersListWithAlice,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                Collections.singletonList(usersListWithBenson));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void redo_singleUsersList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d prepareUsersList(emptyUsersList);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertThrows(VersionedUsersList.NoRedoableStateException.class, versionedUsersList::redo);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void redo_multipleUsersListPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d prepareUsersList(emptyUsersList, usersListWithAlice,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                usersListWithBenson);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertThrows(VersionedUsersList.NoRedoableStateException.class, versionedUsersList::redo);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Asserts that {@code versionedUsersList} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * states before {@code versionedUsersList#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * and states after {@code versionedUsersList#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private void assertUsersListStatus(VersionedUsersList versionedUsersList,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                                       List\u003cReadOnlyUsersList\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                                       ReadOnlyUsersList expectedCurrentState,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                                       List\u003cReadOnlyUsersList\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(new UsersList(versionedUsersList), expectedCurrentState);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        while (versionedUsersList.canUndo()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            versionedUsersList.undo();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        for (ReadOnlyUsersList expectedUsersList : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            assertEquals(expectedUsersList, new UsersList(versionedUsersList));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            versionedUsersList.redo();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        for (ReadOnlyUsersList expectedUsersList : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            versionedUsersList.redo();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            assertEquals(expectedUsersList, new UsersList(versionedUsersList));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(versionedUsersList.canRedo());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedUsersList.undo());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Creates and returns a {@code VersionedUsersList} with the {@code usersListStates} added into it, and the"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * {@code VersionedUsersList#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private VersionedUsersList prepareUsersList(ReadOnlyUsersList... usersListStates) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(usersListStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        VersionedUsersList versionedUsersList \u003d new VersionedUsersList(usersListStates[0]);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        for (int i \u003d 1; i \u003c usersListStates.length; i++) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            versionedUsersList.resetData(usersListStates[i]);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            versionedUsersList.commit();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return versionedUsersList;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Shifts the {@code versionedUsersList#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedUsersList versionedUsersList, int count) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            versionedUsersList.undo();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 274
    }
  },
  {
    "path": "src/test/java/seedu/address/model/common/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/common/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/common/PasswordTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "class PasswordTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    void isValidPassword() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // null password"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Password.isValidPassword(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        //invalid password"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(Password.isValidPassword(\"\")); // empty string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(Password.isValidPassword(\" \")); // spaces only"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(Password.isValidPassword(\"mana\")); //4 characters only"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(Password.isValidPassword(\"mana@@\")); //6 characters with special character"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(Password.isValidPassword(\"manager12@`\")); //alphanumeric with special character"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(Password.isValidPassword(\"koh chi hao 12\")); //alphanumeric with spacing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(Password.isValidPassword(\"koh chi hao 12@/~\")); //alphanumeric, spacing and special character"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(Password.isValidPassword(\"@`/\u0026*^%$#@\")); //special character"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        //valid password"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(Password.isValidPassword(\"manage\")); //6 alphabet character"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(Password.isValidPassword(\"managerpass12\")); //more than 6 characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(Password.isValidPassword(\"mana12\")); // 6 alphanumeric character"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(Password.isValidPassword(\"123456\")); //6 digits only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/common/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/common/UsernameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "class UsernameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    void isValidUsername() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // null username"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Username.isValidUsername(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        //invalid username"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(Username.isValidUsername(\"\")); // empty string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(Username.isValidUsername(\" \")); // spaces only"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(Username.isValidUsername(\"manager12@`\")); //alphanumeric with special character"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(Username.isValidUsername(\"koh chi hao 12\")); //alphanumeric with spacing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(Username.isValidUsername(\"koh chi hao 12@/~\")); //alphanumeric, spacing and special character"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(Username.isValidUsername(\"@`/\u0026*^%$#@\")); //special character"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        //valid username"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(Username.isValidUsername(\"manager\")); //alphanumeric"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(Username.isValidUsername(\"manager12\")); //alphanumeric"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deliveryman/DeliverymanNameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.model.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.testutil.DeliverymanBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class DeliverymanNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        DeliverymanNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new DeliverymanNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        DeliverymanNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new DeliverymanNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        DeliverymanNameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new DeliverymanNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // different deliveryman -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        DeliverymanNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new DeliverymanNameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(predicate.test(new DeliverymanBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        predicate \u003d new DeliverymanNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(predicate.test(new DeliverymanBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        predicate \u003d new DeliverymanNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(predicate.test(new DeliverymanBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        predicate \u003d new DeliverymanNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(predicate.test(new DeliverymanBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        DeliverymanNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new DeliverymanNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(predicate.test(new DeliverymanBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        predicate \u003d new DeliverymanNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(predicate.test(new DeliverymanBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deliveryman/DeliverymanTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.model.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.CHIKAO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.YINJING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.testutil.DeliverymanBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymanTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void isSameDeliveryman() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(CHIKAO.isSameDeliveryman(CHIKAO));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertFalse(CHIKAO.isSameDeliveryman(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Deliveryman differentChikao \u003d new DeliverymanBuilder(CHIKAO).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertFalse(CHIKAO.isSameDeliveryman(differentChikao));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": "        // completely different deliveryman -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertFalse(CHIKAO.isSameDeliveryman(YINJING));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Deliveryman chikaoCopy \u003d new DeliverymanBuilder(CHIKAO).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(CHIKAO.equals(chikaoCopy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "        // same deliveryman -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(CHIKAO.equals(CHIKAO));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "        // null returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertFalse(CHIKAO.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertFalse(CHIKAO.equals(5));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juxd"
        },
        "content": "        // different deliveryman -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertFalse(CHIKAO.equals(YINJING));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deliveryman/DeliverymenListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.model.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.MANIKA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.getTypicalDeliverymenList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymenListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private final DeliverymenList deliverymenList \u003d new DeliverymenList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(Collections.emptyList(), deliverymenList.getDeliverymenList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "        deliverymenList.resetData(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void resetData_withValidReadyOnlyDeliverymenList_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymenList newData \u003d getTypicalDeliverymenList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": "        deliverymenList.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(newData, deliverymenList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void hasDeliveryman_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": "        deliverymenList.hasDeliveryman(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void hasDeliveryman_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertFalse(deliverymenList.hasDeliveryman(MANIKA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void hasDeliveryman_deliverymanInDeliverymenList_returnsTrue() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": "        deliverymenList.addDeliveryman(MANIKA);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(deliverymenList.hasDeliveryman(MANIKA));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void getDeliverymenList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juxd"
        },
        "content": "        deliverymenList.getDeliverymenList().remove(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * A stub DeliverymenList whose deliverymen list can violate interface constraints."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private static class DeliverymenListStub extends DeliverymenList {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juxd"
        },
        "content": "        private final ObservableList\u003cDeliveryman\u003e deliverymen \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymenListStub(Collection\u003cDeliveryman\u003e deliverymen) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juxd"
        },
        "content": "            this.deliverymen.setAll(deliverymen);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public ObservableList\u003cDeliveryman\u003e getDeliverymenList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return deliverymen;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deliveryman/UniqueDeliverymenListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.model.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.RAJUL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.YINJING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class UniqueDeliverymenListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private final UniqueDeliverymenList uniqueDeliverymenList \u003d new UniqueDeliverymenList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void contains_nullDeliverymen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.contains(null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertFalse(uniqueDeliverymenList.contains(RAJUL));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.add(RAJUL);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(uniqueDeliverymenList.contains(RAJUL));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void add_nullDeliveryman_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.add(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void add_duplicateDeliveryman_throwsDuplicateDeliverymanException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.add(RAJUL);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.add(RAJUL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void setDeliveryman_nullTargetDeliveryman_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.setDeliveryman(null, RAJUL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void setDeliveryman_nullEditedDeliveryman_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.setDeliveryman(RAJUL, null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void setDeliveryman_targetDeliverymanNotInList_throwsDeliverymanNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.setDeliveryman(RAJUL, RAJUL);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void setDeliveryman_editedDeliverymanIsSameDeliveryman_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.add(RAJUL);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.setDeliveryman(RAJUL, RAJUL);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juxd"
        },
        "content": "        UniqueDeliverymenList expectedUniqueDeliverymenList \u003d new UniqueDeliverymenList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juxd"
        },
        "content": "        expectedUniqueDeliverymenList.add(RAJUL);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(expectedUniqueDeliverymenList, uniqueDeliverymenList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void setDeliveryman_editedDeliverymanHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.add(RAJUL);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.setDeliveryman(RAJUL, YINJING);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juxd"
        },
        "content": "        UniqueDeliverymenList expectedUniqueDeliverymenList \u003d new UniqueDeliverymenList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juxd"
        },
        "content": "        expectedUniqueDeliverymenList.add(YINJING);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(expectedUniqueDeliverymenList, uniqueDeliverymenList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void setDeliveryman_editedDeliverymanHasNonUniqueIdentity_throwsDuplicateDeliverymanException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.add(RAJUL);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.add(YINJING);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.setDeliveryman(RAJUL, YINJING);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void remove_nullDeliveryman_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.remove(null);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void remove_personDoesNotExist_throwsDeliverymanNotFoundException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.remove(RAJUL);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void remove_existingDeliveryman_removesDeliveryman() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.add(RAJUL);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.remove(RAJUL);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juxd"
        },
        "content": "        UniqueDeliverymenList expectedUniqueDeliverymenList \u003d new UniqueDeliverymenList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(expectedUniqueDeliverymenList, uniqueDeliverymenList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void setDeliverymen_nullUniqueDeliverymenList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.setDeliverymen((UniqueDeliverymenList) null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void setDeliverymen_uniqueDeliverymenList_replacesOwnListWithProvidedUniqueDeliverymenList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.add(RAJUL);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "juxd"
        },
        "content": "        UniqueDeliverymenList expectedUniqueDeliverymenList \u003d new UniqueDeliverymenList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "juxd"
        },
        "content": "        expectedUniqueDeliverymenList.add(YINJING);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.setDeliverymen(expectedUniqueDeliverymenList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(expectedUniqueDeliverymenList, uniqueDeliverymenList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void setDeliverymen_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.setDeliverymen((List\u003cDeliveryman\u003e) null);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void setDeliverymen_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.add(RAJUL);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "juxd"
        },
        "content": "        List\u003cDeliveryman\u003e personList \u003d Collections.singletonList(YINJING);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.setDeliverymen(personList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "juxd"
        },
        "content": "        UniqueDeliverymenList expectedUniqueDeliverymenList \u003d new UniqueDeliverymenList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "juxd"
        },
        "content": "        expectedUniqueDeliverymenList.add(YINJING);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(expectedUniqueDeliverymenList, uniqueDeliverymenList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void setDeliverymen_listWithDuplicateDeliverymen_throwsDuplicateDeliverymanException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "juxd"
        },
        "content": "        List\u003cDeliveryman\u003e listWithDuplicateDeliverymen \u003d Arrays.asList(RAJUL, RAJUL);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.setDeliverymen(listWithDuplicateDeliverymen);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "juxd"
        },
        "content": "        uniqueDeliverymenList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 162,
      "kohchihao": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/FoodTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class FoodTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Food(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Food(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void isValidFood() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Food.isValidFood(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // invalid food"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(Food.isValidFood(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(Food.isValidFood(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(Food.isValidFood(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(Food.isValidFood(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // valid food"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(Food.isValidFood(\"roti prata\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(Food.isValidFood(\"chocolate milkshake\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(Food.isValidFood(\"ice tea\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(Food.isValidFood(\"rojak\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(Food.isValidFood(\"lasagna\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/OrderDateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderDateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new OrderDate(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        String invalidDate \u003d \"12/10/18\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new OrderDate(invalidDate));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e OrderDate.isValidDate(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(OrderDate.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(OrderDate.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(OrderDate.isValidDate(\"12-13-2018\")); // date without time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(OrderDate.isValidDate(\"12/13/2018\")); // wrong date format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(OrderDate.isValidDate(\"12-13 10:00:00\")); // wrong date format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(OrderDate.isValidDate(\"2018-12-10 10:00\")); // wrong date format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        assertFalse(OrderDate.isValidDate(\"31-04-2018 01:00:00\")); // invalid date value"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        assertFalse(OrderDate.isValidDate(\"29-02-2018 00:00:00\")); // invalid date value"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(OrderDate.isValidDate(\"10-10-18 10:00:00\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(OrderDate.isValidDate(\"09-04-2017 12:00:00\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(OrderDate.isValidDate(\"06-11-2018 06:00:00\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "        assertTrue(OrderDate.isValidDate(\"29-02-2016 00:00:00\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "monmanuela": 3,
      "rrtheonlyone": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/OrderNameContainsKeywordPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class OrderNameContainsKeywordPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        OrderNameContainsKeywordPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new OrderNameContainsKeywordPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        OrderNameContainsKeywordPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new OrderNameContainsKeywordPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        OrderNameContainsKeywordPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new OrderNameContainsKeywordPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // different common -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        OrderNameContainsKeywordPredicate predicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new OrderNameContainsKeywordPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        predicate \u003d new OrderNameContainsKeywordPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        predicate \u003d new OrderNameContainsKeywordPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        predicate \u003d new OrderNameContainsKeywordPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        OrderNameContainsKeywordPredicate predicate \u003d new OrderNameContainsKeywordPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        predicate \u003d new OrderNameContainsKeywordPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Keywords match phone and address, but does not match name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        predicate \u003d new OrderNameContainsKeywordPredicate(Arrays.asList(\"12345\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                .withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Keywords match phone ,address and food, but does not match name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        predicate \u003d new OrderNameContainsKeywordPredicate(Arrays.asList(\"12345\", \"Clementi\", \"Prata\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                .withAddress(\"Clementi\").withFood(\"Prata\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 82,
      "kohchihao": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/OrderPhoneContainsKeywordPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class OrderPhoneContainsKeywordPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String firstPredicateKeyword \u003d \"91123112\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String secondPredicateKeyword \u003d \"8212245\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        OrderPhoneContainsKeywordPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new OrderPhoneContainsKeywordPredicate(firstPredicateKeyword);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        OrderPhoneContainsKeywordPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new OrderPhoneContainsKeywordPredicate(secondPredicateKeyword);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        OrderPhoneContainsKeywordPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new OrderPhoneContainsKeywordPredicate(firstPredicateKeyword);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // different common -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Exact number"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        OrderPhoneContainsKeywordPredicate predicate \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                new OrderPhoneContainsKeywordPredicate(\"12345678\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withPhone(\"12345678\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Trailing whitespace"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        predicate \u003d new OrderPhoneContainsKeywordPredicate(\"12345678    \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withPhone(\"12345678\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Spaces in between"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        predicate \u003d new OrderPhoneContainsKeywordPredicate(\"1234   6789\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withPhone(\"12346789\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Spaces everywhere"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        predicate \u003d new OrderPhoneContainsKeywordPredicate(\"  12  34   678 9\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(predicate.test(new OrderBuilder().withPhone(\"12346789\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Zero keyword"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        OrderPhoneContainsKeywordPredicate predicate \u003d new OrderPhoneContainsKeywordPredicate(\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withPhone(\"2345\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        predicate \u003d new OrderPhoneContainsKeywordPredicate(\"23457890\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withPhone(\"123456789\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // Invalid keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        predicate \u003d new OrderPhoneContainsKeywordPredicate(\"abc123\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(predicate.test(new OrderBuilder().withPhone(\"123456789\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 74,
      "kohchihao": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/OrderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FOOD_BURGER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void isSameOrder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(ALICE.isSameOrder(ALICE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(ALICE.isSameOrder(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order editedAlice \u003d new OrderBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(ALICE.isSameOrder(editedAlice));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        editedAlice \u003d new OrderBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(ALICE.isSameOrder(editedAlice));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // same name, same phone, same date different address and food -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        editedAlice \u003d new OrderBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .withFood(VALID_FOOD_BURGER).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(ALICE.isSameOrder(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // different data, everything else same -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        editedAlice \u003d new OrderBuilder(ALICE).withDate(\"03-10-2018 10:00:01\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(ALICE.isSameOrder(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // same everything, different food -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        editedAlice \u003d new OrderBuilder(ALICE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .withFood(VALID_FOOD_BURGER).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(ALICE.isSameOrder(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order aliceCopy \u003d new OrderBuilder(ALICE).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // different common -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(ALICE.equals(BENSON));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order editedAlice \u003d new OrderBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        editedAlice \u003d new OrderBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        editedAlice \u003d new OrderBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        editedAlice \u003d new OrderBuilder(ALICE).withFood(VALID_FOOD_BURGER).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 82,
      "kohchihao": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/UniqueOrderListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FOOD_BURGER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.exceptions.OrderNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class UniqueOrderListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private final UniqueOrderList uniqueOrderList \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void contains_nullOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.contains(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void contains_orderNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(uniqueOrderList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void contains_orderInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(uniqueOrderList.contains(ALICE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void contains_orderWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order editedAlice \u003d new OrderBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withFood(VALID_FOOD_BURGER)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(uniqueOrderList.contains(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void add_nullOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.add(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void add_duplicateOrder_throwsDuplicateOrderException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(DuplicateOrderException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void setOrder_nullTargetOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.setOrder(null, ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void setOrder_nullEditedOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.setOrder(ALICE, null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void setOrder_targetOrderNotInList_throwsOrderNotFoundException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(OrderNotFoundException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.setOrder(ALICE, ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void setOrder_editedOrderIsSameOrder_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.setOrder(ALICE, ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        UniqueOrderList expectedUniqueOrderList \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedUniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(expectedUniqueOrderList, uniqueOrderList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void setOrder_editedOrderHasSameIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order editedAlice \u003d new OrderBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withFood(VALID_FOOD_BURGER)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.setOrder(ALICE, editedAlice);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        UniqueOrderList expectedUniqueOrderList \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedUniqueOrderList.add(editedAlice);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(expectedUniqueOrderList, uniqueOrderList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void setOrder_editedOrderHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.setOrder(ALICE, BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        UniqueOrderList expectedUniqueOrderList \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedUniqueOrderList.add(BOB);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(expectedUniqueOrderList, uniqueOrderList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void setOrder_editedOrderHasNonUniqueIdentity_throwsDuplicateOrderException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.add(BOB);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(DuplicateOrderException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.setOrder(ALICE, BOB);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void remove_nullOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.remove(null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void remove_orderDoesNotExist_throwsOrderNotFoundException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(OrderNotFoundException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.remove(ALICE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void remove_existingOrder_removesOrder() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.remove(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        UniqueOrderList expectedUniqueOrderList \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(expectedUniqueOrderList, uniqueOrderList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void setOrder_nullUniqueOrderList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.setOrder((UniqueOrderList) null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void setOrder_uniqueOrderList_replacesOwnListWithProvidedUniqueOrderList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        UniqueOrderList expectedUniqueOrderList \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedUniqueOrderList.add(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.setOrder(expectedUniqueOrderList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(expectedUniqueOrderList, uniqueOrderList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void setOrder_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.setOrder((List\u003cOrder\u003e) null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void setOrder_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.add(ALICE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        List\u003cOrder\u003e orderList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.setOrder(orderList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        UniqueOrderList expectedUniqueOrderList \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedUniqueOrderList.add(BOB);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(expectedUniqueOrderList, uniqueOrderList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void setOrder_listWithDuplicateOrders_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        List\u003cOrder\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(DuplicateOrderException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.setOrder(listWithDuplicatePersons);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uniqueOrderList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 186
    }
  },
  {
    "path": "src/test/java/seedu/address/model/user/UniqueUserListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.ALICE_MANAGER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.BENSON_MANAGER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.testutil.user.UserBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class UniqueUserListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final UniqueUserList uniqueUserList \u003d new UniqueUserList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void contains_nullUser_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.contains(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void contains_userNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(uniqueUserList.contains(ALICE_MANAGER));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void contains_userInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.add(ALICE_MANAGER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(uniqueUserList.contains(ALICE_MANAGER));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void contains_userWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.add(ALICE_MANAGER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User editedAlice \u003d new UserBuilder(ALICE_MANAGER).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(uniqueUserList.contains(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void add_nullUser_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.add(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void add_duplicateUser_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.add(ALICE_MANAGER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.add(ALICE_MANAGER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setUser_nullTargetUser_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.setUser(null, ALICE_MANAGER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setUser_nullEditedUser_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.setUser(ALICE_MANAGER, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setUser_targetUserNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.setUser(ALICE_MANAGER, ALICE_MANAGER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setUser_editedPersonIsSameUser_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.add(ALICE_MANAGER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.setUser(ALICE_MANAGER, ALICE_MANAGER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        UniqueUserList expectedUniqueUserList \u003d new UniqueUserList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        expectedUniqueUserList.add(ALICE_MANAGER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(expectedUniqueUserList, uniqueUserList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setUser_editedUserHasSameIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.add(ALICE_MANAGER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User editedAlice \u003d new UserBuilder(ALICE_MANAGER).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.setUser(ALICE_MANAGER, editedAlice);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        UniqueUserList expectedUniqueUserList \u003d new UniqueUserList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        expectedUniqueUserList.add(editedAlice);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(expectedUniqueUserList, uniqueUserList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void remove_nullUser_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.remove(null);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void remove_userDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.remove(ALICE_MANAGER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void remove_existingUser_removesUser() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.add(ALICE_MANAGER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.remove(ALICE_MANAGER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        UniqueUserList expectedUniqueUserList \u003d new UniqueUserList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(expectedUniqueUserList, uniqueUserList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setUsers_nullUniqueUserList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.setUsers((UniqueUserList) null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setUsers_uniqueUserList_replacesOwnListWithProvidedUniqueUserList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.add(ALICE_MANAGER);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        UniqueUserList expectedUniqueUserList \u003d new UniqueUserList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        expectedUniqueUserList.add(BENSON_MANAGER);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.setUsers(expectedUniqueUserList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(expectedUniqueUserList, uniqueUserList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setUsers_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.setUsers((List\u003cUser\u003e) null);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setUsers_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.add(ALICE_MANAGER);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        List\u003cUser\u003e userList \u003d Collections.singletonList(BENSON_MANAGER);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.setUsers(userList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        UniqueUserList expectedUniqueUserList \u003d new UniqueUserList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        expectedUniqueUserList.add(BENSON_MANAGER);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(expectedUniqueUserList, uniqueUserList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setUsers_listWithDuplicateUsers_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        List\u003cUser\u003e listWithDuplicateUsers \u003d Arrays.asList(ALICE_MANAGER, ALICE_MANAGER);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.setUsers(listWithDuplicateUsers);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        uniqueUserList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 165
    }
  },
  {
    "path": "src/test/java/seedu/address/model/user/UserSessionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.ALICE_MANAGER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.BENSON_MANAGER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class UserSessionTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private final UserSession userSession \u003d new UserSession();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        UserSession expectedUserSession \u003d new UserSession(ALICE_MANAGER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(expectedUserSession.isUserAlreadyLoggedIn());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(ALICE_MANAGER, expectedUserSession.getLoggedInUserDetails());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void constructor_nullUser_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        UserSession expectedUserSession \u003d new UserSession(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setUserSession_haveUser_isEquals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        userSession.setUserSession(ALICE_MANAGER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(ALICE_MANAGER, userSession.getLoggedInUserDetails());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setUserSession_nullUser_notEquals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertNotEquals(ALICE_MANAGER, userSession.getLoggedInUserDetails());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void setUserSession_nullUser_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        userSession.setUserSession(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void isUserAlreadyLoggedIn() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        userSession.setUserSession(ALICE_MANAGER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(userSession.isUserAlreadyLoggedIn());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void isUserAlreadyLoggedIn_nullUser() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        userSession.setUserSession(null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(userSession.isUserAlreadyLoggedIn());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void clearUserInSession() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        userSession.setUserSession(BENSON_MANAGER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        userSession.clearUserSession();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertNull(userSession.getLoggedInUserDetails());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void getLoggedInUserDetails() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        userSession.setUserSession(BENSON_MANAGER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertNotEquals(ALICE_MANAGER, userSession.getLoggedInUserDetails());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(BENSON_MANAGER, userSession.getLoggedInUserDetails());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void getLoggedInUserDetails_nullUser() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        userSession.setUserSession(null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertNull(userSession.getLoggedInUserDetails());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/model/user/UserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_NAME_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.ALICE_MANAGER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.CARL_MANAGER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.testutil.user.UserBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class UserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_USERNAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_PASSWORD_AMY \u003d \"amybee\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bobby\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_USERNAME_BOB \u003d \"Bobby\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String VALID_PASSWORD_BOB \u003d \"bobby01\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void isSameUser() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(ALICE_MANAGER.isSameUser(ALICE_MANAGER));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(ALICE_MANAGER.isSameUser(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // same name, different username and password -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User editedAlice \u003d new UserBuilder(ALICE_MANAGER)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withUsername(VALID_USERNAME_AMY)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withPassword(VALID_PASSWORD_AMY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(ALICE_MANAGER.isSameUser(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // same name, same username and different password -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        editedAlice \u003d new UserBuilder(ALICE_MANAGER)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withPassword(VALID_PASSWORD_AMY)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(ALICE_MANAGER.isSameUser(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void isSameExistingUser() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(ALICE_MANAGER.isSameExistingUser(ALICE_MANAGER));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(ALICE_MANAGER.isSameExistingUser(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // different username and password -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User editedAlice \u003d new UserBuilder()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withUsername(VALID_USERNAME_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withPassword(VALID_PASSWORD_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(ALICE_MANAGER.isSameExistingUser(editedAlice));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // same name, same username and different password -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        editedAlice \u003d new UserBuilder(ALICE_MANAGER)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withPassword(VALID_PASSWORD_AMY)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(ALICE_MANAGER.isSameExistingUser(editedAlice));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User aliceCopy \u003d new UserBuilder(ALICE_MANAGER).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(ALICE_MANAGER.equals(aliceCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertTrue(ALICE_MANAGER.equals(ALICE_MANAGER));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(ALICE_MANAGER.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(ALICE_MANAGER.equals(5));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // different common -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(ALICE_MANAGER.equals(CARL_MANAGER));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User editedAlice \u003d new UserBuilder(ALICE_MANAGER).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(ALICE_MANAGER.equals(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User alice \u003d new UserBuilder(ALICE_MANAGER).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String expectedResponse \u003d VALID_MANAGER_NAME_ALICE"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" Username: \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + VALID_MANAGER_USERNAME_ALICE"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" Password: \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(alice.toString(), expectedResponse);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String wrongResponse \u003d VALID_MANAGER_NAME_ALICE"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" Username: \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + VALID_MANAGER_USERNAME_ALICE"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" Password: \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + VALID_MANAGER_PASSWORD_BENSON;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertNotEquals(alice.toString(), wrongResponse);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.events.model.OrderBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.ReadOnlyUsersList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymenList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.storage.deliveryman.XmlDeliverymenListStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.storage.user.XmlUsersListStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlOrderBookStorage orderBookStorage \u003d new XmlOrderBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        XmlUsersListStorage usersListStorage \u003d new XmlUsersListStorage(getTempFilePath(\"users\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": "        XmlDeliverymenListStorage deliverymenListStorage \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "                new XmlDeliverymenListStorage(getTempFilePath(\"dl\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        storageManager \u003d new StorageManager(orderBookStorage, usersListStorage,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                deliverymenListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void orderBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "         * {@link XmlOrderBookStorage} class."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlOrderBookStorageTest} class."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderBook original \u003d getTypicalOrderBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        storageManager.saveOrderBook(original);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        ReadOnlyOrderBook retrieved \u003d storageManager.readOrderBook().get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(original, new OrderBook(retrieved));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void getOrderBookFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertNotNull(storageManager.getOrderBookFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void handleOrderBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlOrderBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juxd"
        },
        "content": "                new XmlUsersListStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "                new XmlDeliverymenListStorageExceptionThrowingStub(Paths.get(\"dummy2\")),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        storage.handleOrderBookChangedEvent(new OrderBookChangedEvent(new OrderBook()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    class XmlOrderBookStorageExceptionThrowingStub extends XmlOrderBookStorage {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public XmlOrderBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        public void saveOrderBook(ReadOnlyOrderBook orderBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    class XmlUsersListStorageExceptionThrowingStub extends XmlUsersListStorage {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        public XmlUsersListStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        public void saveUsersList(ReadOnlyUsersList usersList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Another Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "juxd"
        },
        "content": "    class XmlDeliverymenListStorageExceptionThrowingStub extends XmlDeliverymenListStorage {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public XmlDeliverymenListStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "juxd"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "juxd"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "juxd"
        },
        "content": "        public void saveDeliverymenList(DeliverymenList deliverymenList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 18,
      "monmanuela": 2,
      "rrtheonlyone": 22,
      "kohchihao": 7,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedOrderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.storage.XmlAdaptedOrder.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Food;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.OrderDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class XmlAdaptedOrderTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final String INVALID_DATE \u003d \"12/10/2018\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final String VALID_DATE \u003d BENSON.getDate().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final String VALID_STATUS \u003d BENSON.getOrderStatus().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final List\u003cXmlAdaptedFood\u003e VALID_FOOD \u003d BENSON.getFood().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .map(XmlAdaptedFood::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void toModelType_validOrderDetails_returnsOrder() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(BENSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(BENSON, order.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(BENSON.hasSameTag(order.toModelType()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void toModelType_invalidOrder_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlAdaptedOrder order \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                new XmlAdaptedOrder(INVALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_DATE, VALID_STATUS, VALID_FOOD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": "        XmlAdaptedOrder order \u003d new XmlAdaptedOrder(null,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            VALID_PHONE, VALID_ADDRESS, VALID_DATE, VALID_STATUS, VALID_FOOD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlAdaptedOrder order \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                new XmlAdaptedOrder(VALID_NAME, INVALID_PHONE, VALID_ADDRESS, VALID_DATE, VALID_STATUS, VALID_FOOD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juxd"
        },
        "content": "        XmlAdaptedOrder order \u003d new XmlAdaptedOrder("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            VALID_NAME, null, VALID_ADDRESS, VALID_DATE, VALID_STATUS, VALID_FOOD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlAdaptedOrder order \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                new XmlAdaptedOrder(VALID_NAME, VALID_PHONE, INVALID_ADDRESS, VALID_DATE, VALID_STATUS, VALID_FOOD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juxd"
        },
        "content": "        XmlAdaptedOrder order \u003d new XmlAdaptedOrder("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            VALID_NAME, VALID_PHONE, null, VALID_DATE, VALID_STATUS, VALID_FOOD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlAdaptedOrder order \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                new XmlAdaptedOrder(VALID_NAME, VALID_PHONE, VALID_ADDRESS, INVALID_DATE, VALID_STATUS, VALID_FOOD);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        String expectedMessage \u003d OrderDate.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlAdaptedOrder order \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                new XmlAdaptedOrder(VALID_NAME, VALID_PHONE, VALID_ADDRESS, null, VALID_STATUS, VALID_FOOD);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Date\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void toModelType_nullFood_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlAdaptedOrder order \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                new XmlAdaptedOrder(VALID_NAME, VALID_PHONE, VALID_ADDRESS, VALID_DATE, VALID_STATUS, null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Food.class.getSimpleName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, order::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 5,
      "rrtheonlyone": 107,
      "kohchihao": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlOrderBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "import com.google.common.collect.Streams;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class XmlOrderBookStorageTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlOrderBookStorageTest\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void readOrderBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        readOrderBook(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private java.util.Optional\u003cReadOnlyOrderBook\u003e readOrderBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return new XmlOrderBookStorage(Paths.get(filePath)).readOrderBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(readOrderBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        readOrderBook(\"NotXmlFormatOrderBook.xml\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void readOrderBook_invalidOrderOrderBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        readOrderBook(\"invalidOrderOrderBook.xml\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void readOrderBook_invalidAndValidOrderOrderBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        readOrderBook(\"invalidAndValidOrderOrderBook.xml\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void readAndSaveOrderBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderBook original \u003d getTypicalOrderBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlOrderBookStorage xmlOrderBookStorage \u003d new XmlOrderBookStorage(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        xmlOrderBookStorage.saveOrderBook(original, filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        ReadOnlyOrderBook readBack \u003d xmlOrderBookStorage.readOrderBook(filePath).get();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(original, new OrderBook(readBack));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(Streams.zip(original.getOrderList().stream(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juxd"
        },
        "content": "            readBack.getOrderList().stream(), (a, b) -\u003e a.hasSameTag(b)).allMatch(x -\u003e x));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        original.addOrder(HOON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        original.removeOrder(ALICE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        xmlOrderBookStorage.saveOrderBook(original, filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        readBack \u003d xmlOrderBookStorage.readOrderBook(filePath).get();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(original, new OrderBook(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(Streams.zip(original.getOrderList().stream(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juxd"
        },
        "content": "            readBack.getOrderList().stream(), (a, b) -\u003e a.hasSameTag(b)).allMatch(x -\u003e x));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        original.addOrder(IDA);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        xmlOrderBookStorage.saveOrderBook(original); //file path not specified"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        readBack \u003d xmlOrderBookStorage.readOrderBook().get(); //file path not specified"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(original, new OrderBook(readBack));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(Streams.zip(original.getOrderList().stream(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juxd"
        },
        "content": "            readBack.getOrderList().stream(), (a, b) -\u003e a.hasSameTag(b)).allMatch(x -\u003e x));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void saveOrderBook_nullOrderBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        saveOrderBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Saves {@code orderBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private void saveOrderBook(ReadOnlyOrderBook orderBook, String filePath) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            new XmlOrderBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                    .saveOrderBook(orderBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void saveOrderBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        saveOrderBook(new OrderBook(), null);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 9,
      "rrtheonlyone": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableOrderBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "import com.google.common.collect.Streams;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.testutil.TypicalOrders;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class XmlSerializableOrderBookTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableOrderBookTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final Path TYPICAL_ORDERS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalOrdersOrderBook.xml\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final Path INVALID_ORDER_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidOrderOrderBook.xml\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final Path DUPLICATE_ORDER_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateOrderOrderBook.xml\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void toModelType_typicalOrdersFile_success() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlSerializableOrderBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_ORDERS_FILE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                XmlSerializableOrderBook.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderBook orderBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderBook typicalOrdersOrderBook \u003d TypicalOrders.getTypicalOrderBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(orderBookFromFile, typicalOrdersOrderBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(Streams.zip(orderBookFromFile.getOrderList().stream(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "            typicalOrdersOrderBook.getOrderList().stream(), (a, b) -\u003e a.hasSameTag(b)).allMatch(x -\u003e x));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlSerializableOrderBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_ORDER_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                XmlSerializableOrderBook.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlSerializableOrderBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_ORDER_FILE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                XmlSerializableOrderBook.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        thrown.expectMessage(XmlSerializableOrderBook.MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 5,
      "rrtheonlyone": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/deliveryman/XmlAdaptedDeliverymanTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.storage.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.storage.deliveryman.XmlAdaptedDeliveryman.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.RAJUL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class XmlAdaptedDeliverymanTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private static final String INVALID_NAME \u003d \"D@mi+h\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void toModelType_validDeliverymanDetails_returnsDeliveryman() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "        XmlAdaptedDeliveryman deliveryman \u003d new XmlAdaptedDeliveryman(RAJUL);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(RAJUL, deliveryman.toModelType());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(RAJUL.hasSameTag(deliveryman.toModelType()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "        XmlAdaptedDeliveryman deliveryman \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "            new XmlAdaptedDeliveryman(INVALID_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, deliveryman::toModelType);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "        XmlAdaptedDeliveryman deliveryman \u003d new XmlAdaptedDeliveryman((String) null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, deliveryman::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 38,
      "kohchihao": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/deliveryman/XmlDeliverymenListStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.storage.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.RAJUL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverymen.getTypicalDeliverymenList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "import com.google.common.collect.Streams;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymenList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class XmlDeliverymenListStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlDeliverymenListStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void readDeliverymenList_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "        readDeliverymenList(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private java.util.Optional\u003cDeliverymenList\u003e readDeliverymenList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return new XmlDeliverymenListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": "            .readDeliverymenList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertFalse(readDeliverymenList(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juxd"
        },
        "content": "        readDeliverymenList(\"NotXmlFormatDeliverymenList.xml\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juxd"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juxd"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void readDeliverymenList_invalidPersonDeliverymenList_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": "        readDeliverymenList(\"invalidDeliverymanDeliverymenList.xml\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void readDeliverymenList_invalidAndValidPersonDeliverymenList_throwDataConversionException()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juxd"
        },
        "content": "        throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "juxd"
        },
        "content": "        readDeliverymenList(\"invalidAndValidDeliverymenDeliverymenList.xml\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void readAndSaveDeliverymenList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempDeliverymenList.xml\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymenList original \u003d getTypicalDeliverymenList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "juxd"
        },
        "content": "        XmlDeliverymenListStorage xmlDeliverymenListStorage \u003d new XmlDeliverymenListStorage(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "juxd"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "juxd"
        },
        "content": "        xmlDeliverymenListStorage.saveDeliverymenList(original, filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymenList readBack \u003d xmlDeliverymenListStorage.readDeliverymenList(filePath).get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(original, new DeliverymenList(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(Streams.zip(original.getDeliverymenList().stream(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "juxd"
        },
        "content": "            readBack.getDeliverymenList().stream(), (a, b) -\u003e a.hasSameTag(b)).allMatch(x -\u003e x));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "juxd"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "juxd"
        },
        "content": "        original.removeDeliveryman(RAJUL);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "juxd"
        },
        "content": "        xmlDeliverymenListStorage.saveDeliverymenList(original, filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "juxd"
        },
        "content": "        readBack \u003d xmlDeliverymenListStorage.readDeliverymenList(filePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(original, new DeliverymenList(readBack));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(Streams.zip(original.getDeliverymenList().stream(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "juxd"
        },
        "content": "            readBack.getDeliverymenList().stream(), (a, b) -\u003e a.hasSameTag(b)).allMatch(x -\u003e x));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juxd"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "juxd"
        },
        "content": "        original.addDeliveryman(RAJUL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juxd"
        },
        "content": "        xmlDeliverymenListStorage.saveDeliverymenList(original); //file path not specified"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juxd"
        },
        "content": "        readBack \u003d xmlDeliverymenListStorage.readDeliverymenList().get(); //file path not specified"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(original, new DeliverymenList(readBack));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(Streams.zip(original.getDeliverymenList().stream(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "juxd"
        },
        "content": "            readBack.getDeliverymenList().stream(), (a, b) -\u003e a.hasSameTag(b)).allMatch(x -\u003e x));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void saveDeliverymenList_nullDeliverymenList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "juxd"
        },
        "content": "        saveDeliverymenList(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Saves {@code DeliverymenList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private void saveDeliverymenList(DeliverymenList deliverymenList, String filePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "juxd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juxd"
        },
        "content": "            new XmlDeliverymenListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "juxd"
        },
        "content": "                .saveDeliverymenList(deliverymenList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juxd"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "juxd"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void saveDeliverymenList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "juxd"
        },
        "content": "        saveDeliverymenList(new DeliverymenList(), null);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/deliveryman/XmlSerializableDeliverymenListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.storage.deliveryman;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "import com.google.common.collect.Streams;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymenList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.testutil.TypicalDeliverymen;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class XmlSerializableDeliverymenListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableDeliverymenListTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private static final Path TYPICAL_DELIVERYMEN_FILE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalDeliverymenDeliverymenList.xml\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidDeliverymanDeliverymenList.xml\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicateDeliverymenDeliverymenList.xml\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void toModelType_typicalDeliverymenFile_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "        XmlSerializableDeliverymenList dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_DELIVERYMEN_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "            XmlSerializableDeliverymenList.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymenList deliverymenListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymenList typicalDeliverymenDeliverymenList \u003d TypicalDeliverymen.getTypicalDeliverymenList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(typicalDeliverymenDeliverymenList.getDeliverymenList().get(1),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": "            deliverymenListFromFile.getDeliverymenList().get(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertEquals(deliverymenListFromFile, typicalDeliverymenDeliverymenList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(Streams.zip(deliverymenListFromFile.getDeliverymenList().stream(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "            typicalDeliverymenDeliverymenList.getDeliverymenList().stream(), (a, b) -\u003e a.hasSameTag(b))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": "            .allMatch(x -\u003e x));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": "        XmlSerializableDeliverymenList dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": "            XmlSerializableDeliverymenList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juxd"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public void toModelType_duplicateDeliverymen_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": "        XmlSerializableDeliverymenList dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": "            XmlSerializableDeliverymenList.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juxd"
        },
        "content": "        thrown.expectMessage(XmlSerializableDeliverymenList.MESSAGE_DUPLICATE_DELIVERYMAN);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juxd"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "juxd": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/user/XmlAdaptedUserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.storage.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.storage.user.XmlAdaptedUser.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.CARL_MANAGER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Password;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Username;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class XmlAdaptedUserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private static final String INVALID_USERNAME \u003d \"manager12@`\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private static final String INVALID_PASSWORD \u003d \"man12\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private static final String VALID_NAME \u003d CARL_MANAGER.getName().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private static final String VALID_USERNAME \u003d CARL_MANAGER.getUsername().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private static final String VALID_PASSWORD \u003d CARL_MANAGER.getPassword().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void toModelType_validUserDetails_returnsUser() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        XmlAdaptedUser user \u003d new XmlAdaptedUser(CARL_MANAGER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(CARL_MANAGER, user.toModelType());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        XmlAdaptedUser user \u003d new XmlAdaptedUser(INVALID_NAME, VALID_USERNAME, VALID_PASSWORD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, user::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        XmlAdaptedUser user \u003d new XmlAdaptedUser(null, VALID_USERNAME, VALID_PASSWORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, user::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void toModelType_invalidUsername_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        XmlAdaptedUser user \u003d new XmlAdaptedUser(VALID_NAME, INVALID_USERNAME, VALID_PASSWORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String expectedMessage \u003d Username.MESSAGE_USERNAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, user::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void toModelType_nullUsername_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        XmlAdaptedUser user \u003d new XmlAdaptedUser(VALID_NAME, null, VALID_PASSWORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Username.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, user::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void toModelType_invalidPassword_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        XmlAdaptedUser user \u003d new XmlAdaptedUser(VALID_NAME, VALID_USERNAME, INVALID_PASSWORD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String expectedMessage \u003d Password.MESSAGE_PASSWORD_CONSTRAINTS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, user::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void toModelType_nullPassword_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        XmlAdaptedUser user \u003d new XmlAdaptedUser(VALID_NAME, VALID_USERNAME, null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Password.class.getSimpleName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, user::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/user/XmlSerializableUsersListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.storage.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.UsersList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.testutil.user.TypicalUsers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class XmlSerializableUsersListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            \"XmlSerializableUsersListTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private static final Path TYPICAL_USERS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalUsersList.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private static final Path INVALID_USER_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidUsersList.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private static final Path DUPLICATE_USER_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateUsersList.xml\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void toModelType_typicalUsersFile_success() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        XmlSerializableUsersList dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_USERS_FILE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                XmlSerializableUsersList.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        UsersList usersListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        UsersList typicalUsersList \u003d TypicalUsers.getTypicalUsersList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(usersListFromFile, typicalUsersList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void toModelType_invalidUserFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        XmlSerializableUsersList dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_USER_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                XmlSerializableUsersList.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        XmlSerializableUsersList dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_USER_FILE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                XmlSerializableUsersList.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expectMessage(XmlSerializableUsersList.MESSAGE_DUPLICATE_USER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/user/XmlUsersListStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.storage.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.ALICE_MANAGER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.HOON_MANAGER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.IDA_MANAGER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.testutil.user.TypicalUsers.getTypicalUsersList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.ReadOnlyUsersList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.UsersList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class XmlUsersListStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            \"XmlUsersListStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void readUsersList_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        readUsersList(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private java.util.Optional\u003cReadOnlyUsersList\u003e readUsersList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return new XmlUsersListStorage(Paths.get(filePath)).readUsersList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertFalse(readUsersList(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        readUsersList(\"NotXmlFormatUsersList.xml\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void readUsersList_invalidUsersList_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        readUsersList(\"invalidUsersList.xml\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void readUsersList_invalidAndValidUsersList_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        readUsersList(\"invalidAndValidUsersList.xml\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void readAndSaveUsersList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        UsersList original \u003d getTypicalUsersList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        XmlUsersListStorage xmlUsersListStorage \u003d new XmlUsersListStorage(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        xmlUsersListStorage.saveUsersList(original, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        ReadOnlyUsersList readBack \u003d xmlUsersListStorage.readUsersList(filePath).get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(original, new UsersList(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        original.addUser(HOON_MANAGER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        original.removeUser(ALICE_MANAGER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        xmlUsersListStorage.saveUsersList(original, filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        readBack \u003d xmlUsersListStorage.readUsersList(filePath).get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(original, new UsersList(readBack));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        original.addUser(IDA_MANAGER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        xmlUsersListStorage.saveUsersList(original); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        readBack \u003d xmlUsersListStorage.readUsersList().get(); //file path not specified"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(original, new UsersList(readBack));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void saveUsersList_nullUsersList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        saveUsersList(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Saves {@code usersList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private void saveUsersList(ReadOnlyUsersList usersList, String filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            new XmlUsersListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                    .saveUsersList(usersList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void saveUsersList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        saveUsersList(new UsersList(), null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeliverymanBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": " * A utility class to help build a deliveryman"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymanBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Deliver E\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private UUID id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public DeliverymanBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Initializes the DeliverymanBuilder with the data of {@code deliverymanToCopy}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public DeliverymanBuilder(Deliveryman deliverymanToCopy) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "        id \u003d deliverymanToCopy.getTag();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "        name \u003d deliverymanToCopy.getName();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Sets the {@code Name} of the {@code Deliveryman} that we are building."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public DeliverymanBuilder withName(String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Sets the {@code id} of the {@code Deliveryman} that we are building"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * @param idString"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public DeliverymanBuilder withId(String idString) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.id \u003d UUID.fromString(idString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Builds the {@code Deliveryman}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public Deliveryman build() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (id !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return new Deliveryman(id, name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "juxd"
        },
        "content": "            return new Deliveryman(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 54,
      "kohchihao": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeliverymanUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.logic.commands.deliveryman.DeliverymanAddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": " * A utility class for Deliveryman testing."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymanUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Returns an add command string for adding the {@code deliveryman}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static String getDeliverymanAddCommand(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return DeliverymanAddCommand.COMMAND_WORD + \" \" + getDeliverymanDetails(deliveryman);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Returns the part of the command string for the given {@code deliveryman}\u0027s details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static String getDeliverymanDetails(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "        sb.append(PREFIX_NAME + deliveryman.getName().fullName + \" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeliverymenListBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymenList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": " * A utility class to help with building DeliverymenList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class DeliverymenListBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private DeliverymenList deliverymenList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public DeliverymenListBuilder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "        deliverymenList \u003d new DeliverymenList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public DeliverymenListBuilder(DeliverymenList deliverymenList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.deliverymenList \u003d deliverymenList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Adds a new {@code Deliveryman} to the {@code DeliverymenList} that we are building."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public DeliverymenListBuilder withDeliveryman(Deliveryman deliveryman) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "        deliverymenList.addDeliveryman(deliveryman);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public DeliverymenList build() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return deliverymenList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditOrderDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.EditCommand.EditOrderDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.OrderDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " * A utility class to help with building EditOrderDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class EditOrderDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private EditOrderDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public EditOrderDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor \u003d new EditOrderDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public EditOrderDescriptorBuilder(EditOrderDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        this.descriptor \u003d new EditOrderDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Returns an {@code EditOrderDescriptor} with fields containing {@code order}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public EditOrderDescriptorBuilder(Order order) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor \u003d new EditOrderDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor.setName(order.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor.setPhone(order.getPhone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor.setAddress(order.getAddress());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor.setDate(order.getDate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor.setFood(order.getFood());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Sets the {@code Name} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public EditOrderDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public EditOrderDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Sets the {@code Address} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public EditOrderDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Sets the {@code Date} of the {@code EditOrderDescriptor} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public EditOrderDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor.setDate(new OrderDate(date));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Parses the {@code food} into a {@code Set\u003cFood\u003e} and set it to the {@code EditOrderDescriptor}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public EditOrderDescriptorBuilder withFood(String... food) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Set\u003cFood\u003e foodSet \u003d Stream.of(food).map(Food::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor.setFood(foodSet);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public EditOrderDescriptor build() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 80,
      "kohchihao": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/OrderBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * A utility class to help with building Orderbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * {@code OrderBook ab \u003d new OrderBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private OrderBook orderBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderBook \u003d new OrderBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderBookBuilder(OrderBook orderBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this.orderBook \u003d orderBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Adds a new {@code Order} to the {@code OrderBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderBookBuilder withOrder(Order order) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderBook.addOrder(order);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return orderBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/OrderBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.OrderDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.OrderStatus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * A utility class to help with building Order objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String DEFAULT_STATUS \u003d \"PENDING\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"01-10-2018 10:00:00\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final String DEFAULT_FOOD \u003d \"Fried Rice\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private OrderDate date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private OrderStatus status;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private Set\u003cFood\u003e food;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private UUID id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        date \u003d new OrderDate(DEFAULT_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        food \u003d SampleDataUtil.getFoodSet(DEFAULT_FOOD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        status \u003d new OrderStatus(DEFAULT_STATUS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Initializes the OrderBuilder with the data of {@code orderToCopy}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderBuilder(Order orderToCopy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "juxd"
        },
        "content": "        id \u003d orderToCopy.getTag();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        name \u003d orderToCopy.getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        phone \u003d orderToCopy.getPhone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        address \u003d orderToCopy.getAddress();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        date \u003d orderToCopy.getDate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        status \u003d orderToCopy.getOrderStatus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        food \u003d new HashSet\u003c\u003e(orderToCopy.getFood());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Sets the {@code id} of the {@code Order} that we are building"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public OrderBuilder withId(String id) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "juxd"
        },
        "content": "        this.id \u003d UUID.fromString(id);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Sets the {@code Name} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderBuilder withName(String name) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Parses the {@code food} into a {@code Set\u003cFood\u003e} and set it to the {@code Order} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderBuilder withFood(String... food) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this.food \u003d SampleDataUtil.getFoodSet(food);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Sets the {@code Date} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderBuilder withDate(String orderDate) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this.date \u003d new OrderDate(orderDate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Sets the {@code Phone} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Sets the {@code Status} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        this.status \u003d new OrderStatus(status);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Builds and returns an order."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public Order build() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "juxd"
        },
        "content": "        if (id !\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return new Order(id, name, phone, address, date, status, food);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "juxd"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            return new Order(name, phone, address, date, status, food);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 18,
      "rrtheonlyone": 105,
      "kohchihao": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/OrderUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.EditCommand.EditOrderDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.order.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * A utility class for Order."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns an add command string for adding the {@code order}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static String getAddCommand(Order order) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getOrderDetails(order);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns the part of command string for the given {@code order}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static String getOrderDetails(Order order) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        sb.append(PREFIX_NAME + order.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        sb.append(PREFIX_PHONE + order.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        sb.append(PREFIX_ADDRESS + order.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        sb.append(PREFIX_DATE + order.getDate().toString() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        order.getFood().stream().forEach("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            s -\u003e sb.append(PREFIX_FOOD + s.foodName + \" \")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Returns the part of command string for the given {@code EditOrderDescriptor}\u0027s details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static String getEditOrderDescriptorDetails(EditOrderDescriptor descriptor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        descriptor.getDate().ifPresent(date -\u003e sb.append(PREFIX_DATE).append(date).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        if (descriptor.getFood().isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            Set\u003cFood\u003e food \u003d descriptor.getFood().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            if (food.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                sb.append(PREFIX_FOOD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                food.forEach(s -\u003e sb.append(PREFIX_FOOD).append(s.foodName).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 26,
      "rrtheonlyone": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns the middle index of the common in the {@code model}\u0027s common list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return Index.fromOneBased(model.getFilteredOrderList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns the last index of the common in the {@code model}\u0027s common list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return Index.fromOneBased(model.getFilteredOrderList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns the common in the {@code model}\u0027s common list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static Order getOrder(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return model.getFilteredOrderList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 5,
      "kohchihao": 3,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalDeliverymen.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "juxd"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.Deliveryman;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "juxd"
        },
        "content": "import seedu.address.model.deliveryman.DeliverymenList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": " * A utility class containing a list of {@code Deliverymen} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "juxd"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "public class TypicalDeliverymen {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String CHIKAO_ID \u003d \"0a52f570-4f41-4460-b303-e0567910e9b3\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String MANIKA_ID \u003d \"e6f8a44a-fc0c-4a38-b650-4f5a9947fd31\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String RAJUL_ID \u003d \"778909e5-f134-472a-bfd8-d34b35cf0b62\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String YINJING_ID \u003d \"71cac1b0-33ea-4d0e-b1bd-c9e72cd3351f\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final Deliveryman CHIKAO \u003d new DeliverymanBuilder().withName(\"Hoh Chi Kao\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "juxd"
        },
        "content": "            .withId(CHIKAO_ID).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final Deliveryman MANIKA \u003d new DeliverymanBuilder().withName(\"Manika Monuela\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "juxd"
        },
        "content": "            .withId(MANIKA_ID).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final Deliveryman RAJUL \u003d new DeliverymanBuilder().withName(\"Rajul Rahesh\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "            .withId(RAJUL_ID).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final Deliveryman YINJING \u003d new DeliverymanBuilder().withName(\"Tan Yin Jing\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "            .withId(YINJING_ID).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "     * Returns a {@code DeliverymenList} with all the typical Deliverymen."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static DeliverymenList getTypicalDeliverymenList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "        DeliverymenList dl \u003d new DeliverymenList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "        for (Deliveryman dman : getTypicalDeliverymen()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "            dl.addDeliveryman(dman);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return dl;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static List\u003cDeliveryman\u003e getTypicalDeliverymen() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "juxd"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CHIKAO, MANIKA, RAJUL, YINJING));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "juxd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "juxd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalOrders.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FOOD_BURGER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FOOD_RICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * A utility class containing a list of {@code Order} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class TypicalOrders {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String ALICE_ID \u003d \"92c54d56-e971-407a-81e7-5df71c3c82fc\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String BENSON_ID \u003d \"e328789f-c707-49a9-8147-d93e213fb1d7\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String CARL_ID \u003d \"6c974f14-e5f5-4652-ba14-4df75e259b25\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String DANIEL_ID \u003d \"ec11e415-4794-44c2-9d29-861d359d8b76\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String ELLE_ID \u003d \"d0abc707-2363-46b2-8c45-92667f3d9e0e\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String FIONA_ID \u003d \"77bd3598-2d3a-450e-a37b-a79de94792dc\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String GEORGE_ID \u003d \"e7dc53e1-a1a0-4208-8f29-a6b24f215ff9\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String HOON_ID \u003d \"77bb5e80-d0ef-4898-b348-a63267c67385\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String IDA_ID \u003d \"df99ea87-75d9-4dba-82f8-2b11dca6789d\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String AMY_ID \u003d \"2760c196-a7ec-42c3-9bb4-ff0bbfd971c6\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final String BOB_ID \u003d \"2b3363a5-899f-4006-9cb6-cb016e3c20cd\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final Order ALICE \u003d new OrderBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "juxd"
        },
        "content": "            .withId(ALICE_ID)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withDate(\"01-10-2018 10:00:00\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withStatus(\"PENDING\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withFood(\"Roti Prata\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static final Order BENSON \u003d new OrderBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "juxd"
        },
        "content": "            .withId(BENSON_ID)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withDate(\"01-10-2018 10:00:00\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withStatus(\"PENDING\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withFood(\"Egg Fried Rice\", \"Milo\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final Order CARL \u003d new OrderBuilder().withId(CARL_ID).withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withAddress(\"wall street\").withDate(\"01-10-2018 10:00:00\").withStatus(\"PENDING\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withFood(\"Milkshake\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final Order DANIEL \u003d new OrderBuilder().withId(DANIEL_ID).withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withPhone(\"87652533\").withAddress(\"10th street\").withDate(\"01-10-2018 10:00:00\").withStatus(\"PENDING\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "juxd"
        },
        "content": "            .withFood(\"Fish and Chips\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final Order ELLE \u003d new OrderBuilder().withId(ELLE_ID).withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withAddress(\"michegan ave\").withDate(\"01-10-2018 10:00:00\").withStatus(\"PENDING\").withFood(\"Chicken Chop\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final Order FIONA \u003d new OrderBuilder().withId(FIONA_ID).withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withAddress(\"little tokyo\").withDate(\"01-10-2018 10:00:00\").withStatus(\"PENDING\").withFood(\"Tuna Sandwich\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final Order GEORGE \u003d new OrderBuilder().withId(GEORGE_ID).withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withAddress(\"4th street\").withDate(\"01-10-2018 10:00:00\").withStatus(\"PENDING\").withFood(\"Ice cream\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    //Manually added"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final Order HOON \u003d new OrderBuilder().withId(HOON_ID).withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withAddress(\"little india\").withDate(\"01-10-2018 10:00:00\").withStatus(\"PENDING\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withFood(\"Chocolate Milkshake\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final Order IDA \u003d new OrderBuilder().withId(IDA_ID).withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withAddress(\"chicago ave\").withDate(\"01-10-2018 10:00:00\").withStatus(\"PENDING\").withFood(\"Bubble Tea\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    // Manually added - Order\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final Order AMY \u003d new OrderBuilder().withId(AMY_ID).withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withPhone(VALID_PHONE_AMY).withAddress(VALID_ADDRESS_AMY).withDate(VALID_DATE_AMY).withStatus(\"PENDING\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "juxd"
        },
        "content": "            .withFood(VALID_FOOD_BURGER).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "juxd"
        },
        "content": "    public static final Order BOB \u003d new OrderBuilder().withId(BOB_ID).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            .withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB).withDate(VALID_DATE_BOB).withStatus(\"PENDING\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "juxd"
        },
        "content": "            .withFood(VALID_FOOD_RICE).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static final String KEYWORD_NAME_MATCHING_MEIER \u003d \"n/Meier\"; // A keyword name that matches MEIER"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    public static final String KEYWORD_PHONE_MATCHING_BENSON \u003d \"p/98765432\"; // A keyword phone that matches FIONA"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private TypicalOrders() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns an {@code OrderBook} with all the typical orders."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static OrderBook getTypicalOrderBook() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderBook ab \u003d new OrderBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        for (Order order : getTypicalOrders()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            ab.addOrder(order);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static List\u003cOrder\u003e getTypicalOrders() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 2,
      "juxd": 26,
      "rrtheonlyone": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/user/TypicalUsers.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.testutil.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.UsersList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * A utility class containing a list of {@code User} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class TypicalUsers {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final User ALICE_MANAGER \u003d new UserBuilder()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .withUsername(\"alicepauline\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .withPassword(\"alicepauline01\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final User BENSON_MANAGER \u003d new UserBuilder()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .withUsername(\"bensonmeier\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .withPassword(\"bensonmeier02\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final User CARL_MANAGER \u003d new UserBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .withUsername(\"carlkurz\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .withPassword(\"carlkurz03\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final User HOON_MANAGER \u003d new UserBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .withUsername(\"hoonmeier\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .withPassword(\"hoonmeier04\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final User IDA_MANAGER \u003d new UserBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .withUsername(\"idamueller\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .withPassword(\"idamueller05\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private TypicalUsers() {} // prevents instantiation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Returns an {@code UsersList} with all the typical users."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static UsersList getTypicalUsersList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        UsersList usersList \u003d new UsersList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        for (User user : getTypicalUsers()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "            usersList.addUser(user);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return usersList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static List\u003cUser\u003e getTypicalUsers() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_MANAGER, BENSON_MANAGER, CARL_MANAGER));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/user/UserBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.testutil.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Password;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Username;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * A utility class to help with building UsersList objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * {@code UsersList usersList \u003d new UserBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class UserBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String DEFAULT_USERNAME \u003d \"alicepauline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public static final String DEFAULT_PASSWORD \u003d \"alicepauline01\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Username username;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private Password password;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public UserBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        username \u003d new Username(DEFAULT_USERNAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        password \u003d new Password(DEFAULT_PASSWORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Initializes the UserBuilder with the data of {@code userToCopy}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public UserBuilder(User userToCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        name \u003d userToCopy.getName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        username \u003d userToCopy.getUsername();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        password \u003d userToCopy.getPassword();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Sets the {@code Name} of the {@code User} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public UserBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Sets the {@code Username} of the {@code User} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public UserBuilder withUsername(String username) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.username \u003d new Username(username);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Sets the {@code Password} of the {@code User} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public UserBuilder withPassword(String password) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.password \u003d new Password(password);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public User build() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return new User(name, username, password);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/user/UsersListBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package seedu.address.testutil.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.UsersList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * A utility class to help with building UsersList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " *     {@code UsersList usersList \u003d new UsersListBuilder().withUsers(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class UsersListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private UsersList usersList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public UsersListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        usersList \u003d new UsersList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public UsersListBuilder(UsersList usersList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        this.usersList \u003d usersList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Adds a new {@code User} to the {@code UsersListBuilder} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public UsersListBuilder withUser(User user) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        usersList.addUser(user);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public UsersList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        return usersList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.events.ui.OrderPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private OrderPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        selectionChangedEventStub \u003d new OrderPanelSelectionChangedEvent(ALICE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // associated web page of a common"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        URL expectedOrderUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(expectedOrderUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 6,
      "kohchihao": 1,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.OrderCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d OrderCommand.COMMAND_WORD + \" \" + ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String thirdCommand \u003d \"/order list\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 4,
      "-": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * A GUI unit test class for OrderBook."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/OrderCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysOrder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import guitests.guihandles.OrderCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order normalOrder \u003d new OrderBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderCard orderCard \u003d new OrderCard(normalOrder, 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uiPartRule.setUiPart(orderCard);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertCardDisplay(orderCard, normalOrder, 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order order \u003d new OrderBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderCard orderCard \u003d new OrderCard(order, 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // same order, same index -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderCard copy \u003d new OrderCard(order, 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(orderCard.equals(copy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(orderCard.equals(orderCard));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(orderCard.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(orderCard.equals(0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // different order, same index -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order differentOrder \u003d new OrderBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(orderCard.equals(new OrderCard(differentOrder, 0)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // same order, different index -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(orderCard.equals(new OrderCard(order, 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Asserts that {@code orderCard} displays the details of {@code expectedOrder} correctly and matches"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private void assertCardDisplay(OrderCard orderCard, Order expectedOrder, int expectedId) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderCardHandle orderCardHandle \u003d new OrderCardHandle(orderCard.getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(\"#\" + Integer.toString(expectedId), orderCardHandle.getId());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        // verify common details are displayed correctly"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertCardDisplaysOrder(expectedOrder, orderCardHandle);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 64,
      "kohchihao": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/OrderListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrders;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysOrder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import guitests.guihandles.OrderCardHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import guitests.guihandles.OrderListPanelHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.storage.XmlSerializableOrderBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class OrderListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final ObservableList\u003cOrder\u003e TYPICAL_ORDERS \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            FXCollections.observableList(getTypicalOrders());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "juxd"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private OrderListPanelHandle orderListPanelHandle;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        initUi(TYPICAL_ORDERS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_ORDERS.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            orderListPanelHandle.navigateToCard(TYPICAL_ORDERS.get(i));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            Order expectedOrder \u003d TYPICAL_ORDERS.get(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            OrderCardHandle actualCard \u003d orderListPanelHandle.getOrderCardHandle(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            assertCardDisplaysOrder(expectedOrder, actualCard);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            assertEquals(\"#\" + Integer.toString(i + 1), actualCard.getId());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        initUi(TYPICAL_ORDERS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "juxd"
        },
        "content": "        OrderCardHandle expectedPerson \u003d orderListPanelHandle.getOrderCardHandle(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderCardHandle selectedPerson \u003d orderListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code OrderListPanel} requires lesser than"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        ObservableList\u003cOrder\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        }, \"Creation and deletion of common cards exceeded time limit\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns a list of orders containing {@code orderCount} orders that is used to populate the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * {@code OrderListPanel}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private ObservableList\u003cOrder\u003e createBackingList(int orderCount) throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithOrders(orderCount);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        XmlSerializableOrderBook xmlOrderBook \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableOrderBook.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return FXCollections.observableArrayList(xmlOrderBook.toModelType().getOrderList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Returns a .xml file containing {@code orderCount} orders. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private Path createXmlFileWithOrders(int orderCount) throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        builder.append(\"\u003corderbook\u003e\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        for (int i \u003d 0; i \u003c orderCount; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "juxd"
        },
        "content": "            builder.append(\"\u003corders tag\u003d\\\"\" + UUID.randomUUID().toString() + \"\\\"\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            builder.append(\"\u003cdate\u003e01-10-2018 10:00:00\u003c/date\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            builder.append(\"\u003cstatus\u003ePENDING\u003c/status\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            builder.append(\"\u003cfood\u003emilo\u003c/food\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            builder.append(\"\u003c/orders\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        builder.append(\"\u003c/orderbook\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Path manyOrdersFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyOrders.xml\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        FileUtil.createFile(manyOrdersFile);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        FileUtil.writeToFile(manyOrdersFile, builder.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        manyOrdersFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return manyOrdersFile;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Initializes {@code orderListPanelHandle} with a {@code OrderListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code OrderListPanel}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private void initUi(ObservableList\u003cOrder\u003e backingList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        OrderListPanel orderListPanel \u003d new OrderListPanel(backingList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        uiPartRule.setUiPart(orderListPanel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        orderListPanelHandle \u003d new OrderListPanelHandle(getChildNode(orderListPanel.getRoot(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                OrderListPanelHandle.ORDER_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "juxd": 5,
      "rrtheonlyone": 121,
      "kohchihao": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.commons.events.model.OrderBookChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final OrderBookChangedEvent EVENT_STUB \u003d new OrderBookChangedEvent(new OrderBook());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 3,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import guitests.guihandles.OrderCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import guitests.guihandles.OrderListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static void assertCardEquals(OrderCardHandle expectedCard, OrderCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(expectedCard.getFood(), actualCard.getFood());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static void assertCardDisplaysOrder(Order expectedOrder, OrderCardHandle actualCard) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(expectedOrder.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(expectedOrder.getFood().stream().map(f -\u003e f.foodName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                actualCard.getFood());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Asserts that the list in {@code orderListPanelHandle} displays the details of {@code orders} correctly and"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static void assertListMatching(OrderListPanelHandle orderListPanelHandle, Order... orders) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        for (int i \u003d 0; i \u003c orders.length; i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            orderListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            assertCardDisplaysOrder(orders[i], orderListPanelHandle.getOrderCardHandle(i));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Asserts that the list in {@code orderListPanelHandle} displays the details of {@code orders} correctly and"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static void assertListMatching(OrderListPanelHandle orderListPanelHandle, List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertListMatching(orderListPanelHandle, orders.toArray(new Order[0]));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Asserts the size of the list in {@code orderListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static void assertListSize(OrderListPanelHandle orderListPanelHandle, int size) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        int numberOfPeople \u003d orderListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 20,
      "-": 48
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FOOD_DESC_BURGER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FOOD_DESC_RICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_ALICE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ALICE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.CARL;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.HOON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.AddCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.OrderCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.OrderDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.testutil.OrderUtil;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class AddCommandSystemTest extends OrderBookSystemTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Login */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String loginCommand \u003d LoginCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String command \u003d loginCommand + PREFIX_USERNAME + VALID_MANAGER_USERNAME_ALICE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        setUpOrderListPanel();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        /* Case: add an order to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Order toAdd \u003d new OrderBuilder(AMY).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String addCommand \u003d OrderCommand.COMMAND_WORD + \" \" + AddCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        command \u003d \"   \" + addCommand + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                + \"   \" + ADDRESS_DESC_AMY + \"   \" + DATE_DESC_AMY + \"  \" + FOOD_DESC_BURGER + \" \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.addOrder(toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        /* Case: add an order with all fields same as another order in the order book except name -\u003e added */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        toAdd \u003d new OrderBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        command \u003d addCommand + NAME_DESC_BOB + PHONE_DESC_AMY + ADDRESS_DESC_AMY + DATE_DESC_AMY"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                + FOOD_DESC_BURGER;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        /* Case: add an order with all fields same as another order in the address book except phone"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        toAdd \u003d new OrderBuilder(AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d OrderCommand.COMMAND_WORD + \" \" + OrderUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        deleteAllOrders();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertCommandSuccess(new OrderBuilder(ALICE).build());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        /* Case: add an order, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juxd"
        },
        "content": "        toAdd \u003d new OrderBuilder(BOB).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        command \u003d addCommand + DATE_DESC_BOB + FOOD_DESC_RICE + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        /* Case: add an order -\u003e added */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertCommandSuccess(new OrderBuilder(HOON).build());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        /* ------------------------ Perform add operation while an order card is selected --------------------------- */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        /* Case: selects first card in the order list, add an order -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        selectOrder(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertCommandSuccess(new OrderBuilder(CARL).build());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        /* Case: add a duplicate order -\u003e rejected */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d OrderCommand.COMMAND_WORD + \" \" + OrderUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        /* Case: add a duplicate order except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        toAdd \u003d new OrderBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d OrderCommand.COMMAND_WORD + \" \" + OrderUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        command \u003d addCommand + PHONE_DESC_AMY + ADDRESS_DESC_AMY + DATE_DESC_AMY + FOOD_DESC_BURGER;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        command \u003d addCommand + NAME_DESC_AMY + ADDRESS_DESC_AMY + DATE_DESC_AMY + FOOD_DESC_BURGER;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        /* Case: missing date -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        command \u003d addCommand + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + FOOD_DESC_BURGER;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        command \u003d addCommand + NAME_DESC_AMY + PHONE_DESC_AMY + DATE_DESC_AMY + FOOD_DESC_BURGER;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        /* Case: missing food -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        command \u003d addCommand + NAME_DESC_AMY + PHONE_DESC_AMY + DATE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        command \u003d \"adds \" + OrderUtil.getOrderDetails(toAdd);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        command \u003d addCommand + INVALID_NAME_DESC + PHONE_DESC_AMY + ADDRESS_DESC_AMY + DATE_DESC_AMY + FOOD_DESC_BURGER;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        command \u003d addCommand + NAME_DESC_AMY + INVALID_PHONE_DESC + ADDRESS_DESC_AMY + DATE_DESC_AMY + FOOD_DESC_BURGER;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        command \u003d addCommand + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_ADDRESS_DESC + DATE_DESC_AMY + FOOD_DESC_BURGER;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        /* Case: invalid date -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        command \u003d addCommand + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + INVALID_DATE_DESC + FOOD_DESC_BURGER;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertCommandFailure(command, OrderDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * {@code OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @see OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private void assertCommandSuccess(Order toAdd) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(OrderCommand.COMMAND_WORD + \" \" + OrderUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Order)}. Executes {@code command}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private void assertCommandSuccess(String command, Order toAdd) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedModel.addOrder(toAdd);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Order)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        setUpOrderListPanel();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * {@code OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @see OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 7,
      "juxd": 5,
      "rrtheonlyone": 61,
      "kohchihao": 19,
      "-": 147
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.OrderCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class ClearCommandSystemTest extends OrderBookSystemTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Login */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String loginCommand \u003d LoginCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String command \u003d loginCommand + PREFIX_USERNAME + VALID_MANAGER_USERNAME_ALICE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        setUpOrderListPanel();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String clearCommand \u003d OrderCommand.COMMAND_WORD + \" \" + ClearCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(\"   \" + clearCommand + \" ab12   \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: selects first card in common list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        selectOrder(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(clearCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(clearCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @see OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 7,
      "rrtheonlyone": 6,
      "kohchihao": 14,
      "-": 85
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 2,
      "-": 56
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.order.DeleteCommand.MESSAGE_DELETE_ORDER_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.testutil.TestUtil.getOrder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.DeleteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.OrderCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class DeleteCommandSystemTest extends OrderBookSystemTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private static final String DELETE_COMMAND \u003d OrderCommand.COMMAND_WORD + \" \" + DeleteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Login */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String loginCommand \u003d LoginCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String command \u003d loginCommand + PREFIX_USERNAME + VALID_MANAGER_USERNAME_ALICE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        setUpOrderListPanel();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: delete the first common in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        command \u003d \"     \" + DELETE_COMMAND + \"      \" + INDEX_FIRST.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "juxd"
        },
        "content": "        Order deletedOrder \u003d removeOrder(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_ORDER_SUCCESS, deletedOrder);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: delete the last common in the list -\u003e deleted */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: undo deleting the last common in the list -\u003e last common restored */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: redo deleting the last common in the list -\u003e last common deleted again */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        removeOrder(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: delete the middle common in the list -\u003e deleted */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* --------------------- Performing delete operation while a common card is selected ------------------------ */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: delete the selected common -\u003e common list panel selects the common before the deleted common */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        showAllOrders();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        selectOrder(selectedIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d DELETE_COMMAND + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        deletedOrder \u003d removeOrder(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_ORDER_SUCCESS, deletedOrder);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d DELETE_COMMAND + \" 0\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d DELETE_COMMAND + \" -1\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                getModel().getOrderBook().getOrderList().size() + 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d DELETE_COMMAND + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(DELETE_COMMAND + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(DELETE_COMMAND + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @return the removed common"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private Order removeOrder(Model model, Index index) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order targetOrder \u003d getOrder(model, index);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.deleteOrder(targetOrder);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return targetOrder;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Deletes the common at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order deletedOrder \u003d removeOrder(expectedModel, toDelete);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_ORDER_SUCCESS, deletedOrder);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                DELETE_COMMAND + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        setUpOrderListPanel();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 11,
      "juxd": 2,
      "rrtheonlyone": 24,
      "kohchihao": 23,
      "-": 130
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FOOD_DESC_BURGER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FOOD_DESC_RICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FOOD_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FOOD_BURGER;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_ALICE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDERS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.KEYWORD_NAME_MATCHING_MEIER;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.EditCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.OrderCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.common.Phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.Food;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.order.OrderDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.testutil.OrderUtil;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class EditCommandSystemTest extends OrderBookSystemTest {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String editCommand \u003d OrderCommand.COMMAND_WORD + \" \" + EditCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Login */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String loginCommand \u003d LoginCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String command \u003d loginCommand + PREFIX_USERNAME + VALID_MANAGER_USERNAME_ALICE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        setUpOrderListPanel();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Index index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        command \u003d \" \" + editCommand + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + DATE_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + FOOD_DESC_BURGER + \" \";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Order editedOrder \u003d new OrderBuilder(BOB).withFood(VALID_FOOD_BURGER).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(command, index, editedOrder);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: undo editing the last order in the list -\u003e last order restored */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: redo editing the last order in the list -\u003e last order edited again */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        model.updateOrder("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                getModel().getFilteredOrderList().get(INDEX_FIRST.getZeroBased()), editedOrder);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: edit a order with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d editCommand + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                + ADDRESS_DESC_BOB + FOOD_DESC_RICE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: edit a order with new values same as another order\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(getModel().getOrderBook().getOrderList().contains(BOB));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        index \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertNotEquals(getModel().getFilteredOrderList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d editCommand + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                + ADDRESS_DESC_BOB + FOOD_DESC_RICE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        editedOrder \u003d new OrderBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(command, index, editedOrder);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: edit a order with new values same as another order\u0027s values but with different phone -\u003e edited */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d editCommand + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + DATE_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                + ADDRESS_DESC_BOB + FOOD_DESC_RICE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        editedOrder \u003d new OrderBuilder(BOB).withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(command, index, editedOrder);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: edit a order with new values same as another order\u0027s values but with different date -\u003e edited */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d editCommand + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + DATE_DESC_AMY"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                + ADDRESS_DESC_BOB + FOOD_DESC_RICE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        editedOrder \u003d new OrderBuilder(BOB).withDate(VALID_DATE_AMY).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(command, index, editedOrder);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: edit a order with new values same as another order\u0027s values but with different phone and date"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        index \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d editCommand + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + DATE_DESC_AMY"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                + ADDRESS_DESC_BOB + FOOD_DESC_RICE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        editedOrder \u003d new OrderBuilder(BOB).withPhone(VALID_PHONE_AMY).withDate(VALID_DATE_AMY).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(command, index, editedOrder);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: clear food -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d editCommand + \" \" + index.getOneBased() + \" \" + PREFIX_FOOD.getPrefix();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(command, Food.MESSAGE_FOOD_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: filtered order list, edit index within bounds of order book and order list -\u003e edited */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "juxd"
        },
        "content": "        showOrdersWithName(KEYWORD_NAME_MATCHING_MEIER);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredOrderList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d editCommand + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        Order orderToEdit \u003d getModel().getFilteredOrderList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        editedOrder \u003d new OrderBuilder(orderToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(command, index, editedOrder);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: filtered order list, edit index within bounds of order book but out of bounds of order list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "juxd"
        },
        "content": "        showOrdersWithName(KEYWORD_NAME_MATCHING_MEIER);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        int invalidIndex \u003d getModel().getOrderBook().getOrderList().size();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertCommandFailure(editCommand + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "juxd"
        },
        "content": "                Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* --------------------- Performing edit operation while a order card is selected -------------------------- */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: selects first card in the order list, edit a order -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        showAllOrders();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        selectOrder(index);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d editCommand + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + DATE_DESC_AMY"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                + ADDRESS_DESC_AMY + FOOD_DESC_BURGER;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        // browser\u0027s url is updated to reflect the new order\u0027s name"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(editCommand + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(editCommand + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredOrderList().size() + 1;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(editCommand + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(editCommand + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(editCommand + \" \" + INDEX_FIRST.getOneBased(),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(editCommand + \" \" + INDEX_FIRST.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(editCommand + \" \" + INDEX_FIRST.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: invalid date -\u003e rejected */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(editCommand + \" \" + INDEX_FIRST.getOneBased() + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                OrderDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(editCommand + \" \" + INDEX_FIRST.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: invalid food -\u003e rejected */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(editCommand + \" \" + INDEX_FIRST.getOneBased() + INVALID_FOOD_DESC,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                Food.MESSAGE_FOOD_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: edit a order with new values same as another order\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        executeCommand(OrderCommand.COMMAND_WORD + \" \" + OrderUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertTrue(getModel().getOrderBook().getOrderList().stream().anyMatch(x -\u003e x.isSameOrder(BOB)));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertFalse(getModel().getFilteredOrderList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d editCommand + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                + ADDRESS_DESC_BOB + FOOD_DESC_RICE;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: edit a order with new values same as another order\u0027s values but with different food -\u003e rejected */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d editCommand + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                + ADDRESS_DESC_BOB + FOOD_DESC_BURGER;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: edit a order with new values same as another order\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d editCommand + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + DATE_DESC_BOB"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                + ADDRESS_DESC_AMY + FOOD_DESC_RICE;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Order editedOrder) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedOrder, null);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the order at index {@code toEdit} being"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * updated to values specified {@code editedOrder}.\u003cbr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Order editedOrder,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.updateOrder(expectedModel.getFilteredOrderList().get(toEdit.getZeroBased()), editedOrder);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_ORDER_SUCCESS, editedOrder), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * {@code OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * @see OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * @see OrderBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        setUpOrderListPanel();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains an equivalent last object."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertEquals(new OrderBook(expectedModel.getOrderBook()).getOrderList().size(),"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                testApp.readStorageOrderBook().getOrderList().size());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertListMatching(getOrderListPanel(), expectedModel.getFilteredOrderList());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * {@code OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * @see OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 127,
      "juxd": 11,
      "kohchihao": 43,
      "-": 149
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class ErrorDialogGuiTest extends OrderBookSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                alertDialog.getContentText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ORDER_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ORDERS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FOOD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.BENSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.CARL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.DANIEL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.KEYWORD_NAME_MATCHING_MEIER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.KEYWORD_PHONE_MATCHING_BENSON;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.DeleteCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.FindCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.OrderCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.model.order.Food;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "public class FindCommandSystemTest extends OrderBookSystemTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String findCommand \u003d OrderCommand.COMMAND_WORD + \" \" + FindCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Login */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String loginCommand \u003d LoginCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String command \u003d loginCommand + PREFIX_USERNAME + VALID_MANAGER_USERNAME_ALICE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        setUpOrderListPanel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find multiple persons in order book by name, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         * -\u003e 2 orders found"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        command \u003d \"   \" + findCommand + \" \" + KEYWORD_NAME_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: repeat previous find command where order list is displaying the persons we are finding"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         * -\u003e 2 order found"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + KEYWORD_NAME_MATCHING_MEIER;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: find single common in order book by phone, command with leading spaces and trailing spaces */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d \"    \" + findCommand + \" \" + KEYWORD_PHONE_MATCHING_BENSON + \"   \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: repeat previous find command where order list is displaying the persons we are finding */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + KEYWORD_PHONE_MATCHING_BENSON;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: find common name where order list is not displaying the order we are finding -\u003e 1 order found */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + PREFIX_NAME + \"Carl\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: find common phone where order list is not displaying the order we are finding -\u003e 1 order found */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + PREFIX_PHONE + \"98765432\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find multiple orders by name in order book, 2 keywords -\u003e 2 orders found */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + PREFIX_NAME + \"Benson Daniel\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find multiple orders by name in order book, 2 keywords in reversed order -\u003e 2 orders found */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + PREFIX_NAME + \"Daniel Benson\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find multiple orders by name in order book, 2 keywords with 1 repeat -\u003e 2 orders found */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + PREFIX_NAME + \"Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find multiple orders by name in order book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         * -\u003e 2 orders found"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + PREFIX_NAME + \"Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find single order by phone in order book, with leading and trailing whitespace"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         * -\u003e 1 order found"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + PREFIX_PHONE + \"  98765432  \";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find single order by phone in order book, single space in between."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         * -\u003e 1 order found"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + PREFIX_PHONE + \"9876 5432\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find single order by phone in order book, spaces in between."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         * -\u003e 1 order found"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + PREFIX_PHONE + \"9876    5432\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find same orders in order book after deleting 1 of them -\u003e 1 order found */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        executeCommand(OrderCommand.COMMAND_WORD + \" \" + DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertFalse(getModel().getOrderBook().getOrderList().contains(BENSON));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + KEYWORD_NAME_MATCHING_MEIER;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find name in order book, keyword is same as name but of different case -\u003e 1 order found */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + PREFIX_NAME + \"MeIeR\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find name in order book, keyword is substring of name -\u003e 0 orders found */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + PREFIX_NAME + \"Mei\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find name in order book, name is substring of keyword -\u003e 0 orders found */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + PREFIX_NAME + \"Meiers\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find name not in order book -\u003e 0 orders found */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + PREFIX_NAME + \"Mark\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find address of order in order book -\u003e Invalid Command */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + PREFIX_ADDRESS + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_ORDER_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find food of order in order book -\u003e Invalid Command */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        List\u003cFood\u003e food \u003d new ArrayList\u003c\u003e(DANIEL.getFood());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + PREFIX_FOOD + food.get(0).foodName;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_ORDER_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find phone in order book, keyword is substring of phone -\u003e 0 orders found */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + PREFIX_PHONE + \"8765\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find phone not in order book -\u003e 0 orders found */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + PREFIX_PHONE + \"4243587470\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find by name while an order is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        showAllOrders();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        selectOrder(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(getOrderListPanel().getHandleToSelectedCard().getFood().equals(DANIEL.getFood()));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + PREFIX_NAME + \"Daniel\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find order by name in empty order book -\u003e 0 orders found */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        deleteAllOrders();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + KEYWORD_NAME_MATCHING_MEIER;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        /* Case: find order by phone in empty order book -\u003e 0 orders found */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        deleteAllOrders();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d findCommand + \" \" + KEYWORD_PHONE_MATCHING_BENSON;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d \"/order FiNd \" + PREFIX_NAME + \"Meier\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * box displays {@code Messages#MESSAGE_ORDERS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * {@code OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * @see OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "                MESSAGE_ORDERS_LISTED_OVERVIEW, expectedModel.getFilteredOrderList().size());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * {@code OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * @see OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 115,
      "rrtheonlyone": 3,
      "kohchihao": 16,
      "-": 131
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.OrderCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.SelectCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class HelpCommandSystemTest extends OrderBookSystemTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Login */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String loginCommand \u003d LoginCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String command \u003d loginCommand + PREFIX_USERNAME + VALID_MANAGER_USERNAME_ALICE"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        setUpOrderListPanel();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        executeCommand(OrderCommand.COMMAND_WORD + \" \" + SelectCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "juxd"
        },
        "content": "                + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertListMatching(getOrderListPanel(), getModel().getFilteredOrderList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        executeCommand(OrderCommand.COMMAND_WORD + \" \" + DeleteCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "juxd"
        },
        "content": "                + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 5,
      "juxd": 3,
      "rrtheonlyone": 2,
      "kohchihao": 12,
      "-": 90
    }
  },
  {
    "path": "src/test/java/systemtests/LoginCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_HOON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_KENNY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_HOON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_KENNY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.LoginCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.LoginCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class LoginCommandSystemTest extends OrderBookSystemTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void cannotLoginAfterLogin() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String loginCommand \u003d LoginCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: Successful login, correct username and password */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String command \u003d loginCommand + PREFIX_USERNAME + VALID_MANAGER_USERNAME_ALICE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                MESSAGE_SUCCESS, \"Username: \" + VALID_MANAGER_USERNAME_ALICE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: Attempt to login after successful login */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        command \u003d loginCommand + PREFIX_USERNAME + VALID_MANAGER_USERNAME_HOON"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_HOON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        expectedResultMessage \u003d String.format(LoginCommand.MESSAGE_ALREADY_LOGGED_IN,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                VALID_MANAGER_USERNAME_ALICE) + \"\\n\" + LoginCommand.MESSAGE_REDIRECT_TO_LOGOUT;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void login() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String loginCommand \u003d LoginCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: Successful login, correct username and password */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String command \u003d loginCommand + PREFIX_USERNAME + VALID_MANAGER_USERNAME_ALICE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                MESSAGE_SUCCESS, \"Username: \" + VALID_MANAGER_USERNAME_ALICE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void login_fail_wrongPassword() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String loginCommand \u003d LoginCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: Fail to login, wrong password */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String command \u003d loginCommand + PREFIX_USERNAME + VALID_MANAGER_USERNAME_ALICE"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_BENSON;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                MESSAGE_FAILURE, \"Username: \" + VALID_MANAGER_USERNAME_ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void login_fail_userNotExist() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String loginCommand \u003d LoginCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: Fail to login, wrong password */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String command \u003d loginCommand + PREFIX_USERNAME + VALID_MANAGER_USERNAME_KENNY"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_KENNY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                MESSAGE_FAILURE, \"Username: \" + VALID_MANAGER_USERNAME_KENNY);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * box displays {@code Messages#MESSAGE_ORDERS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * {@code OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @see OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        setUpOrderListPanel();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * {@code OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @see OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 121
    }
  },
  {
    "path": "src/test/java/systemtests/LogoutCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.LoginCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.LogoutCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class LogoutCommandSystemTest extends OrderBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void logout() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String loginCommand \u003d LoginCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: Successful login, correct username and password */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String command \u003d loginCommand + PREFIX_USERNAME + VALID_MANAGER_USERNAME_ALICE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                MESSAGE_SUCCESS, \"Username: \" + VALID_MANAGER_USERNAME_ALICE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Logout with user*/"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        command \u003d LogoutCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandSuccess(command, expectedModel, LogoutCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Logout with no logged in user */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        command \u003d LogoutCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandFailure(command, LogoutCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * box displays {@code Messages#MESSAGE_ORDERS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * {@code OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @see OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * {@code OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @see OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 74
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static final Predicate\u003cOrder\u003e PREDICATE_MATCHING_NO_ORDERS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cOrder\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Optional\u003cPredicate\u003cOrder\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        model.updateFilteredOrderList(predicate.orElse(PREDICATE_MATCHING_NO_ORDERS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public static void setFilteredList(Model model, Order... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    private static Predicate\u003cOrder\u003e getPredicateMatching(Order other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return order -\u003e order.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 8,
      "-": 31
    }
  },
  {
    "path": "src/test/java/systemtests/OrderBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import guitests.guihandles.OrderListPanelHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.ClearCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.FindCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.ListCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.OrderCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.SelectCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.testutil.TypicalOrders;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " * A system test class for OrderBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public abstract class OrderBookSystemTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "juxd"
        },
        "content": "    protected TestApp testApp;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "juxd"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    protected OrderBook getInitialData() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return TypicalOrders.getTypicalOrderBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public OrderListPanelHandle getOrderListPanel() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        return mainWindowHandle.getOrderListPanel();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    protected void setUpOrderListPanel() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        mainWindowHandle.setOrderListPanel();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        getOrderListPanel().rememberSelectedOrderCard();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertListMatching(getOrderListPanel(), getModel().getFilteredOrderList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Displays all order in the address book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    protected void showAllOrders() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        executeCommand(OrderCommand.COMMAND_WORD + \" \" + ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(getModel().getOrderBook().getOrderList().size(), getModel().getFilteredOrderList().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "     * Displays all orders with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "    protected void showOrdersWithName(String keyword) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        executeCommand(OrderCommand.COMMAND_WORD + \" \" + FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertTrue(getModel().getFilteredOrderList().size() \u003c getModel().getOrderBook().getOrderList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Selects the order at {@code index} of the displayed list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    protected void selectOrder(Index index) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        executeCommand(OrderCommand.COMMAND_WORD + \" \" + SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(index.getZeroBased(), getOrderListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Deletes all orders in the order book."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    protected void deleteAllOrders() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        executeCommand(OrderCommand.COMMAND_WORD + \" \" + ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(0, getModel().getOrderBook().getOrderList().size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same order objects as {@code expectedModel}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * and the order list panel displays the orders in the model correctly."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertEquals(new OrderBook(expectedModel.getOrderBook()), testApp.readStorageOrderBook());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        //assertListMatching(getOrderListPanel(), expectedModel.getFilteredOrderList());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code OrderListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * of the previously selected common."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(getOrderListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the common list panel remain unchanged."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @see OrderListPanelHandle#isSelectedOrderCardChanged() ()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertFalse(getOrderListPanel().isSelectedOrderCardChanged());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 13,
      "juxd": 2,
      "rrtheonlyone": 27,
      "kohchihao": 7,
      "-": 212
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class SampleDataTest extends OrderBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    protected OrderBook getInitialData() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public void orderBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Login */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String loginCommand \u003d LoginCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String command \u003d loginCommand + PREFIX_USERNAME + VALID_MANAGER_USERNAME_ALICE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        setUpOrderListPanel();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Order[] expectedList \u003d SampleDataUtil.getSampleOrders();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertListMatching(getOrderListPanel(), expectedList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 7,
      "kohchihao": 12,
      "-": 44
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import static seedu.address.logic.commands.order.SelectCommand.MESSAGE_SELECT_ORDER_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "juxd"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.OrderCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "import seedu.address.logic.commands.order.SelectCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "public class SelectCommandSystemTest extends OrderBookSystemTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Login */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String loginCommand \u003d LoginCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String command \u003d loginCommand + PREFIX_USERNAME + VALID_MANAGER_USERNAME_ALICE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        setUpOrderListPanel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        String selectCommand \u003d OrderCommand.COMMAND_WORD + \" \" + SelectCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: select the first card in the common list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        command \u003d \"   \" + selectCommand + \" \" + INDEX_FIRST.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: select the last card in the common list -\u003e selected */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        Index orderCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d selectCommand + \" \" + orderCount.getOneBased();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertCommandSuccess(command, orderCount);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: select the middle card in the common list -\u003e selected */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d selectCommand + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        /* Case: filtered common list, select index within bounds of order book and common list -\u003e selected */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredOrderList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        command \u003d selectCommand + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(selectCommand + \" \" + 0,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(selectCommand + \" \" + -1,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        int invalidIndex \u003d getModel().getFilteredOrderList().size() + 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(selectCommand + \" \" + invalidIndex, MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(selectCommand + \" abc\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jinyingtan"
        },
        "content": "        assertCommandFailure(selectCommand + \" 1 abc\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "juxd"
        },
        "content": "        /* Case: select from empty order book -\u003e rejected */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        deleteAllOrders();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "juxd"
        },
        "content": "        assertCommandFailure(selectCommand + \" \" + INDEX_FIRST.getOneBased(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected common.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "                MESSAGE_SELECT_ORDER_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getOrderListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        setUpOrderListPanel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "     * @see OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        setUpOrderListPanel();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jinyingtan": 12,
      "juxd": 4,
      "rrtheonlyone": 13,
      "kohchihao": 21,
      "-": 109
    }
  },
  {
    "path": "src/test/java/systemtests/SignUpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PASSWORD_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_NAME_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_NAME_HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_NAME_IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_HOON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_PASSWORD_IDA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_HOON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_USERNAME_IDA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.LoginCommand.MESSAGE_ALREADY_LOGGED_IN;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.LoginCommand.MESSAGE_REDIRECT_TO_LOGOUT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.SignUpCommand.MESSAGE_DUPLICATE_USER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.SignUpCommand.MESSAGE_LOGGED_IN;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.commands.SignUpCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.model.common.Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.model.common.Password.MESSAGE_PASSWORD_CONSTRAINTS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import static seedu.address.model.common.Username.MESSAGE_USERNAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.logic.commands.SignUpCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.model.user.User;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "import seedu.address.testutil.user.UserBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "public class SignUpCommandSystemTest extends OrderBookSystemTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private String signupCommand \u003d SignUpCommand.COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void cannotSignupAfterSignup() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String command \u003d signupCommand + PREFIX_NAME + VALID_MANAGER_NAME_IDA"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_USERNAME + VALID_MANAGER_USERNAME_IDA"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_IDA;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User ida \u003d new UserBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withName(VALID_MANAGER_NAME_IDA)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withUsername(VALID_MANAGER_USERNAME_IDA)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withPassword(VALID_MANAGER_PASSWORD_IDA)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_SUCCESS, ida)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + MESSAGE_LOGGED_IN;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        command \u003d signupCommand + PREFIX_NAME + VALID_MANAGER_NAME_HOON"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_USERNAME + VALID_MANAGER_USERNAME_HOON"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_HOON;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        User hoon \u003d new UserBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withName(VALID_MANAGER_NAME_HOON)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withUsername(VALID_MANAGER_USERNAME_HOON)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .withPassword(VALID_MANAGER_PASSWORD_HOON)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_ALREADY_LOGGED_IN, ida.getUsername())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + MESSAGE_REDIRECT_TO_LOGOUT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void signup_exisitingUser_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String command \u003d signupCommand + PREFIX_NAME + VALID_MANAGER_NAME_ALICE"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_USERNAME + VALID_MANAGER_USERNAME_ALICE"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandFailure(command, MESSAGE_DUPLICATE_USER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void signup_invalidName_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String command \u003d signupCommand + PREFIX_NAME + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_USERNAME + VALID_MANAGER_USERNAME_ALICE"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandFailure(command, MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void signup_invalidUsername_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String command \u003d signupCommand + PREFIX_NAME + VALID_MANAGER_NAME_ALICE"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_USERNAME + INVALID_USERNAME_DESC"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + VALID_MANAGER_PASSWORD_ALICE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandFailure(command, MESSAGE_USERNAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    public void signup_invalidPassword_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        String command \u003d signupCommand + PREFIX_NAME + VALID_MANAGER_NAME_ALICE"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_USERNAME + VALID_MANAGER_USERNAME_ALICE"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "                + \" \" + PREFIX_PASSWORD + INVALID_PASSWORD_DESC;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandFailure(command, MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * box displays {@code Messages#MESSAGE_ORDERS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * {@code OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @see OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * {@code OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     * @see OrderBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kohchihao"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kohchihao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kohchihao": 151
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "import seedu.address.model.ReadOnlyOrderBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyOrderBook\u003e orderBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(orderBook, saveFileLocation));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 3,
      "-": 71
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml\" type\u003d\"seedu.address.ui.TestFxmlObject\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 3,
      "-": 4
    }
  }
]
