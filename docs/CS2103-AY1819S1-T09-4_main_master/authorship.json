[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d Car Park Finder"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-T09-4/main[image:https://travis-ci.org/CS2103-AY1819S1-T09-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "https://ci.appveyor.com/project/ZhuanYu/main/branch/master[image:https://ci.appveyor.com/api/projects/status/f9hvilg7n554igd4/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-T09-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-T09-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Car Park Finder is an application for all car owners seeking a hassle-free way to find HDB (Housing Development Board) car parks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "It has a GUI (Graphic User Interface) but most of the user interactions happen using the CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* It is a Java application developed by us using data provided by https://data.gov.sg[Data.gov.sg]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* Features"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "** A sophisticated GUI that includes a list panel and an in-built Browser."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "** Test cases, including automated GUI testing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "** Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Some parts of this sample application were inspired by the excellent Java FX tutorial by Marco Jakob."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* This application was morphed from https://github.com/se-edu/addressbook-level4[Address Book level 4], a project created by the SE-EDU initiative."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Libraries used: https://github.com/google/gson[Gson],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 4,
      "-": 23,
      "ZhuanYu": 11
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"githubId\": \"Alvinnyk\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"displayName\": \"ALVIN...N KIT\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"authorNames\": [\"Alvinnyk\", \"AeroSpectr3\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"githubId\": \"Lexzt\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"displayName\": \"FONG ...ZHONG\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"authorNames\": [\"Lexzt\", \"Keith Fong\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"githubId\": \"YurouTang\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"displayName\": \"TANG ...YUROU\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"authorNames\": [\"YurouTang\", \"Tang Yurou\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"githubId\": \"dlworldpeace\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"displayName\": \"XIAO ...ELONG\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"authorNames\": [\"dlworldpeace\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"githubId\": \"ZhuanYu\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"displayName\": \"YEO Z...AN YU\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"authorNames\": [\"ZhuanYu\", \"Zhuan Yu\", \"Yeo Zhuan Yu\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "mainClassName \u003d \u0027seedu.parking.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\timplementation \u0027com.google.code.gson:gson:2.8.5\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    archiveName \u003d \u0027carparkfinder.jar\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            test.include \u0027seedu/parking/**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            test.include \u0027seedu/parking/ui/**\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            test.exclude \u0027seedu/parking/ui/**\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u0027site-name\u0027: \u0027Car Park Finder\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-T09-4/main\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 239,
      "ZhuanYu": 8
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "We are Team T09-4 and based in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "This Java application is developed for CS2103T Software Engineering."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Damith C. Rajapakse"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::damithc.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "{empty}[http://www.comp.nus.edu.sg/~damithch[homepage]] [https://github.com/damithc[github]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Eugene Peh"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "image::eugenepeh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "{empty}[https://github.com/eugenepeh[github]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Fong Zhi Zhong"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "image::keith.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "{empty}[https://github.com/dlworldpeace[github]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Role: Team Leader +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Threading"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* UI"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Scheduling and tracking"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Yeo Zhuan Yu"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "image::zhuanyu.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "{empty}[https://github.com/ZhuanYu[github]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Data and API"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Deliverables and deadlines"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Tang Yurou"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "image::yurou2.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "{empty}[https://github.com/YurouTang[github]]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Commands"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Documentation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Xiao Delong"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "image::delong.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "{empty}[https://github.com/dlworldpeace[github]]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Logic"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Testing"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Alvin Ng"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "image::alvin.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "{empty}[https://github.com/yijinl[github]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Data"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Code quality"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Integration"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YurouTang": 17,
      "-": 37,
      "ZhuanYu": 36
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-T09-4/main/issues[issue tracker]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "if you noticed bugs or have suggestions on how to improve."
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "ZhuanYu": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d Car Park Finder - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T09-4/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "By: `Team T09-4`      Since: `Oct 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Welcome to Car Park Finder\u0027s developer guide!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d What is Car Park Finder"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Car Park Finder is an application to find HDB (Housing Development Board) car parks in Singapore. It allows you to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "work with a *Command Line Interface (CLI)* to display a list of car parks by typing. It enables the following:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* Viewing of car park information through typing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* Searching and filtering by location and keywords."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "This section describes the steps needed to set up the application."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "IntelliJ has Gradle and JavaFx plugins installed by default. +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ". Fork this repository and clone the fork to your computer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "dialog first)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Open a console and run the command `gradlew processResources`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "(Mac/Linux: `./gradlew processResources`). It should finish"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedCarpark.java[`XmlAdaptedCarpark.java`]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "and link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. kbd:[ALT + ENTER]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Repeat this for the test folder as well"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "(e.g. check link:{repoURL}/src/test/java/seedu/address/commons/util/XmlUtilTest.java[`XmlUtilTest.java`]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "and link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "and if so, resolve it the same way)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* Run the `seedu.parking.MainApp` and try a few commands"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Here are some tips to before writing code for an easier time."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "This section explains the design architecture and various components of the system."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d Architecture overview"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "This section explains the design architecture used by the entire system."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": " which contains 6 \u003c\u003cArchitecture-Components,*`architecture components`*\u003e\u003e and"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": " adopts an \u003c\u003cArchitecture-design,*`events-driven nature`*\u003e\u003e."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "[[Architecture-Components]]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d Architecture components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "This section will briefly introduce the function of each architecture components"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "as well as common behaviours."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ".Architecture Components"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|Component |Main Function"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003c\u003cDesign-Main,*`Main`*\u003e\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|the starting point of the system, which encapsulates the other components."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|represents a collection of classes used by multiple components."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003c\u003cDesign-Ui,*`User Interface`*\u003e\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|contains the user interface classes used by the application."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|execute user commands, also known as the command executor."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003c\u003cDesign-Model,*`Model`*\u003e\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|holds the data of the application in-memory."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|which allows reading and writing of data to the hard disk."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Each of the User Interface, Logic, Model, Storage Components also:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "For example, the `Logic` component (see the *_Class Diagram_* given below) defines it\u0027s API in the `Logic` interface and exposes its functionality using the `LogicManager` class."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "[[Architecture-design]]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d Events-driven nature of the design"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "This section explains the main nature of design adopted by the system."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "The *_Sequence Diagram_* below shows how the components interact when the user issues the command `delete 1`."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Note how the `Model` simply raises a `CarparkFinderChangedEvent` when the Car Park Finder data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "The *_Sequence Diagram_* below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how the Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "[[Design-Main]]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d Main component"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The `Main` component consists of only one class, link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* At app launch: initializes the components in the correct sequence, and connects them with one another."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* At shut down: shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d Commons component"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The `Commons` component consists of classes used by multiple other components. Two of these classes play important roles at the architectural level."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Classes used by multiple components are put in the seedu.carparkfinder.commons package."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d User interface component"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The `User Interface` (`UI`) component consists of a `MainWindow` that is made up of different parts."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The base class"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`] uses _JavaFx UI_ framework."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Please refer to the *_Class Diagram_* below for more details on how they are connected."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".Structure of the User Interface component"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "In general, this is the workflow of the `UI` component:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Execute user commands using the `Logic` component."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ". Bind itself to some data in the `Model` so that the `UI` components can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ". Respond to events raised from various parts of the App and updates the `UI` components accordingly."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "All `UI` parts, including the `MainWindow`, inherit from the abstract `UiPart` class. The layout for each"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "component is defined in matching `.fxml` files and can be found in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The `Logic` component consist of a `LogicManager` that takes care of the parse and exexcution of commands."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "It inherits the base class link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Please refer to the *_Class Diagram_* below for more details on how they are connected."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "In general, this is the workflow of the `Logic` component:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".  Get the `CarparkFinderParser` class to parse the user command."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".  Create a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".  Pass the result of the command execution over to `Model`, which can affect it (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ".  Return the command execution by encapsulating the command as a `CommandResult` object which then is passed back to the `UI`."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "The *_Sequence Diagram_* below shows the interactions within the `Logic` component"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "when `execute(\"delete 1\")` is called."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ".Sequence Diagram of of `execute(\"delete 1\")"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The `Model` component is managed by the `ModelManager` that stores the data of Car Park Finder."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "It does not depend on any of the three other components."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`] is the base class."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Please refer to the *_Class Diagram_* below for more details."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "In general, this is the structure of the `Model` Component:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* The `ModelManager` extends the `Model` Interface."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* It stores a `VersionedCarparkFinder` and a `UserPref` object."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "** The `UserPref` object represents the user\u0027s preferences."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** The `VersionedCarparkFinder` contains a `carparkFinderStateList` which is used to store multiple `Carpark` objects."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* The `ModelManager` also manages a filtered list of `Carpark` objects filtered from the `carparkFinderStateList`."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* The `Model component` exposes an unmodifiable `ObservableList\u003cCarpark\u003e` that can be \u0027observed\u0027"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "e.g. the UI can be bound to this list so that it automatically updates when data in the list changes."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "As a OOP model, we can store a `Tag` list in Car Park Finder, which `Carpark` can reference."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "This would allow Car Park Finder to only require one `Tag` object per unique `Tag`, instead of"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "each `Carpark` needing their own `Tag` object. An example of how such a model may look like is given below."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ".Use of Tag object"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "image::ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The `Storage` component, managed by the `StorageManager`, serves as a backend storage for data of Car Park Finder."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`] is the base class."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Please refer to the *_Class Diagram_* below for more details on how they are connected."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The `Storage` component can perform the following functions:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* save the Car Park Finder data in xml format and read it back."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Query feature"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "The query features updates the car park information."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The query mechanism does an API call to the website `data.gov.sg` to obtain car park information in `JSON` format."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "An external library `Gson` is used to parse the data in `GsonUtil`. The data is stored internally as a `CarparkJson` object."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Some notable methods that `GsonUtil` implement are:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* `GsonUtil#getCarparkData()` — Get the basic car park information from the API."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* `GsonUtil#getCarparkAvailability()` — Get the total number of parking lots as well as the availability of the parking lots from another API."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* `GsonUtil#fetchCarparkInfo()` — Return a list of car parks with populated data."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Only `GsonUtil#fetchCarparkInfo()` is exposed in `QueryCommand`, inside `QueryCommand#readCarpark()` method."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "A local copy of the car park information is saved at the end. The user only needs to execute this command to get the latest information."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Given below is an example usage scenario of how the query mechanism behaves at each step."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Step 1. The user launches the application but initial car park finder state might not be up-to-date"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "with those published on `data.gov.sg`."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Step 2. The user executes the `query` command to fetch the latest data. The `query` command calls"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "`GsonUtil#fetchCarparkInfo()` which in turn runs `GsonUtil#getCarparkData()` and `GsonUtil#getCarparkAvailability()`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Step 3. The user waits for data to be updated. `GsonUtil#getCarparkData()` establishes a connection with the API"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "to read `JSON` data containing basic car park information."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "If `GsonUtil#getCarparkData()` fails to read from the API, IOException would be thrown."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Step 4. The `JSON` data is parsed using `Gson` library and stored inside `CarparkJson`. A `HashSet` is used to consolidate"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "all the car parks and prevent duplicate entries."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Step 5. Once `GsonUtil#getCarparkData()` is done getting all the basic car park information,"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "`GsonUtil#getCarparkAvailability()` retrieves additional details of the parking lot. The process is similar to how `GsonUtil#getCarparkData()` retrieves data from the API."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Step 6. `GsonUtil#getCarparkAvailability()` appends the additional the parking lot details using `CarparkJson#addOn()`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Step 7. Next, a final check is done to see if there is any car park with no parking lot data. The value 0 is added if there is no data."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Step 8. Finally an `ArrayList\u003cArrayList\u003cString\u003e\u003e` is returned from `GsonUtil#fetchCarparkInfo()` to update the car park finder state."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "YurouTang"
        },
        "content": " The line of text at the bottom of the application then will show that the application is updated."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Please refer to the _Sequence Diagram_ below for the `query` operation."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ".Interactions for query operation"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "image::zy_seq.png[width\u003d\"800\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How query executes"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* **Alternative 1 (current choice):** Wait for data to be queried sequentially."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Pros| Easy to implement."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Cons| Application hangs while data is being queried."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//** Pros: Easy to implement."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//** Cons: Application hangs while data is being queried."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* **Alternative 2 :** Data is queried using a separate thread."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Pros| Application can continue to function as the data is being fetched in the background."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Cons| Reading the car park list while querying might cause unintended side effects if not handled properly."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//** Pros: Application can continue to function as the data is being fetched in the background."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//** Cons: Reading the car park list while querying might cause unintended side effects if not handled properly."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support query command"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* **Alternative 1 (current choice):** Use `ArrayList\u003cArrayList\u003cString\u003e\u003e` to store car park information."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Pros| Easy to maintain and iterate through an array list of array lists to get a specific car park."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Cons| Using an `ArrayList\u003cArrayList\u003cString\u003e\u003e` can be confusing and unintuitive. Accessing elements is also not that efficient."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//** Pros: Easy to maintain and iterate through an array list of array lists to get a specific car park."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//** Cons: Using an `ArrayList\u003cArrayList\u003cString\u003e\u003e` can be confusing and unintuitive. Accessing elements is also not that efficient."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* **Alternative 2 :** Use a `HashMap\u003cString,Carpark\u003e` to store data."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Pros| Much more efficient in accessing elements by using a key and better code readability."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Cons| `HashMap` does not provide an ordered collection."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//** Pros: Much more efficient in accessing elements by using a key and better code readability."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//** Cons: `HashMap` does not provide an ordered collection."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d [Propose] Notify feature"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "The notify feature updates specific car parks."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The notify mechanism will fetch data from the API every interval. The interval can be set in terms of seconds/minutes"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "and is used in conjunction with the `select` command."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "This means that it will only notify the current selected car park only, and not all the car parks."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "_This feature is coming in v2.0._"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ".Summary for executing a notify command"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "image::zy_act.png[width\u003d\"800\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How notify executes"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* **Alternative 1 (current choice):** Set an interval for data to be queried sequentially."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Pros| Easy to implement."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Cons| Performance issues as the application might stall."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//** Pros: Easy to implement."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//** Cons: Performance issues as the application might stall."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* **Alternative 2 :** Data is queried using a separate thread every interval."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Pros| Application can be used as the data is being fetched in the background."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Cons| Reading the car park list while querying might cause unintended side effects if not handled properly."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//** Pros: Application can be used as the data is being fetched in the background."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//** Cons: Reading the car park list while querying might cause unintended side effects if not handled properly."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d Find feature"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "The find feature searches for a car park by keyword or location."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The find mechanism is facilitated by `FindCommand` and `FindCommandParser`. It extends `Command` and implements the following operations:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* `FindCommand#execute()` -- Executes the command by running a predicate `CarparkContainsKeywordsPredicate` to update the car park list."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The find mechanism is supported by `FindCommandParser`. It implements `Parser` and contains the following operations:"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* `FindCommandParser#parse()` -- Checks the arguments for empty strings and throws a `ParseException` if empty string is found. It then splits it by one or more white spaces. It then removes any strings in the list of common words."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The predicate `CarparkContainsKeywordsPredicate` takes in a list of strings and checks if any of the strings matches the name or address of a car park fully or partially."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ".How the find operation works"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "image::seqdiagram-find.png[width\u003d\"800\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "The diagram above describes how the flow of a find command would execute. It rely on `FindCommandParser` to ensure the variables are correct."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Given below is an example usage scenario of how the Find mechanism behaves at each step."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Step 2. The user executes `find punggol` command to get all car parks in punggol."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The `find` command calls `FindCommandParser#parse()`."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "If a command execution fails, it will not call `FindCommand#execute()`, and the car park finder state will not be saved."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Step 3. The entire list of car parks is filtered by the predicate `CarparkContainsKeywordsPredicate`, which checks for the keyword `punggol`."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Step 4. The filtered list of car parks is returned to the GUI."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "The flow chart below describes the user interaction with the application and how it processes it."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ".Flow chart of the find operation."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "image::actdiagram-find.png[width\u003d\"800\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How predicate works"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* **Alternative 1 (Current choice):** Predicate have additional filter with an ignore list."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Pros| Re-usable functions introduced for partial checking."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Cons| Reading the car park list while querying might cause unintended side effects if not handled properly."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//** Pros: Re-usable functions for partial checking."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//** Cons: Harder to maintain for multiple keywords, which might cause unintended side effects."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* **Alternative 2:** Filter the data when it is taken in."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Pros| Easy to maintain as predicate will have lesser conditions."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Cons| Breaks OOP style as the parser will modify the data."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//** Pros: Easy to maintain as predicate will have lesser conditions."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//** Cons: Breaks OOP style as the parser will modify the data."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Filter feature"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "The filter feature reduces the amount of car park data by a condition."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The filter mechanism is facilitated by `FilterCommand` and `FilterCommandParser`."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The filter mechanism can filter car parks by the following criteria:"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* Type of car park"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* Availability of free parking"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* Availability of night parking"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The `FilterCommandParser` extends `Parser` and implements the following operation:"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* `FilterCommandParser#parse()` -- Checks the arguments for empty strings and throws a `ParseException` if empty string is found."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "It then splits the arguments by white spaces and store then into an array list."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The `FilterCommand` extends `Command` and implements the following operation:"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* `FilterCommand#execute()` -- Executes the command by filtering the car park list against a selected predicate."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* The various predicates that `FilterCommand` uses include `CarparkHasFreeParkingPredicate`, `CarparkHasNightParkingPredicate` and `CarparkIsOfTypePredicate`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Given below is an example usage scenario of how the filter mechanism behaves at each step when filtering for free parking."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Step 1. The user launches the application."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Step 2. The user executes `filter f/ SUN 7.30am 5.30pm` to get all car parks that has free parking between 7.30am and 5.30pm on the following Sunday."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Step 3. After `CarparkFinderParser` detects `filter` as the command word, a"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "`FilterCommandParser` is created to parse the arguments supplied to the command into `String[] flags`."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Step 4. The `FilterCommand` object is then created to decode `String[] flags` and create the `CarparkHasFreeParkingPredicate`."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Step 5. `CarparkHasFreeParkingPredicate` checks that a carpark has free parking on Sunday, and that the start and end time input by the user falls between the free parking time period of the car park."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Step 6. The list of car parks is filtered against the predicate and returned to the GUI."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Please refer to the _Sequence Diagram_ below for the filter operation."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ".How the filter operation works"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "image::SequenceDiagram-filter.png[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The following _Activity Diagram_ summarizes the implementation of the"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "filter command."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ".Summary for executing a filter command"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "image::ActivityDiagram-filter.png[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How location based filtering executes"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* **Alternative 1 (Current choice):** Extracting the location from the previous `FindCommand` to form the predicate for the current `FilterCommand`"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "+"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "|Pros| Able to pass in the location as a parameter easily when creating the combined predicate. Various existing methods that filters the whole list of car parks can still be used."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "|Cons| Efficiency compromised as the whole list of car parks needs to be filtered through again."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* **Alternative 2:** Store the location-filtered list of car parks from `FindCommand`, then `FilterCommand` filters from the filtered list of car parks."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "+"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "|Pros| Improved efficiency as a shorter list of car park needs to be filtered by `FilterCommand`."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "|Cons| Additional memory required to store the list of car park generated by `FindCommand`."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Abbreviation Feature"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "The abbreviation feature reduces the amount of characters needed to type."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "The abbreviation mechanism is facilitated by `CarparkFinderParser`. It extends the cases"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "to allow command abbreviations to be parsed through `parseCommand` as well."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Given below is an example usage scenario and how the abbreviation mechanism behaves at"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "each step."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Step 1. The user launches the application for the first time. The `LogicManager`"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "is initialized with an `CarparkFinderParser`."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Step 2. The user executes `f` command instead of `find`. The `Matcher` object in"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "`CarparkFinderParser` splits the command text into _command word_ and"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "_arguments_, in which the _command word_ is parsed using a _switch_"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "statement."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Step 3. This _command word_ will be matched to a `COMMAND_ALIAS` from"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "`ListCommand`, which holds the value of \u0027f\u0027. As the program finds a match, it"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "proceeds as if a `find` command is given."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ".Flow chart of command alias usage."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "image::ActivityDiagram-alias.png[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "The _Activity Diagram_ above explains what happens when a user executes a `f`"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "command."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How alias executes"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* *Alternative 1 (current choice):* declare `COMMAND_ALIAS` with a string value"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "in each Command file."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Pros| Easy to implement"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Cons| Have to decide on each abbreviation subjectively which brings down performance"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "       if there are a lot of commands"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* *Alternative 2:* declare `COMMAND_ALIAS` using the first two characters of `COMMAND_WORD`"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "in each Command file."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Pros| Better performance as abbreviations will be assigned systematically."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Cons| When there are 2 command words starting with same two characters e.g. `find` \u0026 `filter`, this does not work."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d Auto-complete Feature"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "The auto-complete feature simplifies overcomplicated commands by prompting correct format."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "The auto-complete mechanism is facilitated by `CommandBox`. It calls `autocomplete()`"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "to `displayFormat()` if applicable command word is entered or to highlight the next"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "parameter if full format is already provided in the command box."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Given below is an example usage scenario and how the auto-complete mechanism behaves at"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "each step."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Step 2. The user enters `fi` in command box and then presses \u0027Tab\u0027 key. `autoComplete()`"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "compares `input` through the list of applicable command words and abbreviations, and"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "proceeds to `displayFormat()` because `fi` is an applicable `COMMAND_ALIAS`. It"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "moves on to highlight its first placeholder, `DAY`, in the command line. As seen"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "from the following diagrams."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ".After `fi` is entered."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "image::screenshot-fi.png[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ".After first \u0027Tab\u0027 key is pressed."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "image::screenshot-fiFirstArgSelected.png[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Step 3. The user replaces `DAY` with an actual value, `SUN`, and presses \u0027Tab\u0027"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "key again. `autoComplete()` is called again, but because this time it checks that `input`"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "`isFilterCommandFormat`, the next placeholder, `START_TIME`, is highlighted. Result"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "is shown in the following diagram."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ".After second \u0027Tab\u0027 key is pressed."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "image::screenshot-fiSecondArgSelected.png[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Step 4. The user continues step 3 until all placeholders are filled up with actual"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "values and then presses \u0027Enter\u0027 key to execute this command."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ".Activity Diagram for Auto Completion Mechanism."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "image::ActivityDiagram-autocompletion.png[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "The _Activity Diagram_ above explains what happens when user presses \u0027Tab\u0027."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: TextInput"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* *Alternative 1:* (current choice): Continue to use the original TextField"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "+"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|Pros| External library enables bindAutocompletion for TextField (the drop down"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "list of suggested commands that appears and updates itself as user types)."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "External library enables bindAutocompletion for TextField (the drop down list of"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": " suggested commands that appears and updates itself as user types)."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|Cons| Text formatting is limited. All text in the TextField must have the same format."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* *Alternative 2:* Create additional TextField as user request for additional fields"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "+"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "[cols\u003d\"1,10\"]"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|Pros| Allows for different formatting for different fields (Commands can have a"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": " different colour from the fields)"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|Cons|Original structure will be disrupted. Command box will no longer be single"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "line text input, which have consequences such as the user cannot backspace or"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "select through the entire line."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Testing is done to verify the application is running in its intended behavior. This section covers multiple ways to run test using Gradle, Gradle (Headless) and Intellij JUnit."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.parking.ui` package."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "e.g. `seedu.parking.commons.StringUtilTest`"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "e.g. `seedu.parking.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "e.g. `seedu.parking.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Dev Ops ensure the product runs on both Linux and Windows by building it and testing after it is uploaded to Github."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "A project often depends on third-party libraries. For example, Car Park Finder depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* commutes using a car and needs to find an empty parking lot"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* wants to know specific details of a car park in a certain location"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* prefers desktop apps over other types"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*Value proposition*: helping busy car owners to plan their trip by getting details"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "of nearby car parks from their destination in a fast and efficient manner"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Filter"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "|`* * *` |car owner |know if there is night parking at the car park"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "|park my car at night"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "|`* * *` |driver |find out if there is free parking at a car park at a certain time on a specific day |choose to park at a car park for free"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "|`* * *` |driver |find out the type of parking of a certain car park"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "|decide if I should leave my car there"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Search"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* * *` |car owner |know more details about the car park and its lots"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|decide where to go depending on the information provided"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* * *` |driver |find a list of available parking lots within my destination"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|plan which car park location is convenient for me"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |car owner |search by details of a car park |view information about a car park that I want"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Store and Load Favourites"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |car owner |have a list of destinations that I visit often"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|save time as I do not have to retype my commands"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |user |add a car park to my favourites"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|create an organised list of preferred car parks"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |user |view my favourite list with ease at the start"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|glance through the car parks without using commands"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |user |save a list of destinations like a favourite list"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|add and keep track of preferred car parks"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |user |edit and write remarks about car parks in my favourite list"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|add or update new information about specific car parks"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |user |delete car parks from my favourites"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|remove car parks that are no longer of my interest"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d API and Notifications"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* * *` |car owner |receive notifications about car park availability"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|save time and plan my trip accordingly to vacancy of parking lots"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |driver |set how frequent to notify me about more suitable car parks"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|change which car park I am headed to without searching again"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |driver |know if the car park is changed to fully occupied"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|go to another car park that is not full"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |driver |check the current weather forecast at destination"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|plan ahead if the car park has no shelter and move to one that has it"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Cache and Aliases"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* * *` |new user |learn how to use the application easily"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|spend less time on learning and more on using it"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* * *` |new user |be able to understand the UI without much instruction"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|spend my time on the program using the features"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |user |use shorthand equivalent alias of commands"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|navigate the application in a more time efficient way"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`*` |user |autocomplete my requests"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|get the information that I want faster"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "For all use cases below, the *System* is the `Car Park Finder` and the *Actor* is the"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "`user / driver / car owner`, unless specified otherwise."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Filter and Sorting"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"60%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Use case: UC01 - Filter car park"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*MSS*"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests a list of car parks"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows a list of car parks"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests to [.underline]#filter the list of car parks using flags *(UC05)*#"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows a new filtered list of car parks"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*Extensions*"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3a. The given flags are invalid."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3a1. *System* shows an error message."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3b. No input for flags."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3b1. *System* will show a list of car parks with all the flags selected."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"60%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Use case: UC02 - Sort car park"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*MSS*"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests a list of car parks"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows a list of car parks"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests to sort the list of car parks base on distance"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows a new sorted list of car parks"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*Extensions*"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3a. The given flags are invalid."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3a1. *System* shows an error message."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3b. No input for flags."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3b1. *System* will show a list of car parks with all the flags selected."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"60%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Use case: UC03 - Calculate parking fee"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*MSS*"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests a list of car parks"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows a list of car parks"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests to calculate the cost of parking at a car park given a duration"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows the amount to pay for that car park"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*Extensions*"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3a. The given car park number is invalid."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3a1. *System* shows an error message."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3b. No input for duration."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3b1. *System* will use the default duration to calculate the cost."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3c. The given duration is invalid."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3c1. *System* shows an error message."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Search and Flag"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"60%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Use case: UC04 - Search car park"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*MSS*"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests a list of car parks near the destination"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows a list of car parks"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests to [.underline]#filter the list of car parks using flags *(UC05)*#"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows a new filtered list of car parks"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*Extensions*"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 1a. The destination is invalid."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 1a1. *System* shows an error message."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3a. The given flags are invalid."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3a1. *System* shows an error message."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3b. No input for flags."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3b1. *System* will show a list of car parks with all the flags selected."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"60%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Use case: UC05 - Flag car park details"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*MSS*"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* sets the flags to indicate the required car park details"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows a list of car parks with the selected flags"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*Extensions*"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 1a. The given flags are invalid."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 1a1. *System* shows an error message."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes before step 1."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 1b. No input for flags."
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 1b1. *System* will show a list of car parks with all the flags selected."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Store and Load Favourites"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"60%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Use case: UC06 - Add car park to Favourites"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*MSS*"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests to list car parks"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows a list of car parks"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests to add a specific car park to the favourites list"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* adds the car park"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*Extensions*"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3a. The given index to add invalid."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3a1. *System* shows an error message."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"60%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Use case: UC07 - Delete car park in Favourites"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*MSS*"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests to list car parks"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows a list of car parks"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests to add a specific car park to the favourites list"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* adds the car park"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*Extensions*"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3a. The given index to add invalid."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3a1. *System* shows an error message."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"60%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Use case: UC07 - Delete car park in Favourites"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*MSS*"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests to list car parks"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows a list of car parks"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests to delete a specific car park in the favourites list"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". System* deletes the car park"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*Extensions*"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 2a. The favourites list is empty."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 2a1. *System* shows a message."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3a. The given index to delete is invalid."
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3a1. *System* shows an error message."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"60%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Use case: UC08 - List Favourites"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*MSS*"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests to list favourites"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows a list of car parks"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*Extensions*"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 1a. The favourites list is empty."
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 1a1. *System* shows a message."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"60%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Use case: UC09 - Tags and remarks"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*MSS*"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests to list favourites"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows a list of car parks"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests to modify tags and remarks to the car parks"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows favourites with the new changes"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*Extensions*"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 1a. The favourites list is empty."
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 1a1. *System* shows a message."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3a. Tags and remarks are invalid."
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3a1. *System* shows an error message."
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d API and Notifications"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"60%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Use case: UC10 - Receive notifications"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|Preconditions: *Actor* already requested a list of car parks"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests to be notified at regular intervals"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows the car park availability every interval"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*Extensions*"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 1a. The given time to notify is invalid."
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 1a1. *System* shows an error message."
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes before step 1."
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 1b. No input for timing."
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 1b1. *System* will use the default interval to notify."
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 2a. Unable to retrieve car park availability."
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 2a1. *System* shows an error message."
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"60%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Use case: UC11 - Car park fully occupied"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|Preconditions: *Actor* already selected a car park from the list"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows the car park is now fully occupied"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests to list car parks again"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows a list of car parks"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests to select a new car park"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*Extensions*"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3a. Unable to retrieve car park availability."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3a1. *System* shows an error message."
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"60%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Use case: UC12 - Weather update"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|Preconditions:"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* *Actor* already selected a car park from the list"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* *System* already showed weather forecast of the area"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests to update weather conditions"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows the current weather forecast of the area"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*Extensions*"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 2a. Unable to retrieve weather forecast."
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 2a1. *System* shows an error message."
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Cache and Aliases"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"60%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Use case: UC13 - View instructions"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*MSS*"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests help in learning the application"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* shows a list of commands with information about each one of them"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*Extensions*"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 1a. Wrong command input"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 1a1. *System* shows the list of commands"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"60%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Use case: UC14 - Command alias"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*MSS*"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* requests using alias for the commands"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* understands the command and proceeds to process it"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*Extensions*"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 1a. Alias not accepted"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 1a1. *System* shows the list of commands"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"60%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Use case: UC15 - Autocomplete command"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "a|*MSS*"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* beings typing in the command"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *System* recognises the command and does autocomplete"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". *Actor* selects the autocomplete word"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "- Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "- Should not have any noticeable sluggishness when holding list of car parks."
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "- Should come with automated unit tests and be able to handle errors and exceptions."
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "- Should be easy to use for novice that have never used a CLI before or never used an application"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "to search for locations of car parks."
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "- Query should respond fast assuming no connection delays and the API is working."
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "- The application is not expected to download an entire list of car parks in the country to work offline."
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "- This application is not suppose to be used by drivers on the road."
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "- The system should be easy and scalable in adding on features for future versions."
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "- The car park data should be updated frequently while running to send notifications in real time."
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "- Privacy details in the favourites list should not be seen or shared easily by others."
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[[api]] API (Application Programming Interface)::"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Specifies the interface through which other programs can interact with a software component. It is a contract between the component and its clients."
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[[autocomplete]]  Autocomplete::"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Provides suggestions while you type into the field."
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[[flag]] Flag::"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "A value that acts as a signal for a function or process."
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[[JSON]] JSON (JavaScript Object Notation)::"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "A file format that allows humans to easily read and write data for machines to process."
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[[private-contact-detail]] Favourites::"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "A custom list of car parks that is meant to be viewed easily."
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[[ui]] UI (User Interface)::"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Allows the user to interact with the application through inputs and outputs of data."
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Deleting a car park"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Deleting a car park while all carparks are listed"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".. Prerequisites: List all car parks using the `list` command. Multiple car parks in the list."
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "   Expected: No car park is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 134,
      "Lexzt": 173,
      "YurouTang": 185,
      "-": 602,
      "ZhuanYu": 528
    }
  },
  {
    "path": "docs/DummySearchPage.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmeta charset\u003d\"utf-8\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ctitle\u003eDummy Search Page\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscript type\u003d\"text/javascript\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    function getJsonFromUrl() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      var query \u003d location.search.substr(1);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      var result \u003d {};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "      query.split(\"\u0026\").forEach(function(part) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        var item \u003d part.split(\"\u003d\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        result[item[0]] \u003d decodeURIComponent(item[1]);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      return result;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    document.addEventListener(\"DOMContentLoaded\", function(event) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      document.getElementById(\"name\").innerHTML\u003dgetJsonFromUrl().name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/script\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  \u003ciframe width\u003d\"1000\" height\u003d\"400\" src\u003d\"https://data.gov.sg/dataset/hdb-carpark-information/resource/139a3035-e624-4f56-b63f-89ae28d4ae4c/view/e02fdccf-b667-4ede-a87b-74cb9f1e6080\" frameBorder\u003d\" 10\"\u003e \u003c/iframe\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  \u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  Hi \u003cspan id\u003d\"name\"\u003e\u003c/span\u003e: This is a placeholder page for se-edu/addressbook-level4.\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  You may update the code to load a page from a real service (e.g., Google search).\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  This dummy page is used here because, given the high number of forks of this repo, \u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  loading a page from a real third-party service by default can result in that service taking counter-measures \u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  (e.g., redirecting to captcha pages) due to the high number of rapid requests received from a single IP.\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  When you have made the change, please remove:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003col\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cli\u003eThis file (\u003ccode\u003edocs/DummySearchPage.html\u003c/code\u003e).\u003c/li\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cli\u003eTask \u003ccode\u003ecopyDummySearchPage\u003c/code\u003e in both \u003ccode\u003ebuild.gradle\u003c/code\u003e and \u003ccode\u003e.travis.yml\u003c/code\u003e.\u003c/li\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/ol\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 1,
      "-": 31,
      "ZhuanYu": 5
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d Car Park Finder - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T09-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "By: `Team T09-4`      Since: `Oct 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The Car Park Finder is an application to find HDB (Housing Development Board) car parks in Singapore. It allows you to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "work with a *Command Line Interface (CLI)* to display a list of car parks with the convenience of simply typing. If you"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YurouTang"
        },
        "content": " *use the computer frequently* and *commute by driving*, you would find our application useful in helping you obtain"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YurouTang"
        },
        "content": " various information about car parks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Interested? Head towards \u003c\u003cQuick Start\u003e\u003e to get started."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Here are several quick tips to get the application running."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ". Check that you have https://www.oracle.com/technetwork/java/javase/downloads/index.html[Java version 9] or later installed in your Computer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ". Download the latest `carparkfinder.jar` https://github.com/CS2103-AY1819S1-T09-4/main/releases[here]."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for Car Park Finder."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ". Double-click the file to start the application. The *Graphical User Interface (GUI)* should appear in a few seconds."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ".Home page"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "image::Ui2.png[width\u003d\"880\"]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "The figure above is a sample display of the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ". Type the command in the command box and press kbd:[Enter] to execute it."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Some example commands you can try:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "- `list` : bring up a list of all the car parks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "- `help` : show the list of available commands and how to use them"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "- `exit` : exit the program"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Here are the details of the features available to the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `find LOCATION`, `LOCATION` is a"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "parameter which can be used as `find serangoon`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* Items in square brackets are optional e.g `filter [f/] [n/] [ct/CARPARK_TYPE]` can be used as `filter f/ n/ ct/SURFACE` or as `filter f/`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `filter [f/] [n/] [ct/CARPARK_TYPE]`,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "`filter [n/] [f/] [ct/CARPARK_TYPE]` is also acceptable."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Shows the list of available commands and how to use them. +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Format: `help` or `h`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "A help window will pop up that contains all the commands available and how to"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "use them."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Example(s)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "- `help`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d Finding car parks : `find`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Finds a list of available car parks. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]` or `f KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* Common words are ignored, like blk and ave."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* Upper and lower case characters do not matter."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ".Before using find command"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "image::findbefore.png[width\u003d\"880\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "The figure above is a sample display of the application."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ".After using find command"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "image::findafter.png[width\u003d\"880\"]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "The figure above shows what happen after executing the `find` command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* `find punggol`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* `f HG83`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Select car park : `select`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Select the car park you wish to go to. +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Format: `select INDEX` or `s INDEX`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* The index refers to the index number shown in the displayed car park list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".After using select command"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "image::select.png[width\u003d\"880\"]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "The figure above is the outcome of the select command."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Selecting the 2nd car park in the list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Step 1. `list`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Step 2. `select 2`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Selecting the 1st car park in the results of the `find` command."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Step 1. `find sengkang`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Step 2.  `s 1`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Example(s)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* `history`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d Filtering car parks : `filter`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Filters the list of car parks by free parking, night parking or car park type. +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Format: `filter [f/ DAY START_TIME END_TIME] [n/] [ct/ CARPARK_TYPE]` +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "or `fi [f/ DAY START_TIME END_TIME] [n/] [ct/ CARPARK_TYPE]`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Must have car parks beforehand. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Upper and lower case characters do not matter."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Flags:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `f/ - FREE_PARKING`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `n/ - NIGHT_PARKING`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `ct/ - CARPARK_TYPE`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "- `SURFACE`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "- `MULTI-STOREY`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "- `BASEMENT`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "- `COVERED`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "- `MECHANISED`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ".Filtering covered car parks"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "image::filter.png[width\u003d\"880\"]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "After filtering, a smaller subset of car parks are listed."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* `filter f/ SUN 7.30AM 5.30PM n/ ct/ SURFACE`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* `fi ct/ BASEMENT`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d Sorting car parks : `sort`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Sort the list of car parks by distance or name. +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Format: `sort FILTER_TYPE` or `so FILTER_TYPE`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Must have car parks listed beforehand."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Flags:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `DISTANCE`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `NAME`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `FP (Free Parking)`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `NP (Night Parking)`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* `sort DISTANCE`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* `so NAME`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Listing all car parks : `list`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Show a list of all the car parks with their details. +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Format: `list` or `l`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".After using list command"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "image::listafter.png[width\u003d\"880\"]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "After executing `list`, it will show all the car parks again."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Example(s)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* `list`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d Adding favourite car parks or location : `add` `[coming in v2.0]`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Add a car park into your favorites list +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Format: `add c/CARPARK_NUMBER` or `a c/CARPARK_NUMBER`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* `add c/SE12`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* `a c/SE12`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d Removing from favorites list : `delete` `[coming in v2.0]`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Remove the specified car park from your favorites list +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Format: `delete c/CARPARK_NUMBER` or `d c/CARPARK_NUMBER`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `delete c/SE12`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `d c/SE12`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d Querying data: `query`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Get car park information from data.gov.sg by querying it. +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "You need to run this command to get the latest information on all the car parks."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".After using query command"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "image::query.png[width\u003d\"880\"]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "All car parks data are refreshed, with all the bottom left panel saying when it was updated."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `query`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d Enabling Notification : `notify` `[coming in v2.0]`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Set the interval to give updates in real time for all the car parks. +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Format: `notify TIME_SECONDS` or `n TIME_SECONDS`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "The default value is 60 seconds. You can set within a range of 10 seconds to 1 hour."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* `notify 60`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* `n 60`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d Updating Weather : `weather` `[coming in v2.0]`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Include weather updates in the notifications by indicating on or off. +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Format: `weather TOGGLE`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Example(s):"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `weather on`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `weather off`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Clears all entries from the list. +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Example(s)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* `clear`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Exiting the application : `exit`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Exits the application. +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Example(s)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* `exit`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d Auto complete the command line"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Display the full format of an executable command line. +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Format: `COMMAND_WORD` followed by \u0027Tab\u0027 key."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Function: press \u0027Tab\u0027 key again to move to the next parameter."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Example(s)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* key in `fi` in command box and then press \u0027Tab\u0027 key."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Only available in the following commands:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* `Find`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* `Select`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* `Filter`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* `Sort`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "*Q*: How do I transfer my data to another computer? +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*A*: Install the application in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Car Park Finder folder."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "*Q*: If I do not know the postal code of the location, am I still able to find car parks through other means? +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "*A*: Yes, by typing keywords like street names."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Here are a few technical terms used in the user guide."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ".General Commands"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "[cols\u003d\"1,6\"]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Term |Explanation"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|*Flag*"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|Flag is a value that acts as a signal for a function."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Here are the summarize list of commands available to the user."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ".General Commands"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "[cols\u003d\"1,4,2\"]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|Command |Format |Example"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*Help*"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`help`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`h`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*Clear*"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`clear`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`c`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*History*"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`history`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`hi`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*Query*"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`query`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`q`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*Exit*"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`exit`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`e`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ".Carpark Management"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "[cols\u003d\"1,4,2\"]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|Command |Format |Example"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*List*"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`list`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`l`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*Select*"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`select INDEX`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`s 2`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*Find*"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`f punggol`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*Filter*"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`filter [f/FREE_PARKING] [n/NIGHT_PARKING] [ct/CARPARK_TYPE]`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`fi f/true n/false ct/multi`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*Sort*"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`sort FILTER_TYPE`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`so DISTANCE`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*Notify*"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`notify`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`n 60`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 83,
      "Lexzt": 94,
      "YurouTang": 23,
      "-": 128,
      "ZhuanYu": 70
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Enter an arbitrary description e.g. carparkfinder"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "-": 41,
      "ZhuanYu": 1
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean allTests`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Creates the `carparkfinder.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[[Running-Tests]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* **`allTests`** +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* **`guiTests`** +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Runs all tests in the `seedu.parking.ui` and `systemtests` package"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* **`nonGuiTests`** +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Runs all non-GUI tests in the `seedu.parking`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "package"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* **`headless`** +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in headless mode due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew headless allTests` -- Runs all tests in headless mode"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tests"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "-": 110,
      "ZhuanYu": 3
    }
  },
  {
    "path": "docs/team/alvin.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d Alvin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "ZhuanYu": 1
    }
  },
  {
    "path": "docs/team/zhuanyu.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d Yeo Zhuan Yu - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "image::zhuanyu.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "{empty}[https://github.com/ZhuanYu[github]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d PROJECT: Car Park Finder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "_Car Park Finder_ is a desktop command-line application for all car owners seeking a hassle-free way to find"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "HDB (Housing Development Board) car parks in Singapore."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Our application allows you to view various information about the car parks so that you can plan ahead. If you use the computer frequently"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "and commute by driving, try out our convenient application that simply requires typing to get started."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "ZhuanYu": 9
    }
  },
  {
    "path": "src/main/java/seedu/parking/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/main/java/seedu/parking/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.CarparkFinder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ReadOnlyCarparkFinder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.storage.CarparkFinderStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.storage.XmlCarparkFinderStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Car Park Finder ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkFinderStorage carparkFinderStorage \u003d new XmlCarparkFinderStorage(userPrefs.getCarparkFinderFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        storage \u003d new StorageManager(carparkFinderStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s car park finder and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The data from the sample car park finder will be used instead if {@code storage}\u0027s car park finder is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * or an empty car park finder will be used instead if errors occur when reading {@code storage}\u0027s car park finder."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Optional\u003cReadOnlyCarparkFinder\u003e carparkFinderOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ReadOnlyCarparkFinder initialData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            carparkFinderOptional \u003d storage.readCarparkFinder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            if (!carparkFinderOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Car Park Finder\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            initialData \u003d carparkFinderOptional.orElseGet(SampleDataUtil::getSampleCarparkFinder);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Car Park Finder\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            initialData \u003d new CarparkFinder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Car Park Finder\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            initialData \u003d new CarparkFinder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CarparkFinder\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        logger.info(\"Starting Car Park Finder \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Car Park Finder ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 163,
      "ZhuanYu": 45
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/core/ComponentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Base class for *Manager classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Registers the class\u0027 event handlers in eventsCenter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class ComponentManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this(EventsCenter.getInstance());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager(EventsCenter eventsCenter) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private String appTitle \u003d \"Address App\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/core/EventsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.EventBus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages the event dispatching of the app."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCenter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EventsCenter.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static EventsCenter instance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EventBus eventBus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private EventsCenter() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus \u003d new EventBus();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static EventsCenter getInstance() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            instance \u003d new EventsCenter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void clearSubscribers() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        instance \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void registerHandler(Object handler) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.register(handler);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts an event to the event bus."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public \u003cE extends BaseEvent\u003e EventsCenter post(E event) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"------[Event Posted] \" + event.getClass().getCanonicalName() + \": \" + event.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.post(event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowWidth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowHeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Point windowCoordinates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowWidth() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowHeight() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(windowWidth, o.windowWidth)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowHeight, o.windowHeight)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.x, o.windowCoordinates.x)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.y, o.windowCoordinates.y);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String LOG_FILE \u003d \"carparkfinder.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 125,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX \u003d \"The car park index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_CARPARKS_LISTED_OVERVIEW \u003d \"%1$d car parks listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    //public static final String MESSAGE_INVALID_FILTER_PARAMETERS \u003d \"The filter parameters are invalid.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YurouTang": 2,
      "-": 9,
      "ZhuanYu": 4
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/events/BaseEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * The base class for all event classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * All Events should have a clear unambiguous custom toString message so that feedback message creation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * stays consistent and reusable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * For example, the event manager post method will call any posted event\u0027s toString and print it in the console."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/events/model/CarparkFinderChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ReadOnlyCarparkFinder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/** Indicates the CarparkFinder in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkFinderChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final ReadOnlyCarparkFinder data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkFinderChangedEvent(ReadOnlyCarparkFinder data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return \"number of car parks \" + data.getCarparkList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 19
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/events/storage/DataSavingExceptionEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.events.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates an exception during a file saving"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataSavingExceptionEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Exception exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataSavingExceptionEvent(Exception exception) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exception \u003d exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return exception.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/events/ui/CarparkPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a selection change in the Car park List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final Carpark newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkPanelSelectionChangedEvent(Carpark newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Carpark getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "ZhuanYu": 8
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/events/ui/ExitAppRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates a request for App termination"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitAppRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/events/ui/JumpToListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Indicates a request to jump to the list of car parks"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JumpToListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public JumpToListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "ZhuanYu": 4
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/events/ui/NewResultAvailableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates that a new result is available."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewResultAvailableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public NewResultAvailableEvent(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/events/ui/NotifyCarparkRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Indicates a request to jump to the list of car parks"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class NotifyCarparkRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public NotifyCarparkRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 22
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/events/ui/ShowHelpRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ShowHelpRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/exceptions/DataConversionException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/exceptions/IllegalValueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/util/AppUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/util/ConfigUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String, String...)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 81,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/util/GsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.net.URLConnection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Converts JSON from API call to a Java Object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class GsonUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static HashSet\u003cCarparkJson\u003e carparkList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static HashSet\u003cString[]\u003e parkingData \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Fetches car park information and returns a list of it."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @return A list of list of strings containing the car park information."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws IOException if unable to connect to URL."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static List\u003cList\u003cString\u003e\u003e fetchCarparkInfo() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final boolean[] hasError \u003d {false, false, false};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Thread first \u003d new Thread(() -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                getCarparkData();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                hasError[0] \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        first.start();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (hasError[0]) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Thread second \u003d new Thread(() -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                getCarparkAvailability();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                hasError[1] \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        second.start();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (hasError[1]) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        first.join();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        second.join();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return saveAsList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Adds in the parking lots details and convert to a list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @return A List containing all the car parks information."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static List\u003cList\u003cString\u003e\u003e saveAsList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        List\u003cList\u003cString\u003e\u003e str \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (CarparkJson list : carparkList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            for (String[] data : parkingData) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                if (list.getNumber().contains(data[0])) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    list.addOn(data[1], data[2]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    list.addOn(\"0\", \"0\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            str.add(list.jsonData);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static void getCarparkAvailability() throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String url \u003d \"https://api.data.gov.sg/v1/transport/carpark-availability\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        URL link \u003d new URL(url);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        URLConnection communicate \u003d link.openConnection();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        communicate.setConnectTimeout(30000);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        communicate.setReadTimeout(30000);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        communicate.connect();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        InputStreamReader in \u003d new InputStreamReader((InputStream) communicate.getContent());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        JsonArray array \u003d new JsonParser()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .parse(in)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .getAsJsonObject()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .getAsJsonArray(\"items\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .get(0)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .getAsJsonObject()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .getAsJsonArray(\"carpark_data\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (int i \u003d 0; i \u003c array.size(); i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            JsonObject carObject \u003d array.get(i).getAsJsonObject();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            String[] carparkNumber \u003d carObject.get(\"carpark_number\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .toString()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .split(\"\\\"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            JsonObject carInfo \u003d carObject.getAsJsonArray(\"carpark_info\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .get(0)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .getAsJsonObject();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            String[] totalLot \u003d carInfo.get(\"total_lots\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .toString()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .split(\"\\\"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            String[] lotAvail \u003d carInfo.get(\"lots_available\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .toString()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .split(\"\\\"\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            String[] lotData \u003d {carparkNumber[1], totalLot[1], lotAvail[1]};"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            parkingData.add(lotData);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static void getCarparkData() throws IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String urlHalf \u003d \"https://data.gov.sg/api/action/datastore_search?\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                + \"resource_id\u003d139a3035-e624-4f56-b63f-89ae28d4ae4c\u0026limit\u003d1000\u0026offset\u003d\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        int offset \u003d 0;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        StringBuilder urlFull \u003d new StringBuilder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        urlFull.append(urlHalf).append(offset);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        InputStreamReader in;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        JsonArray array;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            URL link \u003d new URL(urlFull.toString());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            URLConnection communicate \u003d link.openConnection();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            communicate.setConnectTimeout(30000);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            communicate.setReadTimeout(30000);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            communicate.connect();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            in \u003d new InputStreamReader((InputStream) communicate.getContent());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            array \u003d new JsonParser()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .parse(in)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .getAsJsonObject()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .getAsJsonObject(\"result\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .getAsJsonArray(\"records\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            for (int i \u003d 0; i \u003c array.size(); i++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                JsonElement object \u003d array.get(i);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                CarparkJson cPark \u003d gson.fromJson(object.toString(), CarparkJson.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                carparkList.add(cPark);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            offset +\u003d 1000;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            urlFull.setLength(0);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            urlFull.append(urlHalf).append(offset);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        } while (array.size() \u003e 0);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Container class to hold JSON data."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private class CarparkJson {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //CHECKSTYLE.OFF: MemberNameCheck"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private final String short_term_parking;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private final String y_coord;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private final String car_park_type;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private final String x_coord;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private final String free_parking;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private final String night_parking;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private final String address;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private final String car_park_no;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private final String type_of_parking_system;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //CHECKSTYLE.ON: MemberNameCheck"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private List\u003cString\u003e jsonData;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private CarparkJson(String... data) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            short_term_parking \u003d data[0];"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            car_park_type \u003d data[1];"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            y_coord \u003d data[2];"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            x_coord \u003d data[3];"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            free_parking \u003d data[4];"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            night_parking \u003d data[5];"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            address \u003d data[6];"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            car_park_no \u003d data[7];"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            type_of_parking_system \u003d data[8];"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         * Adds the JSON data into a list"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         * @param data Contains total lots and lots availability numbers."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private void addOn(String... data) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(address);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(car_park_no);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(car_park_type);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(x_coord + \", \" + y_coord);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(free_parking);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(data[1]);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(night_parking);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(short_term_parking);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(data[0]);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(type_of_parking_system);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private String getNumber() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return car_park_no;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            if (!(other instanceof CarparkJson)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            CarparkJson otherCarparkJson \u003d (CarparkJson) other;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return short_term_parking.equals(otherCarparkJson.short_term_parking)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 y_coord.equals(otherCarparkJson.y_coord)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 car_park_type.equals(otherCarparkJson.car_park_type)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 x_coord.equals(otherCarparkJson.x_coord)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 free_parking.equals(otherCarparkJson.free_parking)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 night_parking.equals(otherCarparkJson.night_parking)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 address.equals(otherCarparkJson.address)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 car_park_no.equals(otherCarparkJson.car_park_no)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 type_of_parking_system.equals(otherCarparkJson.type_of_parking_system);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public int hashCode() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return Objects.hash(short_term_parking, y_coord, car_park_type, x_coord, free_parking, night_parking,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    address, car_park_no, type_of_parking_system);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 253
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 140,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Returns true if the {@code sentence} contains partial the {@code word}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     *   Ignores case, but a partial word match is required."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static boolean containsPartialWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String preppedWord \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .anyMatch(data -\u003e data.contains(preppedWord));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 26,
      "-": 66,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/main/java/seedu/parking/commons/util/XmlUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Helps with reading from and writing to XML files."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the xml data in the file as an object of the specified type."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file           Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classToConvert The class corresponding to the xml data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if the file is empty or does not have the correct format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T getDataFromFile(Path file, Class\u003cT\u003e classToConvert)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(classToConvert);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!FileUtil.isFileExists(file)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(classToConvert);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Unmarshaller um \u003d context.createUnmarshaller();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return ((T) um.unmarshal(file.toFile()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the data in the file in xml format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *             Cannot be null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if there is an error during converting the data"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               into xml and writing to the file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveDataToFile(Path file, T data) throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(file)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(data.getClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Marshaller m \u003d context.createMarshaller();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        m.marshal(data, file.toFile());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private LinkedList\u003cString\u003e userInputHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of {@code userInputHistory}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new LinkedList\u003c\u003e(userInputHistory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 110,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of car parks */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    ObservableList\u003cCarpark\u003e getFilteredCarparkList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "ZhuanYu": 7
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.parser.CarparkFinderParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final CarparkFinderParser carparkFinderParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkFinderParser \u003d new CarparkFinderParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            Command command \u003d carparkFinderParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public ObservableList\u003cCarpark\u003e getFilteredCarparkList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return model.getFilteredCarparkList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "ZhuanYu": 15
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.CarparkFinder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Clears the car park finder."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All car park information has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_EMPTY \u003d \"There is nothing to be cleared.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        int size \u003d model.getCarparkFinder().getCarparkList().size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            if (size \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                return new CommandResult(MESSAGE_EMPTY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            model.resetData(new CarparkFinder());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            model.commitCarparkFinder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "ZhuanYu": 19
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "ZhuanYu": 4
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Deletes a car park identified using it\u0027s displayed index from the car park finder."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            + \": Deletes the car park identified by the index number used in the displayed car park list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_DELETE_CARPARK_SUCCESS \u003d \"Deleted Car park: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        List\u003cCarpark\u003e lastShownList \u003d model.getFilteredCarparkList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Carpark carparkToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        model.deleteCarpark(carparkToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        model.commitCarparkFinder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CARPARK_SUCCESS, carparkToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "ZhuanYu": 17
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Car Park Finder as requested ...\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 1,
      "-": 18,
      "ZhuanYu": 6
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/commands/FilterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkHasFreeParkingPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkHasNightParkingPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkIsOfTypePredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YurouTang"
        },
        "content": " * Filters car parks using to flags"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"fi\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final String FORMAT \u003d \"filter f/ DAY START_TIME END_TIME n/ ct/ CARPARK_TYPE\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            + \": Filters the carpark based using flags.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            + \"Flags:\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            + \"\u003e Night Parking: n/ \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            + \"\u003e Free Parking: f/ [day] [start time] [end time]     Example: filter f/ SUN 7.30AM 8.30PM\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            + \"\u003e Car Park Type: ct/ [car park type]     Example: filter ct/ basement\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            + \"   SURFACE\\n\" + \"   MUITISTOREY\\n\" + \"   BASEMENT\\n\" + \"   COVERED\\n\" + \"   MECHANISED\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    //public static final String MESSAGE_FILTER_CARPARK_SUCCESS \u003d \"Filtered Car Parks.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    private Predicate predicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    private String[] flags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "     * Creates a FilterCommand with the relevant flags"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public FilterCommand(String[] flags) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        this.flags \u003d flags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        this.predicate \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        List\u003cString\u003e flagList \u003d Arrays.asList(flags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        // Currently can only have one flag at a time."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        if (flagList.contains(\"n/\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            this.predicate \u003d new CarparkHasNightParkingPredicate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            model.updateFilteredCarparkList(predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        if (flagList.contains(\"f/\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            int index \u003d flagList.indexOf(\"f/\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            // Can accept small letters too"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            String day \u003d flagList.get(index + 1).toUpperCase();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            System.out.println(\"day: \" + day);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            String startTime \u003d flagList.get(index + 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            System.out.println(\"startTime: \" + startTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            String endTime \u003d flagList.get(index + 3);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            System.out.println(\"endTime: \" + endTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            this.predicate \u003d new CarparkHasFreeParkingPredicate(day, startTime, endTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            model.updateFilteredCarparkList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        if (flagList.contains(\"ct/\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            int index2 \u003d flagList.indexOf(\"ct/\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            String carparkType \u003d flagList.get(index2 + 1).toUpperCase();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            System.out.println(\"carparkType: \" + carparkType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            this.predicate \u003d new CarparkIsOfTypePredicate(carparkType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            model.updateFilteredCarparkList(predicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                String.format(Messages.MESSAGE_CARPARKS_LISTED_OVERVIEW, model.getFilteredCarparkList().size()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //throw new CommandException(\"filter command executed.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //return new CommandResult(String.format(MESSAGE_FILTER_CARPARK_SUCCESS));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        return other \u003d\u003d this; // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //|| (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //\u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 2,
      "YurouTang": 78,
      "ZhuanYu": 15
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Finds and lists all car parks in car park finder whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final String FORMAT \u003d \"find KEYWORD\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all car parks whose names contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" punggol\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final CarparkContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public FindCommand(CarparkContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        model.updateFilteredCarparkList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                String.format(Messages.MESSAGE_CARPARKS_LISTED_OVERVIEW, model.getFilteredCarparkList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 3,
      "-": 31,
      "ZhuanYu": 11
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 1,
      "-": 20,
      "ZhuanYu": 5
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.model.Model.PREDICATE_SHOW_ALL_CARPARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Lists all car parks in the car park finder to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all %1$d car parks \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        model.updateFilteredCarparkList(PREDICATE_SHOW_ALL_CARPARK);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        int size \u003d model.getCarparkFinder().getCarparkList().size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, size));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 1,
      "-": 17,
      "ZhuanYu": 10
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/commands/NotifyCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Coordinate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.FreeParking;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.LotsAvailable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.NightParking;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.ShortTerm;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.TotalLots;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.TypeOfParking;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.ui.CarparkListPanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Notifies when to get the car park information from the API."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class NotifyCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"notify\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            + \": Set when to update the car park information.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 60\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Notification set for car park %1$d\\nInterval: every %2$ds\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_ERROR \u003d \"Cannot notify without selecting a car park first\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_ERROR_CARPARK \u003d \"Unable to load car park information from database\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final int targetTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public NotifyCommand(int targetTime) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.targetTime \u003d targetTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Calls the API and load all the car parks information"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @return An array of car parks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private List\u003cCarpark\u003e readCarpark(List\u003cList\u003cString\u003e\u003e carparkData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        List\u003cCarpark\u003e carparkList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (List\u003cString\u003e carpark : carparkData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            Carpark c \u003d new Carpark(new Address(carpark.get(0)), new CarparkNumber(carpark.get(1)),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    new CarparkType(carpark.get(2)), new Coordinate(carpark.get(3)),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    new FreeParking(carpark.get(4)), new LotsAvailable(carpark.get(5)),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    new NightParking(carpark.get(6)), new ShortTerm(carpark.get(7)),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    new TotalLots(carpark.get(8)), new TypeOfParking(carpark.get(9)), null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            carparkList.add(c);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparkList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        int validity \u003d CarparkListPanel.getSelectedIndex();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (validity \u003c 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new CommandException(MESSAGE_ERROR);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Index notifyIndex \u003d Index.fromZeroBased(validity);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        List\u003cCarpark\u003e filteredCarparkList \u003d model.getFilteredCarparkList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (notifyIndex.getZeroBased() \u003e\u003d filteredCarparkList.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, notifyIndex.getOneBased(), targetTime));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof NotifyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 targetTime \u003d\u003d ((NotifyCommand) other).targetTime); // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 1,
      "ZhuanYu": 89
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/commands/QueryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.util.GsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Coordinate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.FreeParking;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.LotsAvailable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.NightParking;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.ShortTerm;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.TotalLots;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.TypeOfParking;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Queries when to get the car park information from the API."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class QueryCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"query\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"q\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            + \": Updates all the car park information in Car Park Finder.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$d Car parks updated\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String MESSAGE_ERROR_CARPARK \u003d \"Unable to load car park information from database\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Calls the API and load all the car parks information"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @return An array of car parks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private List\u003cCarpark\u003e readCarpark(List\u003cList\u003cString\u003e\u003e carparkData) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        List\u003cCarpark\u003e carparkList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (List\u003cString\u003e carpark : carparkData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            Carpark c \u003d new Carpark(new Address(carpark.get(0)), new CarparkNumber(carpark.get(1)),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    new CarparkType(carpark.get(2)), new Coordinate(carpark.get(3)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    new FreeParking(carpark.get(4)), new LotsAvailable(carpark.get(5)),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    new NightParking(carpark.get(6)), new ShortTerm(carpark.get(7)),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    new TotalLots(carpark.get(8)), new TypeOfParking(carpark.get(9)), null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            carparkList.add(c);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparkList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        int updated;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            List\u003cList\u003cString\u003e\u003e carparkData \u003d new ArrayList\u003c\u003e(GsonUtil.fetchCarparkInfo());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            List\u003cCarpark\u003e allCarparks \u003d new ArrayList\u003c\u003e(readCarpark(carparkData));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            model.loadCarpark(allCarparks);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            model.commitCarparkFinder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            updated \u003d model.compareCarparkFinder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new CommandException(MESSAGE_ERROR_CARPARK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, updated));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 73
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.model.Model.PREDICATE_SHOW_ALL_CARPARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Reverts the {@code model}\u0027s car park finder to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!model.canRedoCarparkFinder()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        model.redoCarparkFinder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        model.updateFilteredCarparkList(PREDICATE_SHOW_ALL_CARPARK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 1,
      "-": 22,
      "ZhuanYu": 8
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Selects a carpark identified using it\u0027s displayed index from the car park finder."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final String FORMAT \u003d \"select INDEX\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            + \": Selects the car park identified by the index number used in the displayed car park list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_SELECT_CARPARK_SUCCESS \u003d \"Selected Car park: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        List\u003cCarpark\u003e filteredCarparkList \u003d model.getFilteredCarparkList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredCarparkList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_CARPARK_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 2,
      "-": 41,
      "ZhuanYu": 16
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.model.Model.PREDICATE_SHOW_ALL_CARPARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Reverts the {@code model}\u0027s car park finder to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!model.canUndoCarparkFinder()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        model.undoCarparkFinder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        model.updateFilteredCarparkList(PREDICATE_SHOW_ALL_CARPARK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 1,
      "-": 22,
      "ZhuanYu": 8
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 147,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/parser/CarparkFinderParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.NotifyCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.QueryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkFinderParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        case ExitCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        case HelpCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        case FilterCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        case QueryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        case QueryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return new QueryCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        case NotifyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        case NotifyCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return new NotifyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 6,
      "YurouTang": 3,
      "-": 65,
      "ZhuanYu": 26
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Prefix PREFIX_CAR_NUM \u003d new Prefix(\"cn/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Prefix PREFIX_CAR_TYPE \u003d new Prefix(\"ct/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Prefix PREFIX_COORD \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Prefix PREFIX_FREE_PARK \u003d new Prefix(\"fp/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Prefix PREFIX_LOTS_AVAILABLE \u003d new Prefix(\"la/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Prefix PREFIX_NIGHT_PARK \u003d new Prefix(\"np/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Prefix PREFIX_SHORT_TERM \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Prefix PREFIX_TOTAL_LOTS \u003d new Prefix(\"tl/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Prefix PREFIX_TYPE_PARK \u003d new Prefix(\"tp/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    // following 2 are used by autocomplete mechanism, need to be combined with"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    // prefixes above."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final Prefix PREFIX_PARKING_TIME \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final Prefix PREFIX_NIGHT_PARKING \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 5,
      "-": 9,
      "ZhuanYu": 11
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "ZhuanYu": 5
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/parser/FilterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * To be added"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * To be added"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        String[] flags \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //System.out.println(flags[0]);   // [space]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //System.out.println(flags[1]);   // flag 1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //System.out.println(flags[2]);   // flag 2"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        return new FilterCommand(flags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YurouTang": 22,
      "ZhuanYu": 12
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private String[] ignoreKeywords \u003d new String[]{\"blk\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            keywords[i] \u003d keywords[i].toLowerCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        List nameKeywords \u003d new ArrayList\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        for (String ignore:ignoreKeywords) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            nameKeywords.removeAll(Collections.singleton(ignore.toUpperCase()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return new FindCommand(new CarparkContainsKeywordsPredicate(nameKeywords));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 14,
      "-": 26,
      "ZhuanYu": 5
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/parser/NotifyCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.NotifyCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Parses input arguments and creates a new NotifyCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class NotifyCommandParser implements Parser\u003cNotifyCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NotifyCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * and returns an NotifyCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public NotifyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            int time \u003d ParserUtil.parseTime(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return new NotifyCommand(time);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotifyCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 27
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Coordinate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.FreeParking;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.LotsAvailable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.NightParking;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.ShortTerm;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.TotalLots;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.TypeOfParking;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String time} into an {@code int time}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static int parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedTime)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return Integer.parseInt(trimmedTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String parking} into an {@code Address}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code parking} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String carNum} into a {@code CarparkNumber}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code carNum} is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static CarparkNumber parseCarparkNumber(String carNum) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(carNum);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedCarparkNumber \u003d carNum.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!CarparkNumber.isValidCarparkNumber(trimmedCarparkNumber)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(CarparkNumber.MESSAGE_CAR_NUM_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new CarparkNumber(trimmedCarparkNumber);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String carType} into a {@code CarparkType}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code carType} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static CarparkType parseCarparkType(String carType) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(carType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedCarparkType \u003d carType.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!CarparkType.isValidCarType(trimmedCarparkType)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(CarparkType.MESSAGE_CAR_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new CarparkType(trimmedCarparkType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String coordinate} into a {@code Coordinate}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code coordinate} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static Coordinate parseCoordinate(String coordinate) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(coordinate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedCoordinate \u003d coordinate.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!Coordinate.isValidCoordinate(trimmedCoordinate)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(Coordinate.MESSAGE_COORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new Coordinate(trimmedCoordinate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String freePark} into a {@code FreeParking}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code coordinate} is invalid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static FreeParking parseFreeParking(String freePark) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(freePark);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedFreeParking \u003d freePark.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!FreeParking.isValidFreePark(trimmedFreeParking)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(FreeParking.MESSAGE_FREE_PARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new FreeParking(trimmedFreeParking);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String lotsAvail} into a {@code LotsAvailable}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code lotsAvail} is invalid."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static LotsAvailable parseLotsAvailable(String lotsAvail) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedLotsAvailable \u003d lotsAvail.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedLotsAvailable)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new LotsAvailable(trimmedLotsAvailable);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String nightPark} into a {@code NightParking}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code nightPark} is invalid."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static NightParking parseNightParking(String nightPark) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(nightPark);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedNightParking \u003d nightPark.trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!NightParking.isValidNightPark(trimmedNightParking)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(NightParking.MESSAGE_NIGHT_PARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new NightParking(trimmedNightParking);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String shortTerm} into a {@code ShortTerm}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code shortTerm} is invalid."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static ShortTerm parseShortTerm(String shortTerm) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(shortTerm);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedShortTerm \u003d shortTerm.trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!ShortTerm.isValidShortTerm(trimmedShortTerm)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(ShortTerm.MESSAGE_SHORT_TERM_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new ShortTerm(trimmedShortTerm);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String totalLots} into an {@code TotalLots}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code totalLots} is invalid."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static TotalLots parseTotalLots(String totalLots) throws ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(totalLots);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedTotalLots \u003d totalLots.trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedTotalLots)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new TotalLots(trimmedTotalLots);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String typePark} into a {@code TypeOfParking}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code typePark} is invalid."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static TypeOfParking parseTypeOfParking(String typePark) throws ParseException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(typePark);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedTypeOfParking \u003d typePark.trim();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!TypeOfParking.isValidTypePark(trimmedTypeOfParking)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(TypeOfParking.MESSAGE_TYPE_PARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new TypeOfParking(trimmedTypeOfParking);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "ZhuanYu": 164
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/parser/Prefix.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "ZhuanYu": 5
    }
  },
  {
    "path": "src/main/java/seedu/parking/logic/parser/exceptions/ParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/CarparkFinder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.UniqueCarparkList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Wraps all data at the parking-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Duplicates are not allowed (by .isSameCarpark comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkFinder implements ReadOnlyCarparkFinder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final UniqueCarparkList carparks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparks \u003d new UniqueCarparkList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkFinder() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Creates an CarparkFinder using the car parks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkFinder(ReadOnlyCarparkFinder toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Replaces the contents of the car park list with {@code carparks}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code carparks} must not contain duplicate car parks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void setCarparks(List\u003cCarpark\u003e listCarparks) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparks.setCarparks(listCarparks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Resets the existing data of this {@code CarparkFinder} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void resetData(ReadOnlyCarparkFinder newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        setCarparks(newData.getCarparkList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //// car park-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a car park with the same identity as {@code carpark} exists in the car park finder."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean hasCarpark(Carpark carpark) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(carpark);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparks.contains(carpark);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Adds a car park to the car park finder."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The car park must not already exist in the car park finder."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void addCarpark(Carpark c) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparks.add(c);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Replaces the given car park {@code target} in the list with {@code editedCarpark}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code target} must exist in the car park finder."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The car park identity of {@code editedCarpark} must not be the same as"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * another existing car park in the car park finder."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void updateCarpark(Carpark target, Carpark editedCarpark) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(editedCarpark);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparks.setCarpark(target, editedCarpark);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Removes {@code key} from this {@code CarparkFinder}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code key} must exist in the car park finder."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void removeCarpark(Carpark key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparks.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparks.asUnmodifiableObservableList().size() + \" car parks\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public ObservableList\u003cCarpark\u003e getCarparkList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof CarparkFinder // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 carparks.equals(((CarparkFinder) other).carparks));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparks.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "ZhuanYu": 44
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    Predicate\u003cCarpark\u003e PREDICATE_SHOW_ALL_CARPARK \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    void resetData(ReadOnlyCarparkFinder newData);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /** Returns the CarparkFinder */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    ReadOnlyCarparkFinder getCarparkFinder();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a car park with the same identity as {@code carpark} exists in the car park finder."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    boolean hasCarpark(Carpark carpark);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Deletes the given car park."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The car park must exist in the car park finder."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    void deleteCarpark(Carpark target);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Adds the given car park."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code carpark} must not already exist in the car park finder."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    void addCarpark(Carpark carpark);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Replaces the given car park {@code target} with {@code editedCarpark}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code target} must exist in the car park finder."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The car park identity of {@code editedCarpark} must not be the same"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * as another existing car park in the car park finder."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    void updateCarpark(Carpark target, Carpark editedCarpark);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Updates with a list of car parks {@code listCarpark}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    void loadCarpark(List\u003cCarpark\u003e listCarpark);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /** Returns an unmodifiable view of the filtered car park list */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    ObservableList\u003cCarpark\u003e getFilteredCarparkList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Updates the filter of the filtered car park list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    void updateFilteredCarparkList(Predicate\u003cCarpark\u003e predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if the model has previous car park finder states to restore."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    boolean canUndoCarparkFinder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if the model has undone car park finder states to restore."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    boolean canRedoCarparkFinder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Restores the model\u0027s car park finder to its previous state."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    void undoCarparkFinder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Restores the model\u0027s car park finder to its previously undone state."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    void redoCarparkFinder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Saves the current car park finder state for undo/redo."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    void commitCarparkFinder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Compares the current car park finder state to its previous state."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    int compareCarparkFinder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "ZhuanYu": 44
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.model.CarparkFinderChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents the in-memory model of the car park finder data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final VersionedCarparkFinder versionedCarparkFinder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final FilteredList\u003cCarpark\u003e filteredCarparks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Initializes a ModelManager with the given carparkFinder and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public ModelManager(ReadOnlyCarparkFinder carparkFinder, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireAllNonNull(carparkFinder, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        logger.fine(\"Initializing with car park finder: \" + carparkFinder + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedCarparkFinder \u003d new VersionedCarparkFinder(carparkFinder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        filteredCarparks \u003d new FilteredList\u003c\u003e(versionedCarparkFinder.getCarparkList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this(new CarparkFinder(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void resetData(ReadOnlyCarparkFinder newData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedCarparkFinder.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        indicateCarparkFinderChanged();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public ReadOnlyCarparkFinder getCarparkFinder() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return versionedCarparkFinder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private void indicateCarparkFinderChanged() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        raise(new CarparkFinderChangedEvent(versionedCarparkFinder));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean hasCarpark(Carpark carpark) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(carpark);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return versionedCarparkFinder.hasCarpark(carpark);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void deleteCarpark(Carpark target) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedCarparkFinder.removeCarpark(target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        indicateCarparkFinderChanged();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void addCarpark(Carpark carpark) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedCarparkFinder.addCarpark(carpark);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        updateFilteredCarparkList(PREDICATE_SHOW_ALL_CARPARK);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        indicateCarparkFinderChanged();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void updateCarpark(Carpark target, Carpark editedCarpark) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireAllNonNull(target, editedCarpark);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedCarparkFinder.updateCarpark(target, editedCarpark);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        indicateCarparkFinderChanged();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void loadCarpark(List\u003cCarpark\u003e listCarkpark) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedCarparkFinder.setCarparks(listCarkpark);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        updateFilteredCarparkList(PREDICATE_SHOW_ALL_CARPARK);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        indicateCarparkFinderChanged();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Car Park List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Carpark} backed by the internal list of"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code versionedCarparkFinder}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public ObservableList\u003cCarpark\u003e getFilteredCarparkList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredCarparks);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void updateFilteredCarparkList(Predicate\u003cCarpark\u003e predicate) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        filteredCarparks.setPredicate(predicate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean canUndoCarparkFinder() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return versionedCarparkFinder.canUndo();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean canRedoCarparkFinder() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return versionedCarparkFinder.canRedo();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void undoCarparkFinder() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedCarparkFinder.undo();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        indicateCarparkFinderChanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void redoCarparkFinder() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedCarparkFinder.redo();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        indicateCarparkFinderChanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void commitCarparkFinder() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedCarparkFinder.commit();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int compareCarparkFinder() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return versionedCarparkFinder.compare();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return versionedCarparkFinder.equals(other.versionedCarparkFinder)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 filteredCarparks.equals(other.filteredCarparks);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 92,
      "ZhuanYu": 71
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/ReadOnlyCarparkFinder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Unmodifiable view of an car park finder"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public interface ReadOnlyCarparkFinder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns an unmodifiable view of the car parks list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * This list will not contain any duplicate car parks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    ObservableList\u003cCarpark\u003e getCarparkList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "ZhuanYu": 7
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Path carparkFinderFilePath \u003d Paths.get(\"data\" , \"carparkfinder.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Path getCarparkFinderFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparkFinderFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void setCarparkFinderFilePath(Path carparkFinderFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.carparkFinderFilePath \u003d carparkFinderFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 Objects.equals(carparkFinderFilePath, o.carparkFinderFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return Objects.hash(guiSettings, carparkFinderFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + carparkFinderFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "ZhuanYu": 10
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/VersionedCarparkFinder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * {@code CarparkFinder} that keeps track of its own history."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class VersionedCarparkFinder extends CarparkFinder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final List\u003cReadOnlyCarparkFinder\u003e carparkFinderStateList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public VersionedCarparkFinder(ReadOnlyCarparkFinder initialState) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkFinderStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkFinderStateList.add(new CarparkFinder(initialState));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Saves a copy of the current {@code CarparkFinder} state at the end of the state list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkFinderStateList.add(new CarparkFinder(this));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkFinderStateList.subList(currentStatePointer + 1, carparkFinderStateList.size()).clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Restores the car park finder to its previous state."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        resetData(carparkFinderStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Restores the car park finder to its previously undone state."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        resetData(carparkFinderStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Compares previous and current car park finder for changes."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int compare() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new NoComparableStateException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        int copyPointer \u003d currentStatePointer;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        List\u003cCarpark\u003e currList \u003d new ArrayList\u003c\u003e(carparkFinderStateList.get(copyPointer).getCarparkList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        copyPointer--;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        List\u003cCarpark\u003e prevList \u003d new ArrayList\u003c\u003e(carparkFinderStateList.get(copyPointer).getCarparkList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        currList.removeAll(prevList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return currList.size();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if {@code undo()} has car park finder states to undo."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if {@code redo()} has car park finder states to redo."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return currentStatePointer \u003c carparkFinderStateList.size() - 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!(other instanceof VersionedCarparkFinder)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder otherVersionedCarparkFinder \u003d (VersionedCarparkFinder) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return super.equals(otherVersionedCarparkFinder)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 carparkFinderStateList.equals(otherVersionedCarparkFinder.carparkFinderStateList)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedCarparkFinder.currentStatePointer;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            super(\"Current state pointer at start of carparkFinderState list, unable to undo.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            super(\"Current state pointer at end of carparkFinderState list, unable to redo.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Thrown when trying to {@code compare()} but can\u0027t."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static class NoComparableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private NoComparableStateException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            super(\"Current state pointer at start of carparkFinderState list, unable to compare.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 85,
      "ZhuanYu": 53
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/carpark/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a car park\u0027s parking."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The first character of the parking must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param address A valid parking."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "ZhuanYu": 5
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/carpark/Carpark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a car park."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class Carpark {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final CarparkNumber carparkNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final Coordinate coordinate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final LotsAvailable lotsAvailable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final TotalLots totalLots;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final CarparkType carparkType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final FreeParking freeParking;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final NightParking nightParking;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final ShortTerm shortTerm;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final TypeOfParking typeOfParking;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Carpark(Address address, CarparkNumber carparkNumber, CarparkType carparkType, Coordinate coordinate,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                   FreeParking freeParking, LotsAvailable lotsAvailable, NightParking nightParking,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                   ShortTerm shortTerm, TotalLots totalLots, TypeOfParking typeOfParking, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireAllNonNull(address, carparkNumber, carparkType, coordinate, freeParking, lotsAvailable,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                nightParking, shortTerm, totalLots, typeOfParking);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.carparkNumber \u003d carparkNumber;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.lotsAvailable \u003d lotsAvailable;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.carparkType \u003d carparkType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.coordinate \u003d coordinate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.freeParking \u003d freeParking;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.nightParking \u003d nightParking;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.shortTerm \u003d shortTerm;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.totalLots \u003d totalLots;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.typeOfParking \u003d typeOfParking;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            this.tags.addAll(tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkNumber getCarparkNumber() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparkNumber;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkType getCarparkType() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparkType;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Coordinate getCoordinate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return coordinate;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public FreeParking getFreeParking() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return freeParking;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public LotsAvailable getLotsAvailable() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return lotsAvailable;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public NightParking getNightParking() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return nightParking;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public ShortTerm getShortTerm() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return shortTerm;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public TotalLots getTotalLots() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return totalLots;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public TypeOfParking getTypeOfParking() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return typeOfParking;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if both car parks of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * This defines a weaker notion of equality between two car parks."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean isSameCarpark(Carpark otherCarpark) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (otherCarpark \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return otherCarpark !\u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getCarparkNumber().equals(getCarparkNumber())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getCoordinate().equals((getCoordinate()))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getLotsAvailable().equals(getLotsAvailable())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getTotalLots().equals(getTotalLots());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if both car parks have the same identity and data fields."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * This defines a stronger notion of equality between two car parks."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!(other instanceof Carpark)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Carpark otherCarpark \u003d (Carpark) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return otherCarpark.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getCarparkNumber().equals(getCarparkNumber())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getCarparkType().equals((getCarparkType()))"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getCoordinate().equals((getCoordinate()))"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getFreeParking().equals((getFreeParking()))"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getLotsAvailable().equals(getLotsAvailable())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getNightParking().equals(getNightParking())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getShortTerm().equals(getShortTerm())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getTotalLots().equals(getTotalLots())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getTypeOfParking().equals(getTypeOfParking())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getTags().equals(getTags());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return Objects.hash(address, carparkNumber, carparkType, coordinate, freeParking, lotsAvailable,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                nightParking, shortTerm, totalLots, typeOfParking, tags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        builder.append(getCarparkNumber())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Coordinate: \")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(getCoordinate())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Type: \")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(getCarparkType())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Total Lots: \")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(getTotalLots())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Lots Available: \")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(getLotsAvailable())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Free Parking: \")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(getFreeParking())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Night Parking: \")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(getNightParking())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Short Term Parking: \")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(getShortTerm())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Parking System: \")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(getTypeOfParking())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 2,
      "ZhuanYu": 178
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/carpark/CarparkContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Tests that a {@code Carpark}\u0027s {@code carparkNumber} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkContainsKeywordsPredicate implements Predicate\u003cCarpark\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean test(Carpark carpark) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(carpark.getCarparkNumber().value, keyword)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                                || StringUtil.containsWordIgnoreCase(carpark.getAddress().value, keyword)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                                || StringUtil.containsPartialWordIgnoreCase(carpark.getCarparkNumber().value, keyword)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                                || StringUtil.containsPartialWordIgnoreCase(carpark.getAddress().value, keyword)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                        );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof CarparkContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 keywords.equals(((CarparkContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 6,
      "-": 22,
      "ZhuanYu": 8
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/carpark/CarparkHasFreeParkingPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YurouTang"
        },
        "content": " * Tests that a {@code Carpark} has free parking."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YurouTang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "public class CarparkHasFreeParkingPredicate implements Predicate\u003cCarpark\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public CarparkHasFreeParkingPredicate(String day, String startTime, String endTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public boolean test(Carpark carpark) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        // To Be Implemented: Parsing of timing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        String timePeriod \u003d carpark.getFreeParking().value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        boolean hasFreeParkingTiming \u003d !timePeriod.equals(\"NO\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        boolean hasDay \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        boolean afterStart \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        boolean beforeEnd \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            if (hasFreeParkingTiming) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                // Check if timePeriod contains day"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                hasDay \u003d timePeriod.contains(day);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                // Split time period using spacing"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                String[] timePeriodArray \u003d timePeriod.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                // Get the last element of the array"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                String time \u003d timePeriodArray[timePeriodArray.length - 1];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                // Split the string into half by hyphen"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                String[] startAndEndTime \u003d time.split(\"-\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                SimpleDateFormat dateFormat1 \u003d new SimpleDateFormat(\"hhaa\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                SimpleDateFormat dateFormat2 \u003d new SimpleDateFormat(\"hh.mmaa\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                Date start \u003d dateFormat1.parse(startAndEndTime[0]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                Date end \u003d dateFormat2.parse(startAndEndTime[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                // Input time of user can only be of dateFormat2"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                Date inputStart \u003d dateFormat2.parse(startTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                Date inputEnd \u003d dateFormat2.parse(endTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                afterStart \u003d inputStart.after(start) || inputStart.equals(start);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                beforeEnd \u003d inputEnd.before(end) || inputEnd.equals(end);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            System.out.println(\"parse exception\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        return hasFreeParkingTiming \u0026\u0026 hasDay \u0026\u0026 afterStart \u0026\u0026 beforeEnd;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        return other \u003d\u003d this; // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //|| (other instanceof CarparkHasNightParkingPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //\u0026\u0026 keyword.equals(((CarparkHasNightParkingPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YurouTang": 72,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/carpark/CarparkHasNightParkingPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YurouTang"
        },
        "content": " * Tests that a {@code Carpark} has night parking."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "public class CarparkHasNightParkingPredicate implements Predicate\u003cCarpark\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public boolean test(Carpark carpark) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        return carpark.getNightParking().value.equals(\"YES\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        return other \u003d\u003d this; // short circuit if same object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //|| (other instanceof CarparkHasNightParkingPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //\u0026\u0026 keyword.equals(((CarparkHasNightParkingPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YurouTang": 20,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/carpark/CarparkIsOfTypePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YurouTang"
        },
        "content": " * Tests that a {@code Carpark} is of a specified car park type."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YurouTang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "public class CarparkIsOfTypePredicate implements Predicate\u003cCarpark\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    private final String carparkType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public CarparkIsOfTypePredicate(String carparkType) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        this.carparkType \u003d carparkType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public boolean test(Carpark carpark) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        switch (carparkType) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        case \"SURFACE\":"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            return carpark.getCarparkType().value.contains(\"SURFACE\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        case \"MULTISTOREY\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            return carpark.getCarparkType().value.contains(\"MULTI-STOREY\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        case \"BASEMENT\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            return carpark.getCarparkType().value.contains(\"BASEMENT\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        case \"MECHANISED\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            return carpark.getCarparkType().value.contains(\"MECHANISED\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        case \"COVERED\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            return carpark.getCarparkType().value.contains(\"COVERED\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            // should catch invalid input instead (to be implemented)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            return carpark.getCarparkType().value.contains(\"CAR PARK\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        return other \u003d\u003d this; // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //|| (other instanceof CarparkHasNightParkingPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //\u0026\u0026 keyword.equals(((CarparkHasNightParkingPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YurouTang": 48,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/carpark/CarparkNumber.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a car park\u0027s number."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCarparkNumber(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkNumber {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_CAR_NUM_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"Car park number should only contain alphanumeric characters and spaces, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    + \"and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The first character must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String CAR_NUM_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an {@code CarparkNumber}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param carNum A valid carpark number."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkNumber(String carNum) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(carNum);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        checkArgument(isValidCarparkNumber(carNum), MESSAGE_CAR_NUM_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.value \u003d carNum;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static boolean isValidCarparkNumber(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return test.matches(CAR_NUM_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof CarparkNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 value.equals(((CarparkNumber) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 55
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/carpark/CarparkType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a car park\u0027s type."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCarType(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_CAR_TYPE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"Car park type can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The first character must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String CAR_TYPE_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an {@code CarparkType}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param carType A valid carpark type."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkType(String carType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(carType);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        checkArgument(isValidCarType(carType), MESSAGE_CAR_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        value \u003d carType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a given string is a valid carpark type."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static boolean isValidCarType(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return test.matches(CAR_TYPE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof CarparkType // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 value.equals(((CarparkType) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 57
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/carpark/Coordinate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a car park\u0027s coordinate."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCoordinate(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class Coordinate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_COORD_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"Coordinate should only contain decimal numbers\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String COORD_VALIDATION_REGEX \u003d \"^(\\\\d+(\\\\.\\\\d+)?),\\\\s(\\\\d+(\\\\.\\\\d+)?)$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs a {@code Coordinate}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param coord A valid Coordinate."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Coordinate(String coord) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(coord);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        checkArgument(isValidCoordinate(coord), MESSAGE_COORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        value \u003d coord;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a given string is a valid coordinate."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static boolean isValidCoordinate(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return test.matches(COORD_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof Coordinate // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 value.equals(((Coordinate) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 53
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/carpark/FreeParking.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a car park\u0027s free parking."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFreePark(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class FreeParking {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_FREE_PARK_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"Car park free parking can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The first character must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String FREE_PARK_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an {@code FreeParking}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param freePark A valid free parking."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public FreeParking(String freePark) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(freePark);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        checkArgument(isValidFreePark(freePark), MESSAGE_FREE_PARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        value \u003d freePark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a given string is a valid free parking."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static boolean isValidFreePark(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return test.matches(FREE_PARK_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof FreeParking // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 value.equals(((FreeParking) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 57
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/carpark/LotsAvailable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents the lots available in a car park."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLotsAvailable(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class LotsAvailable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_LOTS_AVAIL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"Lots available should only contain numbers\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String LOTS_AVAIL_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an {@code TotalLots}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param lotsAvail A valid lots available number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public LotsAvailable(String lotsAvail) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(lotsAvail);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        checkArgument(isValidLotsAvailable(lotsAvail), MESSAGE_LOTS_AVAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.value \u003d lotsAvail;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a given string is a valid lots available number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static boolean isValidLotsAvailable(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return test.matches(LOTS_AVAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof LotsAvailable // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 value.equals(((LotsAvailable) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 53
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/carpark/NightParking.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a car park\u0027s night parking."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNightPark(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class NightParking {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_NIGHT_PARK_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"Car park night parking can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The first character must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String NIGHT_PARK_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an {@code NightParking}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param nightPark A valid night parking."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public NightParking(String nightPark) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(nightPark);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        checkArgument(isValidNightPark(nightPark), MESSAGE_NIGHT_PARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        value \u003d nightPark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a given string is a valid night parking."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static boolean isValidNightPark(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return test.matches(NIGHT_PARK_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof NightParking // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 value.equals(((NightParking) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 57
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/carpark/ShortTerm.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a car park\u0027s short term parking timing."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidShortTerm(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class ShortTerm {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_SHORT_TERM_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"Short term parking can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The first character must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String SHORT_TERM_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an {@code ShortTerm}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param shortTerm A valid short term parking."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public ShortTerm(String shortTerm) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(shortTerm);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        checkArgument(isValidShortTerm(shortTerm), MESSAGE_SHORT_TERM_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        value \u003d shortTerm;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a given string is a valid short term parking."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static boolean isValidShortTerm(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return test.matches(SHORT_TERM_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof ShortTerm // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 value.equals(((ShortTerm) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 57
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/carpark/TotalLots.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents the total lots in a car park."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTotalLots(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class TotalLots {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_TOTAL_LOTS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"Total lots should only contain numbers\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String TOTAL_LOTS_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an {@code TotalLots}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param totalLots A valid total lots number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public TotalLots(String totalLots) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(totalLots);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        checkArgument(isValidTotalLots(totalLots), MESSAGE_TOTAL_LOTS_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.value \u003d totalLots;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a given string is a valid total lots number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static boolean isValidTotalLots(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return test.matches(TOTAL_LOTS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof TotalLots // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 value.equals(((TotalLots) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 53
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/carpark/TypeOfParking.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents the type of parking system for a car park."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTypePark(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class TypeOfParking {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_TYPE_PARK_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"Type of parking system can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The first character must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String TYPE_PARK_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an {@code TypeOfParking}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param typePark A valid type of parking."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public TypeOfParking(String typePark) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(typePark);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        checkArgument(isValidTypePark(typePark), MESSAGE_TYPE_PARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        value \u003d typePark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a given string is a valid type of parking."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static boolean isValidTypePark(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return test.matches(TYPE_PARK_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof TypeOfParking // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 value.equals(((TypeOfParking) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 57
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/carpark/UniqueCarparkList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.exceptions.CarparkNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.exceptions.DuplicateCarparkException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * A list of car parks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * A car park is considered unique by comparing using {@code Carpark#isSameCarpark(Carpark)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * As such, adding and updating of car parks uses Carpark#isSameCarpark(Carpark) for equality so as to ensure"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * that the car park being added or updated is unique in terms of identity in the UniqueCarparkList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * However, the removal of a car park uses Carpark#equals(Object) so as to ensure that the car park with"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * @see Carpark#isSameCarpark(Carpark)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class UniqueCarparkList implements Iterable\u003cCarpark\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final ObservableList\u003cCarpark\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if the list contains an equivalent car park as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean contains(Carpark toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCarpark);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Adds a car park to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The car park must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void add(Carpark toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new DuplicateCarparkException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Replaces the car park {@code target} in the list with {@code editedCarpark}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The car park identity of {@code editedCarpark} must not be the same as another existing car park in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void setCarpark(Carpark target, Carpark editedCarpark) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireAllNonNull(target, editedCarpark);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new CarparkNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!target.isSameCarpark(editedCarpark) \u0026\u0026 contains(editedCarpark)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new DuplicateCarparkException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        internalList.set(index, editedCarpark);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Removes the equivalent car park from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The car park must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void remove(Carpark toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new CarparkNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void setCarparks(UniqueCarparkList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Replaces the contents of this list with {@code car parks}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code car parks} must not contain duplicate car parks."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void setCarparks(List\u003cCarpark\u003e carparks) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireAllNonNull(carparks);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!carparksAreUnique(carparks)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new DuplicateCarparkException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        internalList.setAll(carparks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public ObservableList\u003cCarpark\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Iterator\u003cCarpark\u003e iterator() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof UniqueCarparkList // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueCarparkList) other).internalList));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if {@code carparks} contains only unique car parks."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private boolean carparksAreUnique(List\u003cCarpark\u003e carparks) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (int i \u003d 0; i \u003c carparks.size() - 1; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            for (int j \u003d i + 1; j \u003c carparks.size(); j++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                if (carparks.get(i).isSameCarpark(carparks.get(j))) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 134
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/carpark/exceptions/CarparkNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Signals that the operation is unable to find the specified car park."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 6
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/carpark/exceptions/DuplicateCarparkException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Signals that the operation will result in duplicate Carparks (Carparks are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class DuplicateCarparkException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public DuplicateCarparkException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        super(\"Operation would result in duplicate car parks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 11
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a Tag."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/main/java/seedu/parking/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.CarparkFinder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ReadOnlyCarparkFinder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Coordinate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.FreeParking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.LotsAvailable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.NightParking;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.ShortTerm;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.TotalLots;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.TypeOfParking;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Contains utility methods for populating {@code CarparkFinder} with sample data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static Carpark[] getSampleCarpark() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new Carpark[] {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            new Carpark(new Address(\"BLK 174 PUNGGOL FIELD\"), new CarparkNumber(\"PL10\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new CarparkType(\"MULTI-STOREY CAR PARK\"), new Coordinate(\"36567.6957, 42059.8507\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new FreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\"), new LotsAvailable(\"188\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new NightParking(\"YES\"), new ShortTerm(\"WHOLE DAY\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new TotalLots(\"560\"), new TypeOfParking(\"ELECTRONIC PARKING\"), getTagSet(\"Home\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            new Carpark(new Address(\"BLK 175 PUNGGOL FIELD\"), new CarparkNumber(\"PL11\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new CarparkType(\"MULTI-STOREY CAR PARK\"), new Coordinate(\"36383.4393, 42222.0385\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new FreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\"), new LotsAvailable(\"236\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new NightParking(\"YES\"), new ShortTerm(\"WHOLE DAY\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new TotalLots(\"548\"), new TypeOfParking(\"ELECTRONIC PARKING\"), getTagSet(\"Friend\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            new Carpark(new Address(\"BLK 292 PUNGGOL CENTRAL\"), new CarparkNumber(\"PL14\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new CarparkType(\"MULTI-STOREY CAR PARK\"), new Coordinate(\"35982.6704, 42695.5596\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new FreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\"), new LotsAvailable(\"407\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new NightParking(\"YES\"), new ShortTerm(\"WHOLE DAY\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new TotalLots(\"734\"), new TypeOfParking(\"ELECTRONIC PARKING\"), getTagSet(\"Mall\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            new Carpark(new Address(\"BLK 642 PUNGGOL DRIVE\"), new CarparkNumber(\"PL17\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new CarparkType(\"MULTI-STOREY CAR PARK\"), new Coordinate(\"37244.6093, 42288.7308\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new FreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\"), new LotsAvailable(\"297\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new NightParking(\"YES\"), new ShortTerm(\"WHOLE DAY\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new TotalLots(\"609\"), new TypeOfParking(\"ELECTRONIC PARKING\"), getTagSet(\"Office\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            new Carpark(new Address(\"BLK 162 PUNGGOL CENTRAL\"), new CarparkNumber(\"PL18\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new CarparkType(\"MULTI-STOREY CAR PARK\"), new Coordinate(\"37013.9934, 41998.5248\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new FreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\"), new LotsAvailable(\"136\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new NightParking(\"YES\"), new ShortTerm(\"WHOLE DAY\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new TotalLots(\"615\"), new TypeOfParking(\"ELECTRONIC PARKING\"), getTagSet(\"Fun\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            new Carpark(new Address(\"BLK 186-188,190-192 PUNGGOL CENTRAL\"), new CarparkNumber(\"PL19\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new CarparkType(\"BASEMENT CAR PARK\"), new Coordinate(\"36545.1733, 42395.6863\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new FreeParking(\"NO\"), new LotsAvailable(\"67\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new NightParking(\"NO\"), new ShortTerm(\"7AM-7PM\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new TotalLots(\"291\"), new TypeOfParking(\"ELECTRONIC PARKING\"), getTagSet(\"Base\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        };"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static ReadOnlyCarparkFinder getSampleCarparkFinder() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkFinder sampleCf \u003d new CarparkFinder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (Carpark sampleCarpark : getSampleCarpark()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            sampleCf.addCarpark(sampleCarpark);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return sampleCf;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "ZhuanYu": 56
    }
  },
  {
    "path": "src/main/java/seedu/parking/storage/CarparkFinderStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.CarparkFinder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ReadOnlyCarparkFinder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a storage for {@link CarparkFinder}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public interface CarparkFinderStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    Path getCarparkFinderFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns CarparkFinder data as a {@link ReadOnlyCarparkFinder}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    Optional\u003cReadOnlyCarparkFinder\u003e readCarparkFinder() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @see #getCarparkFinderFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    Optional\u003cReadOnlyCarparkFinder\u003e readCarparkFinder(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Saves the given {@link ReadOnlyCarparkFinder} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param carparkFinder cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    void saveCarparkFinder(ReadOnlyCarparkFinder carparkFinder) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @see #saveCarparkFinder(ReadOnlyCarparkFinder)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    void saveCarparkFinder(ReadOnlyCarparkFinder carparkFinder, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 46
    }
  },
  {
    "path": "src/main/java/seedu/parking/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "ZhuanYu": 4
    }
  },
  {
    "path": "src/main/java/seedu/parking/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.model.CarparkFinderChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ReadOnlyCarparkFinder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public interface Storage extends CarparkFinderStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    Path getCarparkFinderFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    Optional\u003cReadOnlyCarparkFinder\u003e readCarparkFinder() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    void saveCarparkFinder(ReadOnlyCarparkFinder carparkFinder) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Saves the current version of the Car Park Finder to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    void handleCarparkFinderChangedEvent(CarparkFinderChangedEvent abce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "ZhuanYu": 12
    }
  },
  {
    "path": "src/main/java/seedu/parking/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.model.CarparkFinderChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ReadOnlyCarparkFinder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Manages storage of CarparkFinder data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private CarparkFinderStorage carparkFinderStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public StorageManager(CarparkFinderStorage carparkFinderStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.carparkFinderStorage \u003d carparkFinderStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CarparkFinder methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Path getCarparkFinderFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparkFinderStorage.getCarparkFinderFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Optional\u003cReadOnlyCarparkFinder\u003e readCarparkFinder() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return readCarparkFinder(carparkFinderStorage.getCarparkFinderFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Optional\u003cReadOnlyCarparkFinder\u003e readCarparkFinder(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparkFinderStorage.readCarparkFinder(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void saveCarparkFinder(ReadOnlyCarparkFinder carparkFinder) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        saveCarparkFinder(carparkFinder, carparkFinderStorage.getCarparkFinderFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void saveCarparkFinder(ReadOnlyCarparkFinder carparkFinder, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkFinderStorage.saveCarparkFinder(carparkFinder, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void handleCarparkFinderChangedEvent(CarparkFinderChangedEvent event) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            saveCarparkFinder(event.data);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "ZhuanYu": 26
    }
  },
  {
    "path": "src/main/java/seedu/parking/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a storage for {@link seedu.parking.model.UserPrefs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Saves the given {@link seedu.parking.model.UserPrefs} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "ZhuanYu": 5
    }
  },
  {
    "path": "src/main/java/seedu/parking/storage/XmlAdaptedCarpark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Coordinate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.FreeParking;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.LotsAvailable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.NightParking;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.ShortTerm;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.TotalLots;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.TypeOfParking;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * JAXB-friendly version of the Car park."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class XmlAdaptedCarpark {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Car park\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String carparkNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String carparkType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String coordinate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String freeParking;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String lotsAvailable;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String nightParking;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String shortTerm;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String totalLots;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String typeOfParking;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an XmlAdaptedCarpark."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public XmlAdaptedCarpark() {}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an {@code XmlAdaptedCarpark} with the given car park details."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public XmlAdaptedCarpark(String address, String carkparkNumber, String carparkType, String coordinate,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                             String freeParking, String lotsAvailable, String nightParking, String shortTerm,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                             String totalLots, String typeOfParking, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.carparkNumber \u003d carkparkNumber;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.carparkType \u003d carparkType;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.coordinate \u003d coordinate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.freeParking \u003d freeParking;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.lotsAvailable \u003d lotsAvailable;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.nightParking \u003d nightParking;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.shortTerm \u003d shortTerm;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.totalLots \u003d totalLots;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.typeOfParking \u003d typeOfParking;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Converts a given Car park into this class for JAXB use."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedCarpark"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public XmlAdaptedCarpark(Carpark source) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.carparkNumber \u003d source.getCarparkNumber().value;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.carparkType \u003d source.getCarparkType().value;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.coordinate \u003d source.getCoordinate().value;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.freeParking \u003d source.getFreeParking().value;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.lotsAvailable \u003d source.getLotsAvailable().value;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.nightParking \u003d source.getNightParking().value;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.shortTerm \u003d source.getShortTerm().value;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.totalLots \u003d source.getTotalLots().value;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.typeOfParking \u003d source.getTypeOfParking().value;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Converts this jaxb-friendly adapted Carpark object into the model\u0027s Carpark object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Carpark"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Carpark toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final List\u003cTag\u003e carparkTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            carparkTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (carparkNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    CarparkNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!CarparkNumber.isValidCarparkNumber(carparkNumber)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(CarparkNumber.MESSAGE_CAR_NUM_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final CarparkNumber modelCarparkNumber \u003d new CarparkNumber(carparkNumber);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (carparkType \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    CarparkType.class.getSimpleName()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!CarparkType.isValidCarType(carparkType)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(CarparkType.MESSAGE_CAR_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final CarparkType modelCarparkType \u003d new CarparkType(carparkType);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (coordinate \u003d\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    Coordinate.class.getSimpleName()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!Coordinate.isValidCoordinate(coordinate)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(Coordinate.MESSAGE_COORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final Coordinate modelCoordinate \u003d new Coordinate(coordinate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (totalLots \u003d\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    TotalLots.class.getSimpleName()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!TotalLots.isValidTotalLots(totalLots)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(TotalLots.MESSAGE_TOTAL_LOTS_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final TotalLots modelTotalLots \u003d new TotalLots(totalLots);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (lotsAvailable \u003d\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    LotsAvailable.class.getSimpleName()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!LotsAvailable.isValidLotsAvailable(lotsAvailable)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(LotsAvailable.MESSAGE_LOTS_AVAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final LotsAvailable modelLotsAvailable \u003d new LotsAvailable(lotsAvailable);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (freeParking \u003d\u003d null) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    FreeParking.class.getSimpleName()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!FreeParking.isValidFreePark(freeParking)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(FreeParking.MESSAGE_FREE_PARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final FreeParking modelFreeParking \u003d new FreeParking(freeParking);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (nightParking \u003d\u003d null) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    LotsAvailable.class.getSimpleName()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!NightParking.isValidNightPark(nightParking)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(NightParking.MESSAGE_NIGHT_PARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final NightParking modelNightParking \u003d new NightParking(nightParking);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (shortTerm \u003d\u003d null) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    ShortTerm.class.getSimpleName()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!ShortTerm.isValidShortTerm(shortTerm)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(ShortTerm.MESSAGE_SHORT_TERM_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final ShortTerm modelShortTerm \u003d new ShortTerm(shortTerm);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (typeOfParking \u003d\u003d null) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    TypeOfParking.class.getSimpleName()));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!TypeOfParking.isValidTypePark(typeOfParking)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(TypeOfParking.MESSAGE_TYPE_PARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final TypeOfParking modelTypeOfParking \u003d new TypeOfParking(typeOfParking);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(carparkTags);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new Carpark(modelAddress, modelCarparkNumber, modelCarparkType, modelCoordinate,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                modelFreeParking, modelLotsAvailable, modelNightParking, modelShortTerm, modelTotalLots,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                modelTypeOfParking, modelTags);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!(other instanceof XmlAdaptedCarpark)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlAdaptedCarpark otherCarpark \u003d (XmlAdaptedCarpark) other;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return Objects.equals(address, otherCarpark.address)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 Objects.equals(carparkNumber, otherCarpark.carparkNumber)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 Objects.equals(carparkType, otherCarpark.carparkType)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 Objects.equals(coordinate, otherCarpark.coordinate)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 Objects.equals(freeParking, otherCarpark.freeParking)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 Objects.equals(lotsAvailable, otherCarpark.lotsAvailable)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 Objects.equals(nightParking, otherCarpark.nightParking)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 Objects.equals(shortTerm, otherCarpark.shortTerm)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 Objects.equals(totalLots, otherCarpark.totalLots)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 Objects.equals(typeOfParking, otherCarpark.typeOfParking)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 tagged.equals(otherCarpark.tagged);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 237
    }
  },
  {
    "path": "src/main/java/seedu/parking/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted car park"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 1,
      "-": 58,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/main/java/seedu/parking/storage/XmlCarparkFinderStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ReadOnlyCarparkFinder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * A class to access CarparkFinder data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class XmlCarparkFinderStorage implements CarparkFinderStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlCarparkFinderStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public XmlCarparkFinderStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Path getCarparkFinderFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Optional\u003cReadOnlyCarparkFinder\u003e readCarparkFinder() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return readCarparkFinder(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Similar to {@link #readCarparkFinder()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Optional\u003cReadOnlyCarparkFinder\u003e readCarparkFinder(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            logger.info(\"CarparkFinder file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlSerializableCarparkFinder xmlCarparkFinder \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return Optional.of(xmlCarparkFinder.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void saveCarparkFinder(ReadOnlyCarparkFinder carparkFinder) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        saveCarparkFinder(carparkFinder, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Similar to {@link #saveCarparkFinder(ReadOnlyCarparkFinder)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void saveCarparkFinder(ReadOnlyCarparkFinder carparkFinder, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(carparkFinder);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableCarparkFinder(carparkFinder));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "ZhuanYu": 24
    }
  },
  {
    "path": "src/main/java/seedu/parking/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Stores carparkfinder data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Saves the given carparkfinder data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableCarparkFinder carparkFinder)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            XmlUtil.saveDataToFile(file, carparkFinder);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns car park finder in the file or an empty car park finder"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static XmlSerializableCarparkFinder loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableCarparkFinder.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "ZhuanYu": 10
    }
  },
  {
    "path": "src/main/java/seedu/parking/storage/XmlSerializableCarparkFinder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.CarparkFinder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ReadOnlyCarparkFinder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * An Immutable CarparkFinder that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "@XmlRootElement(name \u003d \"carparkfinder\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class XmlSerializableCarparkFinder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARPARK \u003d \"Car parks list contains duplicate car park(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private List\u003cXmlAdaptedCarpark\u003e carparks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Creates an empty XmlSerializableCarparkFinder."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public XmlSerializableCarparkFinder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public XmlSerializableCarparkFinder(ReadOnlyCarparkFinder src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparks.addAll(src.getCarparkList().stream().map(XmlAdaptedCarpark::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Converts this carparkfinder into the model\u0027s {@code CarparkFinder} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code XmlAdaptedCarpark}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkFinder toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkFinder carparkFinder \u003d new CarparkFinder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (XmlAdaptedCarpark c : carparks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            Carpark carpark \u003d c.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            if (carparkFinder.hasCarpark(carpark)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CARPARK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            carparkFinder.addCarpark(carpark);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparkFinder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!(other instanceof XmlSerializableCarparkFinder)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparks.equals(((XmlSerializableCarparkFinder) other).carparks);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "ZhuanYu": 27
    }
  },
  {
    "path": "src/main/java/seedu/parking/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.ui.CarparkPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"https://cs2103-ay1819s1-t09-4.github.io/main/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private void loadCarparkPage(Carpark carpark) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + carpark.getCarparkNumber());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private void handleCarparkPanelSelectionChangedEvent(CarparkPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        loadCarparkPage(event.getNewSelection());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "ZhuanYu": 10
    }
  },
  {
    "path": "src/main/java/seedu/parking/ui/CarparkCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * An UI component that displays information of a {@code Carpark}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "public class CarparkCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String FXML \u003d \"CarparkListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public final Carpark carpark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private Label carparkNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Label coordinate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Label carparkType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private Label totalLots;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Label lotsAvailable;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Label freeParking;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Label nightParking;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Label shortTerm;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Label parkingSystem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkCard(Carpark carpark, int displayedIndex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.carpark \u003d carpark;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkNumber.setText(carpark.getCarparkNumber().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        address.setText(carpark.getAddress().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkType.setText(carpark.getCarparkType().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        coordinate.setText(\"Coordinate: \" + carpark.getCoordinate().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (carpark.getTotalLots().value.equals(\"0\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            totalLots.setText(\"Total Lots: Not Available\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            lotsAvailable.setText(\"Lots Available: Not Available\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            totalLots.setText(\"Total Lots: \" + carpark.getTotalLots().value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            lotsAvailable.setText(\"Lots Available: \" + carpark.getLotsAvailable().value);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        freeParking.setText(\"Free Parking: \" + carpark.getFreeParking().value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        nightParking.setText(\"Night Parking: \" + carpark.getNightParking().value);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        shortTerm.setText(\"Short Term Parking: \" + carpark.getShortTerm().value);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        parkingSystem.setText(\"Parking System: \" + carpark.getTypeOfParking());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carpark.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        if (!(other instanceof CarparkCard)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        CarparkCard card \u003d (CarparkCard) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                \u0026\u0026 carpark.equals(card.carpark);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 14,
      "-": 50,
      "ZhuanYu": 31
    }
  },
  {
    "path": "src/main/java/seedu/parking/ui/CarparkListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.ui.CarparkPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.ui.NotifyCarparkRequestEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Panel containing the list of car parks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "public class CarparkListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String FXML \u003d \"CarparkListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static int selectIndex \u003d -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CarparkListPanel.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private ListView\u003cCarpark\u003e carparkListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkListPanel(ObservableList\u003cCarpark\u003e carparkList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        setConnections(carparkList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private void setConnections(ObservableList\u003cCarpark\u003e carparkList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkListView.setItems(carparkList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkListView.setCellFactory(listView -\u003e new CarparkListViewCell());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                        logger.fine(\"Selection in car park list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                        selectIndex \u003d carparkListView.getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                        raise(new CarparkPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Scrolls to the {@code CarparkCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            carparkListView.scrollTo(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            carparkListView.getFocusModel().focus(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            carparkListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private void handleNotifyCarparkRequestEvent(NotifyCarparkRequestEvent event) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Get the selected car park from the list view."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @return the index of the selected car park."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static int getSelectedIndex() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return selectIndex;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Carpark} using a {@code CarparkCard}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    class CarparkListViewCell extends ListCell\u003cCarpark\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        protected void updateItem(Carpark carpark, boolean empty) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            super.updateItem(carpark, empty);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            if (empty || carpark \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                setGraphic(new CarparkCard(carpark, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 19,
      "-": 56,
      "ZhuanYu": 27
    }
  },
  {
    "path": "src/main/java/seedu/parking/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "package seedu.parking.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "import static seedu.parking.logic.parser.CliSyntax.PREFIX_CAR_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "import static seedu.parking.logic.parser.CliSyntax.PREFIX_NIGHT_PARKING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "import static seedu.parking.logic.parser.CliSyntax.PREFIX_PARKING_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "import seedu.parking.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "import seedu.parking.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "import seedu.parking.logic.ListElementPointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "import seedu.parking.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "import seedu.parking.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "import seedu.parking.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "import seedu.parking.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "import seedu.parking.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "import seedu.parking.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "import seedu.parking.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    private static final int INDEX_OF_FILTER_FIRST_ARG \u003d 10;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    private static final int END_OF_FILTER_FIRST_ARG \u003d 13;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    //autocomplete variables"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    private Set\u003cString\u003e autoCompleteCommands \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    private int anchorPosition;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    private int caretPosition;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    private String selectedText \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        autoCompleteCommands.addAll("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            Arrays.asList(FindCommand.COMMAND_WORD, FindCommand.COMMAND_ALIAS));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        autoCompleteCommands.addAll("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            Arrays.asList(SelectCommand.COMMAND_WORD, SelectCommand.COMMAND_ALIAS));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        autoCompleteCommands.addAll("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            Arrays.asList(FilterCommand.COMMAND_WORD, FilterCommand.COMMAND_ALIAS));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        case TAB:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            if (keyEvent.isShiftDown()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "                //selectPreviousField();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "                autoComplete();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     * Handles autocomplete logic to either display full format, or select next"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     * select next argument placeholder if full format is already displayed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    private void autoComplete() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        String input \u003d commandTextField.getText().trim().toLowerCase();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        if (autoCompleteCommands.contains(input)) { //auto-complete the formats"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            displayFormat(input);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            // auto select first argument placeholder"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            commandTextField.requestFocus();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            switch(input) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "                String text \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "                int indexOfFirstSpace \u003d text.indexOf(\" \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "                commandTextField.selectRange("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "                    indexOfFirstSpace + 1, text.length());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            case FilterCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "                commandTextField.selectRange("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "                    INDEX_OF_FILTER_FIRST_ARG, END_OF_FILTER_FIRST_ARG);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "                caretPosition \u003d commandTextField.getCaretPosition();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        } else if (isFilterCommandFormat(input)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            int positionOfWeekDay \u003d input.indexOf(PREFIX_PARKING_TIME.toString()) + 3;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            int positionOfStartTime \u003d input.indexOf(PREFIX_PARKING_TIME.toString()) + 7;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            int positionOfEndTime \u003d input.indexOf(PREFIX_PARKING_TIME.toString()) + 18;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            int positionOfNightParking \u003d input.indexOf(PREFIX_NIGHT_PARKING.toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            int positionOfCarParkType \u003d input.indexOf(PREFIX_CAR_TYPE.toString()) + 4;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            int[] argumentsArray \u003d {positionOfWeekDay, positionOfStartTime,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "                positionOfEndTime, positionOfNightParking, positionOfCarParkType};"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            selectNextField(argumentsArray);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     * Displays the entire command format in command box"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     * @param command input by the user"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    private void displayFormat(String command) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        if (command.equals(FindCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            || command.equals(FindCommand.COMMAND_ALIAS)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            replaceText(FindCommand.FORMAT);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        } else if (command.equals(SelectCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            || command.equals(SelectCommand.COMMAND_ALIAS)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            replaceText(SelectCommand.FORMAT);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        } else if (command.equals(FilterCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            || command.equals(FilterCommand.COMMAND_ALIAS)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            replaceText(FilterCommand.FORMAT);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     * autocomplete helper function to check if the text input is already in"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     * filter command format."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     * @param input input by the user"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    private boolean isFilterCommandFormat(String input) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        return input.startsWith(\"filter\") \u0026\u0026 (input.contains(\"f/\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            || input.contains(\"n/\") || input.contains(\"ct/\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     * Checks the current position is in between which two fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     * And navigates to the next field"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     * @param argumentsArray array of field positions in the order of left to right"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     *                            last element is the end position of text input"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    private void selectNextField(int[] argumentsArray) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        boolean updatedSelection \u003d false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        for (int i \u003d 0; i \u003c argumentsArray.length - 1; i++) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            //check if the current position is in between ard[i] and ard[i + 1], if so, change selection"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            //to the placeholder of ard[i + 1]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            System.out.println(\"caret at: \" + caretPosition + \" current at: \" + argumentsArray[i]);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            if (caretPosition \u003e argumentsArray[i] \u0026\u0026 caretPosition \u003c argumentsArray[i + 1]) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "                commandTextField.positionCaret(argumentsArray[i + 1]);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "                changeSelectionToNextField();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "                updatedSelection \u003d true;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        if (!updatedSelection) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            //if caret position is not changed in the above for loop, it means"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            //the caret is currently at the last field, then change selection to"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            //the first arg so that continuously pressing tab will go in a cycle"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            commandTextField.positionCaret(argumentsArray[0]);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            changeSelectionToNextField();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        commandTextField.selectRange(anchorPosition, anchorPosition + selectedText.length());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        selectedText \u003d \"\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        caretPosition \u003d commandTextField.getCaretPosition();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     * Selects the word following the current caret position"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    private void changeSelectionToNextField() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        commandTextField.selectNextWord();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        anchorPosition \u003d commandTextField.getAnchor();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        selectedText \u003d commandTextField.getSelectedText().trim();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 150,
      "-": 143
    }
  },
  {
    "path": "src/main/java/seedu/parking/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 76,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/main/java/seedu/parking/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private CarparkListPanel carparkListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private StackPane carparkListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkListPanel \u003d new CarparkListPanel(logic.getFilteredCarparkList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkListPanelPlaceholder.getChildren().add(carparkListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getCarparkFinderFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkListPanel getCarparkListPanel() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparkListPanel;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 188,
      "ZhuanYu": 15
    }
  },
  {
    "path": "src/main/java/seedu/parking/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/main/java/seedu/parking/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.model.CarparkFinderChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void handleCarparkFinderChangedEvent(CarparkFinderChangedEvent abce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 79,
      "ZhuanYu": 4
    }
  },
  {
    "path": "src/main/java/seedu/parking/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Stops the UI. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    void stop();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/parking/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "ZhuanYu": 9
    }
  },
  {
    "path": "src/main/java/seedu/parking/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises the event via {@link EventsCenter#post(BaseEvent)}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(event);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Registers the object as an event handler at the {@link EventsCenter}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param handler usually {@code this}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 102,
      "ZhuanYu": 4
    }
  },
  {
    "path": "src/main/resources/view/CarparkListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cLabel fx:id\u003d\"carparkNumber\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$carparkNumber\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel fx:id\u003d\"carparkType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$carparkType\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel fx:id\u003d\"coordinate\" styleClass\u003d\"cell_small_label\" text\u003d \"\\$coordinate\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel text\u003d\"\u0026#10;\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel fx:id\u003d\"totalLots\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$totalLots\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel fx:id\u003d\"lotsAvailable\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$lotsAvailable\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel text\u003d\"\u0026#10;\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel fx:id\u003d\"freeParking\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$freeParking\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel fx:id\u003d\"nightParking\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nightParking\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel fx:id\u003d\"shortTerm\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$shortTerm\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel fx:id\u003d\"parkingSystem\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$parkingSystem\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "ZhuanYu": 11
    }
  },
  {
    "path": "src/main/resources/view/CarparkListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  \u003cListView fx:id\u003d\"carparkListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-base: #233343;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-control-inner-background: #233343;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: #233343;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     -fx-background-color: derive(#233343, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     -fx-background-color: derive(#233343, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     -fx-border-color: derive(#233343, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-border-color: derive(#233343, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-border-color: derive(#233343, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: #233343;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  -fx-text-fill: #233343;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: #233343;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: #233343;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: #233343;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "#filterField, #carparkListPanel, #carparkWebpage {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 312,
      "ZhuanYu": 39
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "          \u003cVBox fx:id\u003d\"carparkList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \u003cStackPane fx:id\u003d\"carparkListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  \"carparkFinderFilePath\" : \"carparkfinder.xml\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  \"carparkFinderFilePath\" : \"carparkfinder.xml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/data/XmlCarparkFinderStorageTest/invalidAndValidCarparkCarparkFinder.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003ccarparkfinder\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c!-- Valid Car park --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 508-517,520-533 HOUGANG AVENUE 10\u003c/address\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eHG38\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e34274.4064, 39391.9731\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e809\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e1279\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eHome\u003c/tagged\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c!-- Car park with invalid coordinate field --\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 508-517,520-533 HOUGANG AVENUE 10\u003c/address\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eHG38\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e34274.4064as, df39391.9731\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e809\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e1279\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eHome\u003c/tagged\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c/carparkfinder\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 31
    }
  },
  {
    "path": "src/test/data/XmlCarparkFinderStorageTest/invalidCarparkCarparkFinder.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003ccarparkfinder\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c!-- Car park with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK! 508-517,520-533@ HOUGANG AVENUE 10\u003c/address\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eHG38\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e34274.4064, 39391.9731\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003eabc\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e1279\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eHome\u003c/tagged\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c/carparkfinder\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 17
    }
  },
  {
    "path": "src/test/data/XmlSerializableCarparkFinderTest/duplicateCarparkCarparkFinder.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003ccarparkfinder\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 349-355 CLEMENTI AVE 2\u003c/address\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eC7\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e21017.6263, 33014.2438\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e0\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e0\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eOffice\u003c/tagged\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c!-- Car park with same identity as C7 --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 349-355 CLEMENTI AVE 2\u003c/address\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eC7\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e21017.6263, 33014.2438\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e0\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e0\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eOffice\u003c/tagged\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c/carparkfinder\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 33
    }
  },
  {
    "path": "src/test/data/XmlSerializableCarparkFinderTest/invalidCarparkCarparkFinder.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003ccarparkfinder\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c!-- Car park with invalid lots available field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 508-517,520-533 HOUGANG AVENUE 10\u003c/address\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eHG38\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e34274.4064, 39391.9731\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003eabc\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e1279\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eHome\u003c/tagged\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c/carparkfinder\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 18
    }
  },
  {
    "path": "src/test/data/XmlSerializableCarparkFinderTest/typicalCarparksCarparkFinder.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c!-- CarparkFinder save file which contains the same Car park values as in TypicalCarparks#getTypicalCarparkFinder() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003ccarparkfinder\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 349-355 CLEMENTI AVE 2\u003c/address\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eC7\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e21017.6263, 33014.2438\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e0\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e0\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eOffice\u003c/tagged\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 451 SENGKANG WEST WAY\u003c/address\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eSK88\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eMULTI-STOREY CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e32538.8707, 41769.3259\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eNO\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e109\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e369\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eHome\u003c/tagged\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eOffice\u003c/tagged\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 337-353/355-356 BUKIT BATOK ST 34\u003c/address\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eU25\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e18728.7311, 38350.9289\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e299\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e625\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eSchool\u003c/tagged\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 121E SENGKANG EAST WAY\u003c/address\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eSK23\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eMULTI-STOREY CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e36099.0459, 40907.1776\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e410\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e672\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eOffice\u003c/tagged\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 113 TO 120 POTONG PASIR AVENUE 1\u003c/address\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003ePP5\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e31328.0300, 35388.2500\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e92\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eNO\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e321\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 542A SERANGOON NORTH AVENUE 4\u003c/address\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eSE39\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eMULTI-STOREY CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e32271.7043, 39500.6075\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e39\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eNO\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003e7AM-10.30PM\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e206\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 676 WOODLANDS DRIVE 71\u003c/address\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eW676\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eBASEMENT CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e24373.6740, 46827.1390\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eNO\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e186\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e230\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c/carparkfinder\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 93
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidCarparkField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c!-- Car park with an invalid coordinate field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003ccarparks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003caddress\u003eBLK 508-517,520-533 HOUGANG AVENUE 10\u003c/address\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparkNumber\u003eHG38\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccoordinate\u003e9482asf424\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003clotsAvailable\u003e809\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ctotalLots\u003e1279\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ctagged\u003eHome\u003c/tagged\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c/carparks\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 15
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingCarparkField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c!-- Car park with missing number field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003ccarparks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003caddress\u003eBLK 508-517,520-533 HOUGANG AVENUE 10\u003c/address\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccoordinate\u003e34274.4064, 39391.9731\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003clotsAvailable\u003e809\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ctotalLots\u003e1279\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ctagged\u003eHome\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c/carparks\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 14
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempCarparkFinder.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003ccarparkfinder\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cid\u003e1\u003c/id\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfirstName\u003eJohn\u003c/firstName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003clastName\u003eDoe\u003c/lastName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cgithubUsername\u003e\u003c/githubUsername\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cstreet\u003e\u003c/street\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpostalCode\u003e\u003c/postalCode\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccity\u003e\u003c/city\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c/carparkfinder\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validCarpark.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003ccarparks\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003caddress\u003eBLK 508-517,520-533 HOUGANG AVENUE 10\u003c/address\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparkNumber\u003eHG38\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccoordinate\u003e34274.4064, 39391.9731\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003clotsAvailable\u003e809\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ctotalLots\u003e1279\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ctagged\u003eHome\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c/carparks\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 14
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validCarparkFinder.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003ccarparkfinder\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 5A GHIM MOH RD\u003c/address\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eGM1B\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eMULTI-STOREY CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e22985.4178, 32794.2010\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e0\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e0\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 49A WHAMPOA SOUTH\u003c/address\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eKB20\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eMULTI-STOREY CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e31686.3712, 33999.0332\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e222\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e245\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 643-646/649-662/665-667 HOUGANG AVENUE 8\u003c/address\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eHG42\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e33575.4429, 39573.3197\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e333\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e786\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 301/309 BUKIT BATOK STREET 31\u003c/address\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eU21\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e18569.9729, 37715.1464\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e131\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e1000\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 231/237 SERANGOON AVENUE 3\u003c/address\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eSE14\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e32080.9673, 37405.0495\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e87\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e187\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 562/565/560 ANG MO KIO STREET 54\u003c/address\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eA47\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e30885.4750, 39174.8899\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e192\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e303\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 137 EDGEDALE PLAINS\u003c/address\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003ePL12\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eMULTI-STOREY CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e36467.5455, 41586.9263\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e592\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e747\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 729/730 ANG MO KIO AVE 6/8\u003c/address\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eA55\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e29485.5000, 39515.4900\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e0\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e0\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 639/640 ROWELL COURT\u003c/address\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eCR30\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e30406.3770, 32213.3125\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eNO\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e71\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eNO\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003e7AM-10.30PM\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e100\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c/carparkfinder\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 111
    }
  },
  {
    "path": "src/test/java/guitests/GuiRobot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.BooleanSupplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.StageNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Robot used to simulate user actions on the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Extends {@link FxRobot} by adding some customized functionality and workarounds."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiRobot extends FxRobot {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 5000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isHeadlessMode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiRobot() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * unnecessary delays."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void pauseForHuman() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isHeadlessMode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if tests are run in headless mode."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isHeadlessMode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return isHeadlessMode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * EventTimeoutException is thrown if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * milliseconds."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param timeOut in milliseconds"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * EventTimeoutException is thrown if the time taken exceeds {@code timeOut}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event, int timeOut) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        int timePassed \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final int retryInterval \u003d 50;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!event.getAsBoolean()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            sleep(retryInterval);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            timePassed +\u003d retryInterval;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (timePassed \u003e\u003d timeOut) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EventTimeoutException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        pauseForHuman();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the window with {@code stageTitle} is currently open."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isWindowShown(String stageTitle) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return getNumberOfWindowsShown(stageTitle) \u003e\u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the number of windows with {@code stageTitle} that are currently open."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getNumberOfWindowsShown(String stageTitle) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return (int) listTargetWindows().stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the first stage, ordered by proximity to the current target window, with the stage title."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * The order that the windows are searched are as follows (proximity): current target window,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * children of the target window, rest of the windows."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * StageNotFoundException is thrown if the stage is not found."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getStage(String stageTitle) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(Stage.class::isInstance) // checks that the window is of type Stage"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Stage.class::cast)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetStage.orElseThrow(StageNotFoundException::new);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents an error which occurs when a timeout occurs when waiting for an event."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EventTimeoutException extends RuntimeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 116,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CarparkCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Provides a handle to a carpark card in the carpark list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lexzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "public class CarparkCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String CARPARK_NUMBER_FIELD_ID \u003d \"#carparkNumber\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String CARPARK_TYPE_FIELD_ID \u003d \"#carparkType\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String COORDINATE_FIELD_ID \u003d \"#coordinate\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String FREE_PARKING_FIELD_ID \u003d \"#freeParking\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String LOTS_AVAILABLE_FIELD_ID \u003d \"#lotsAvailable\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String NIGHT_PARKING_FIELD_ID \u003d \"#nightParking\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String SHORT_TERM_FIELD_ID \u003d \"#shortTerm\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String TOTAL_LOTS_FIELD_ID \u003d \"#totalLots\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String TYPE_OF_PARKING_FIELD_ID \u003d \"#parkingSystem\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label carparkNumberLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label carparkTypeLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label coordinateLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label freeParkingLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label lotsAvailableLabel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label nightParkingLabel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label shortTermLabel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label totalLotsLabel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label typeOfParkingLabel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkNumberLabel \u003d getChildNode(CARPARK_NUMBER_FIELD_ID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkTypeLabel \u003d getChildNode(CARPARK_TYPE_FIELD_ID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        coordinateLabel \u003d getChildNode(COORDINATE_FIELD_ID);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        freeParkingLabel \u003d getChildNode(FREE_PARKING_FIELD_ID);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        lotsAvailableLabel \u003d getChildNode(LOTS_AVAILABLE_FIELD_ID);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        nightParkingLabel \u003d getChildNode(NIGHT_PARKING_FIELD_ID);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        shortTermLabel \u003d getChildNode(SHORT_TERM_FIELD_ID);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        totalLotsLabel \u003d getChildNode(TOTAL_LOTS_FIELD_ID);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        typeOfParkingLabel \u003d getChildNode(TYPE_OF_PARKING_FIELD_ID);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getCarparkNumber() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return carparkNumberLabel.getText();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getCarparkType() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return carparkTypeLabel.getText();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getCoordinate() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return coordinateLabel.getText();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getFreeParking() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return freeParkingLabel.getText();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getLotsAvailable() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return lotsAvailableLabel.getText();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getNightParking() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return nightParkingLabel.getText();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getShortTerm() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return shortTermLabel.getText();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getTotalLots() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return totalLotsLabel.getText();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getTypeOfParking() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return typeOfParkingLabel.getText();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if this handle contains {@code carpark}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public boolean equals(Carpark carpark) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (carpark.getTotalLots().value.equals(\"0\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            if (!getTotalLots().equals(\"Total Lots: Not Available\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    || !getLotsAvailable().equals(\"Lots Available: Not Available\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            if (!getTotalLots().equals(\"Total Lots: \" + carpark.getTotalLots().value)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    || !getLotsAvailable().equals(\"Lots Available: \" + carpark.getLotsAvailable().value)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return getCarparkNumber().equals(carpark.getCarparkNumber().value)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 getAddress().equals(carpark.getAddress().value)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 getCarparkType().equals(carpark.getCarparkType().value)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 getCoordinate().equals(\"Coordinate: \" + carpark.getCoordinate().value)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 getFreeParking().equals(\"Free Parking: \" + carpark.getFreeParking().value)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 getNightParking().equals(\"Night Parking: \" + carpark.getNightParking().value)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 getShortTerm().equals(\"Short Term Parking: \" + carpark.getShortTerm().value)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 getTypeOfParking().equals(\"Parking System: \" + carpark.getTypeOfParking().value)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(carpark.getTags().stream()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 113,
      "ZhuanYu": 31
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CarparkListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Provides a handle for {@code CarparkListPanel} containing the list of {@code PersonCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "public class CarparkListPanelHandle extends NodeHandle\u003cListView\u003cCarpark\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String CARPARK_LIST_VIEW_ID \u003d \"#carparkListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Optional\u003cCarpark\u003e lastRememberedSelectedCarparkCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkListPanelHandle(ListView\u003cCarpark\u003e carparkListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        super(carparkListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Returns a handle to the selected {@code CarparkCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        List\u003cCarpark\u003e selectedPersonList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedPersonList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Person list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .map(CarparkCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedPersonList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        List\u003cCarpark\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Navigates the listview to display {@code carpark}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public void navigateToCard(Carpark person) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!getRootNode().getItems().contains(person)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Person does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the {@code PersonCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns the car park card handle of a car park associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkCardHandle getCarparkCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .map(CarparkCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .filter(handle -\u003e handle.equals(getCarpark(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private Carpark getCarpark(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Remembers the selected {@code CarparkCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public void rememberSelectedCarparkCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        List\u003cCarpark\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            lastRememberedSelectedCarparkCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            lastRememberedSelectedCarparkCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if the selected {@code CarparkCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * {@code rememberSelectedCarparkCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public boolean isSelectedCarparkCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        List\u003cCarpark\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return lastRememberedSelectedCarparkCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return !lastRememberedSelectedCarparkCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    || !lastRememberedSelectedCarparkCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 15,
      "-": 128,
      "ZhuanYu": 16
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final CarparkListPanelHandle carparkListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkListPanel \u003d new CarparkListPanelHandle(getChildNode(CarparkListPanelHandle.CARPARK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkListPanelHandle getCarparkListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparkListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 1,
      "-": 47,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/NodeHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides access to a node in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class NodeHandle\u003cT extends Node\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final T rootNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected NodeHandle(T rootNode) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.rootNode \u003d requireNonNull(rootNode);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected T getRootNode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return rootNode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * NodeNotFoundException is thrown if no such node exists."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cQ extends Node\u003e Q getChildNode(String query) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cQ\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clicks on the root node (i.e. itself)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void click() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.clickOn(rootNode);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * NodeNotFoundException is thrown if no such node exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/test/java/seedu/parking/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.CarparkFinder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ReadOnlyCarparkFinder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.storage.XmlSerializableCarparkFinder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    protected Supplier\u003cReadOnlyCarparkFinder\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyCarparkFinder\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            createDataFileWithData(new XmlSerializableCarparkFinder(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        userPrefs.setCarparkFinderFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns a defensive copy of the car park finder data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkFinder readStorageCarparkFinder() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return new CarparkFinder(storage.readCarparkFinder().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new AssertionError(\"Data is not in the CarparkFinder format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return storage.getCarparkFinderFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Model copy \u003d new ModelManager((model.getCarparkFinder()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredCarparkList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 95,
      "ZhuanYu": 25
    }
  },
  {
    "path": "src/test/java/seedu/parking/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Address App\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/java/seedu/parking/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 138,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/java/seedu/parking/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 91,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/java/seedu/parking/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/java/seedu/parking/commons/util/CollectionUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(objects);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(collection);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 115,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/test/java/seedu/parking/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(\"Typical App Title\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setAppTitle(\"Updated Title\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 115,
      "ZhuanYu": 16
    }
  },
  {
    "path": "src/test/java/seedu/parking/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/test/java/seedu/parking/commons/util/JsonUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import seedu.parking.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import seedu.parking.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //        .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "ZhuanYu": 20
    }
  },
  {
    "path": "src/test/java/seedu/parking/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 158,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/java/seedu/parking/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.CarparkFinder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.storage.XmlAdaptedCarpark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.storage.XmlSerializableCarparkFinder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.CarparkBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.CarparkFinderBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validCarparkFinder.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path MISSING_CARPARK_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingCarparkField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path INVALID_CARPARK_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidCarparkField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path VALID_CARPARK_FILE \u003d TEST_DATA_FOLDER.resolve(\"validCarpark.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempCarparkFinder.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String INVALID_COORDINATE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"BLK 508-517,520-533 HOUGANG AVENUE 10\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_CARPARK_NUMBER \u003d \"HG38\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_CARPARK_TYPE \u003d \"SURFACE CAR PARK\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_COORDINATE \u003d \"34274.4064, 39391.9731\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_FREE_PARKING \u003d \"SUN \u0026 PH FR 7AM-10.30PM\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_LOTS_AVAILABLE \u003d \"809\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_NIGHT_PARKING \u003d \"YES\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_SHORT_TERM \u003d \"WHOLE DAY\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_TOTAL_LOTS \u003d \"1279\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_TYPE_OF_PARKING \u003d \"ELECTRONIC PARKING\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"Home\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlUtil.getDataFromFile(null, CarparkFinder.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, CarparkFinder.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, CarparkFinder.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkFinder dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableCarparkFinder.class)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .toModelType();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(9, dataFromFile.getCarparkList().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void xmlAdaptedCarparkFromFile_fileWithMissingCarparkField_validResult() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlAdaptedCarpark actualCarpark \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                MISSING_CARPARK_FIELD_FILE, XmlAdaptedCarparkWithRootElement.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlAdaptedCarpark expectedCarpark \u003d new XmlAdaptedCarpark(VALID_ADDRESS, null,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                VALID_CARPARK_TYPE, VALID_COORDINATE, VALID_FREE_PARKING, VALID_LOTS_AVAILABLE,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                VALID_NIGHT_PARKING, VALID_SHORT_TERM, VALID_TOTAL_LOTS, VALID_TYPE_OF_PARKING,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedCarpark, actualCarpark);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void xmlAdaptedCarparkFromFile_fileWithInvalidCarparkField_validResult() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlAdaptedCarpark actualCarpark \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                INVALID_CARPARK_FIELD_FILE, XmlAdaptedCarparkWithRootElement.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlAdaptedCarpark expectedCarpark \u003d new XmlAdaptedCarpark(VALID_ADDRESS, VALID_CARPARK_NUMBER,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                VALID_CARPARK_TYPE, INVALID_COORDINATE, VALID_FREE_PARKING, VALID_LOTS_AVAILABLE,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                VALID_NIGHT_PARKING, VALID_SHORT_TERM, VALID_TOTAL_LOTS, VALID_TYPE_OF_PARKING,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedCarpark, actualCarpark);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void xmlAdaptedCarparkFromFile_fileWithValidCarpark_validResult() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlAdaptedCarpark actualCarpark \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                VALID_CARPARK_FILE, XmlAdaptedCarparkWithRootElement.class);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlAdaptedCarpark expectedCarpark \u003d new XmlAdaptedCarpark(VALID_ADDRESS, VALID_CARPARK_NUMBER,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                VALID_CARPARK_TYPE, VALID_COORDINATE, VALID_FREE_PARKING, VALID_LOTS_AVAILABLE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                VALID_NIGHT_PARKING, VALID_SHORT_TERM, VALID_TOTAL_LOTS, VALID_TYPE_OF_PARKING,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedCarpark, actualCarpark);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlUtil.saveDataToFile(null, new CarparkFinder());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new CarparkFinder());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlSerializableCarparkFinder dataToWrite \u003d new XmlSerializableCarparkFinder(new CarparkFinder());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlSerializableCarparkFinder dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                XmlSerializableCarparkFinder.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkFinderBuilder builder \u003d new CarparkFinderBuilder(new CarparkFinder());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        dataToWrite \u003d new XmlSerializableCarparkFinder("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                builder.withCarpark(new CarparkBuilder().build()).build());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableCarparkFinder.class);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedCarpark}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlRootElement(name \u003d \"carparks\")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static class XmlAdaptedCarparkWithRootElement extends XmlAdaptedCarpark {}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 12,
      "-": 83,
      "ZhuanYu": 66
    }
  },
  {
    "path": "src/test/java/seedu/parking/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/java/seedu/parking/logic/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 174,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/java/seedu/parking/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String messageSuccess \u003d String.format(ListCommand.MESSAGE_SUCCESS, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertCommandSuccess(listCommand, messageSuccess, model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        logic.getFilteredCarparkList().remove(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCarparkFinder(), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *      - {@code expectedModel}\u0027s car park finder was saved to the storage file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 1,
      "-": 102,
      "ZhuanYu": 14
    }
  },
  {
    "path": "src/test/java/seedu/parking/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.getTypicalCarparkFinder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.CarparkFinder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void execute_emptyCarparkFinder_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.commitCarparkFinder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_EMPTY, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void execute_nonEmptyCarparkFinder_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalCarparkFinder(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalCarparkFinder(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.resetData(new CarparkFinder());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.commitCarparkFinder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "ZhuanYu": 16
    }
  },
  {
    "path": "src/test/java/seedu/parking/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.parser.CliSyntax.PREFIX_CAR_NUM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.parser.CliSyntax.PREFIX_CAR_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.parser.CliSyntax.PREFIX_COORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.parser.CliSyntax.PREFIX_FREE_PARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.parser.CliSyntax.PREFIX_LOTS_AVAILABLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.parser.CliSyntax.PREFIX_NIGHT_PARK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.parser.CliSyntax.PREFIX_SHORT_TERM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.parser.CliSyntax.PREFIX_TOTAL_LOTS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.parser.CliSyntax.PREFIX_TYPE_PARK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.CarparkFinder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_ADDRESS_JULIETT \u003d \"BLK 508-517,520-533 HOUGANG AVENUE 10\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_ADDRESS_KILO \u003d \"BLK 537-543, 564-569 PASIR RIS STREET 51\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_CARPARK_NUMBER_JULIETT \u003d \"HG38\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_CARPARK_NUMBER_KILO \u003d \"PR13\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_CARPARK_TYPE_JULIETT \u003d \"SURFACE CAR PARK\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String VALID_CARPARK_TYPE_KILO \u003d \"MULTI-STOREY CAR PARK\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_COORDINATE_JULIETT \u003d \"34274.4064, 39391.9731\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_COORDINATE_KILO \u003d \"40942.8203, 39055.5703\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_FREE_PARKING_JULIETT \u003d \"SUN \u0026 PH FR 7AM-10.30PM\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_FREE_PARKING_KILO \u003d \"NO\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_LOTS_AVAILABLE_JULIETT \u003d \"529\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_LOTS_AVAILABLE_KILO \u003d \"0\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_NIGHT_PARKING_JULIETT \u003d \"YES\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_NIGHT_PARKING_KILO \u003d \"YES\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_SHORT_TERM_JULIETT \u003d \"WHOLE DAY\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_SHORT_TERM_KILO \u003d \"WHOLE DAY\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_TOTAL_LOTS_JULIETT \u003d \"900\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_TOTAL_LOTS_KILO \u003d \"0\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_TYPE_OF_PARKING_JULIETT \u003d \"ELECTRONIC PARKING\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_TYPE_OF_PARKING_KILO \u003d \"ELECTRONIC PARKING\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_TAG_HOME \u003d \"Home\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_TAG_OFFICE \u003d \"Office\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String CARPARK_NO_DESC_JULIETT \u003d \" \" + PREFIX_CAR_NUM + VALID_CARPARK_NUMBER_JULIETT;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String CARPARK_NO_DESC_KILO \u003d \" \" + PREFIX_CAR_NUM + VALID_CARPARK_NUMBER_KILO;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String CARPARK_TYPE_DESC_JULIETT \u003d \" \" + PREFIX_CAR_TYPE + VALID_CARPARK_TYPE_JULIETT;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String CARPARK_TYPE_DESC_KILO \u003d \" \" + PREFIX_CAR_TYPE + VALID_CARPARK_TYPE_KILO;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String COORDINATE_DESC_JULIETT \u003d \" \" + PREFIX_COORD + VALID_COORDINATE_JULIETT;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String COORDINATE_DESC_KILO \u003d \" \" + PREFIX_COORD + VALID_COORDINATE_KILO;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String FREE_PARKING_DESC_JULIETT \u003d \" \" + PREFIX_FREE_PARK + VALID_FREE_PARKING_JULIETT;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String FREE_PARKING_DESC_KILO \u003d \" \" + PREFIX_FREE_PARK + VALID_FREE_PARKING_KILO;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String LOTS_AVAILABLE_DESC_JULIETT \u003d \" \" + PREFIX_LOTS_AVAILABLE + VALID_LOTS_AVAILABLE_JULIETT;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String LOTS_AVAILABLE_DESC_KILO \u003d \" \" + PREFIX_LOTS_AVAILABLE + VALID_LOTS_AVAILABLE_KILO;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String NIGHT_PARKING_DESC_JULIETT \u003d \" \" + PREFIX_NIGHT_PARK + VALID_NIGHT_PARKING_JULIETT;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String NIGHT_PARKING_DESC_KILO \u003d \" \" + PREFIX_NIGHT_PARK + VALID_NIGHT_PARKING_KILO;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String SHORT_TERM_DESC_JULIETT \u003d \" \" + PREFIX_SHORT_TERM + VALID_SHORT_TERM_JULIETT;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String SHORT_TERM_DESC_KILO \u003d \" \" + PREFIX_SHORT_TERM + VALID_SHORT_TERM_KILO;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String TOTAL_LOTS_DESC_KILO \u003d \" \" + PREFIX_TOTAL_LOTS + VALID_TOTAL_LOTS_JULIETT;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String TOTAL_LOTS_DESC_JULIETT \u003d \" \" + PREFIX_TOTAL_LOTS + VALID_TOTAL_LOTS_KILO;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String TYPE_OF_PARKING_DESC_JULIETT \u003d \" \" + PREFIX_TYPE_PARK + VALID_TYPE_OF_PARKING_JULIETT;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String TYPE_OF_PARKING_DESC_KILO \u003d \" \" + PREFIX_TYPE_PARK + VALID_TYPE_OF_PARKING_KILO;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String ADDRESS_DESC_JULIETT \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_JULIETT;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String ADDRESS_DESC_KILO \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_KILO;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String TAG_DESC_OFFICE \u003d \" \" + PREFIX_TAG + VALID_TAG_OFFICE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String TAG_DESC_HOME \u003d \" \" + PREFIX_TAG + VALID_TAG_HOME;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // \u0027@\u0027 not allowed in carpark number."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_CARPARK_NO_DESC \u003d \" \" + PREFIX_CAR_NUM + \"TJ@1\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // \u0027!@\u0027 not allowed in carpark type."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_CARPARK_TYPE_DESC \u003d \" \" + PREFIX_CAR_TYPE + \"!@a\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // wrong format, has number."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_COORDINATE_DESC \u003d \" \" + PREFIX_COORD + \"asd!\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // \u0027!\u0027 not allowed"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_FREE_PARKING_DESC \u003d \" \" + PREFIX_FREE_PARK + \"!\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_LOTS_AVAILABLE_DESC \u003d \" \" + PREFIX_LOTS_AVAILABLE + \"asd\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_NIGHT_PARKING_DESC \u003d \" \" + PREFIX_NIGHT_PARK + \"%^\u0026\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_SHORT_TERM_DESC \u003d \" \" + PREFIX_SHORT_TERM + \"!@#\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_TOTAL_LOTS_DESC \u003d \" \" + PREFIX_TOTAL_LOTS + \"asd!@#\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_TYPE_OF_PARKING_LOTS_DESC \u003d \" \" + PREFIX_TYPE_PARK + \"!@#\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // empty string not allowed for addresses"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * - the car park finder and the filtered car park list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkFinder expectedCarparkFinder \u003d new CarparkFinder(actualModel.getCarparkFinder());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        List\u003cCarpark\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCarparkList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            assertEquals(expectedCarparkFinder, actualModel.getCarparkFinder());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredCarparkList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the carpark at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code model}\u0027s car park finder."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static void showCarparkAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCarparkList().size());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark carpark \u003d model.getFilteredCarparkList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        final String[] splitName \u003d carpark.getCarparkNumber().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        model.updateFilteredCarparkList(new CarparkContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(1, model.getFilteredCarparkList().size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Deletes the first carpark in {@code model}\u0027s filtered list from {@code model}\u0027s car park finder."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static void deleteFirstCarpark(Model model) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark firstCarpark \u003d model.getFilteredCarparkList().get(0);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        model.deleteCarpark(firstCarpark);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        model.commitCarparkFinder();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 32,
      "-": 68,
      "ZhuanYu": 84
    }
  },
  {
    "path": "src/test/java/seedu/parking/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.showCarparkAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.getTypicalCarparkFinder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalIndexes.INDEX_FIRST_CARPARK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalIndexes.INDEX_SECOND_CARPARK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCarparkFinder(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark carparkToDelete \u003d model.getFilteredCarparkList().get(INDEX_FIRST_CARPARK.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CARPARK_SUCCESS, carparkToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCarparkFinder(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        expectedModel.deleteCarpark(carparkToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.commitCarparkFinder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCarparkList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        showCarparkAtIndex(model, INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark carparkToDelete \u003d model.getFilteredCarparkList().get(INDEX_FIRST_CARPARK.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CARPARK_SUCCESS, carparkToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCarparkFinder(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        expectedModel.deleteCarpark(carparkToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.commitCarparkFinder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        showCarparkAtIndex(model, INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CARPARK;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of car park finder list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCarparkFinder().getCarparkList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark carparkToDelete \u003d model.getFilteredCarparkList().get(INDEX_FIRST_CARPARK.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCarparkFinder(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        expectedModel.deleteCarpark(carparkToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.commitCarparkFinder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // delete -\u003e first car park deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // undo -\u003e reverts CarparkFinder back to previous state and filtered car park list to show all persons"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.undoCarparkFinder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // redo -\u003e same first car park deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.redoCarparkFinder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCarparkList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // execution failed -\u003e car park finder state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // single CarparkFinder state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted carpark in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the carpark object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCarparkFinder(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        showCarparkAtIndex(model, INDEX_SECOND_CARPARK);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark carparkToDelete \u003d model.getFilteredCarparkList().get(INDEX_FIRST_CARPARK.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        expectedModel.deleteCarpark(carparkToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.commitCarparkFinder();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // delete -\u003e deletes second car park in unfiltered car park list / first car park in filtered car park list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // undo -\u003e reverts CarparkFinder back to previous state and filtered car park list to show all persons"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.undoCarparkFinder();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertNotEquals(carparkToDelete, model.getFilteredCarparkList().get(INDEX_FIRST_CARPARK.getZeroBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // redo -\u003e deletes same second carpark in unfiltered car park list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.redoCarparkFinder();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_CARPARK);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different carpark -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        model.updateFilteredCarparkList(p -\u003e false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(model.getFilteredCarparkList().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 36,
      "-": 108,
      "ZhuanYu": 33
    }
  },
  {
    "path": "src/test/java/seedu/parking/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.core.Messages.MESSAGE_CARPARKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.CHARLIE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.ECHO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.FOXTROT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.getTypicalCarparkFinder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCarparkFinder(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalCarparkFinder(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new CarparkContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new CarparkContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // different carpark -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CARPARKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.updateFilteredCarparkList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredCarparkList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CARPARKS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkContainsKeywordsPredicate predicate \u003d preparePredicate(\"U25 PP5 SE39\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.updateFilteredCarparkList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(Arrays.asList(CHARLIE, ECHO, FOXTROT), model.getFilteredCarparkList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses {@code userInput} into a {@code CarparkContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private CarparkContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new CarparkContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 2,
      "-": 55,
      "ZhuanYu": 28
    }
  },
  {
    "path": "src/test/java/seedu/parking/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.showCarparkAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.getTypicalCarparkFinder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalIndexes.INDEX_FIRST_CARPARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        model \u003d new ModelManager(getTypicalCarparkFinder(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getCarparkFinder(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String messageSuccess \u003d String.format(ListCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                model.getCarparkFinder().getCarparkList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, messageSuccess, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        showCarparkAtIndex(model, INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String messageSuccess \u003d String.format(ListCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                model.getCarparkFinder().getCarparkList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, messageSuccess, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 4,
      "Alvinnyk": 3,
      "-": 26,
      "ZhuanYu": 17
    }
  },
  {
    "path": "src/test/java/seedu/parking/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.deleteFirstCarpark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.getTypicalCarparkFinder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalCarparkFinder(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalCarparkFinder(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        deleteFirstCarpark(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        deleteFirstCarpark(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        model.undoCarparkFinder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        model.undoCarparkFinder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        deleteFirstCarpark(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        deleteFirstCarpark(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.undoCarparkFinder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.undoCarparkFinder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.redoCarparkFinder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.redoCarparkFinder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 4,
      "-": 28,
      "ZhuanYu": 17
    }
  },
  {
    "path": "src/test/java/seedu/parking/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.showCarparkAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.getTypicalCarparkFinder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalIndexes.INDEX_FIRST_CARPARK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalIndexes.INDEX_SECOND_CARPARK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalIndexes.INDEX_THIRD_CARPARK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCarparkFinder(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalCarparkFinder(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public SelectCommandTest() throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredCarparkList().size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_CARPARK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredCarparkList().size() + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        showCarparkAtIndex(model, INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        showCarparkAtIndex(expectedModel, INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        showCarparkAtIndex(model, INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        showCarparkAtIndex(expectedModel, INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_CARPARK;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of car park finder list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getCarparkFinder().getCarparkList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_CARPARK);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different carpark -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_CARPARK_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 9,
      "Alvinnyk": 13,
      "-": 81,
      "ZhuanYu": 20
    }
  },
  {
    "path": "src/test/java/seedu/parking/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.deleteFirstCarpark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.getTypicalCarparkFinder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalCarparkFinder(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalCarparkFinder(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        deleteFirstCarpark(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        deleteFirstCarpark(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        deleteFirstCarpark(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        deleteFirstCarpark(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.undoCarparkFinder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.undoCarparkFinder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 4,
      "-": 28,
      "ZhuanYu": 13
    }
  },
  {
    "path": "src/test/java/seedu/parking/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 149,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/java/seedu/parking/logic/parser/CarparkFinderParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalIndexes.INDEX_FIRST_CARPARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkFinderParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final CarparkFinderParser parser \u003d new CarparkFinderParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(new FindCommand(new CarparkContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARPARK.getOneBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_CARPARK), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 2,
      "-": 92,
      "ZhuanYu": 18
    }
  },
  {
    "path": "src/test/java/seedu/parking/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/test/java/seedu/parking/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import static seedu.parking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import static seedu.parking.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import static seedu.parking.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import static seedu.parking.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import seedu.parking.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 15,
      "-": 11,
      "ZhuanYu": 6
    }
  },
  {
    "path": "src/test/java/seedu/parking/logic/parser/NotifyCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.NotifyCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class NotifyCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private NotifyCommandParser parser \u003d new NotifyCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertParseSuccess(parser, \"60\", new NotifyCommand(60));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotifyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 28
    }
  },
  {
    "path": "src/test/java/seedu/parking/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalIndexes.INDEX_FIRST_CARPARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Coordinate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.FreeParking;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.LotsAvailable;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.NightParking;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.ShortTerm;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.TotalLots;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.TypeOfParking;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.Assert;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String INVALID_CARPARK_NUMBER \u003d \"R@chel\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String INVALID_CARPARK_TYPE \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String INVALID_COORDINATE \u003d \"+651234, a\u0026890\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String INVALID_FREE_PARKING \u003d \" \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String INVALID_LOTS_AVAILABLE \u003d \"YES\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String INVALID_NIGHT_PARKING \u003d \" \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String INVALID_SHORT_TERM \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String INVALID_TOTAL_LOTS \u003d \"-10\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String INVALID_TYPE_OF_PARKING \u003d \" \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"BLK 55 LENGKOK BAHRU\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_CARPARK_NUMBER \u003d \"BM12\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_CARPARK_TYPE \u003d \"SURFACE CAR PARK\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_COORDINATE \u003d \"25769.3044, 30009.7592\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_FREE_PARKING \u003d \"SUN \u0026 PH FR 7AM-10:30PM\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_LOTS_AVAILABLE \u003d \"26\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_NIGHT_PARKING \u003d \"YES\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_SHORT_TERM \u003d \"WHOLE DAY\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_TOTAL_LOTS \u003d \"60\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_TYPE_OF_PARKING \u003d \"ELECTRONIC PARKING\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"Home\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"Office\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(INDEX_FIRST_CARPARK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(INDEX_FIRST_CARPARK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseTime_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ParserUtil.parseTime(\"60.8\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseTime_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ParserUtil.parseTime(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseTime_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(60, ParserUtil.parseTime(\"60\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(60, ParserUtil.parseTime(\"  60  \"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseCarparkNumber_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCarparkNumber((String) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseCarparkNumber_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCarparkNumber(INVALID_CARPARK_NUMBER));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseCarparkNumber_validValueWithoutWhitespace_returnsCarparkNumber() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkNumber expectedCarparkNumber \u003d new CarparkNumber(VALID_CARPARK_NUMBER);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedCarparkNumber, ParserUtil.parseCarparkNumber(VALID_CARPARK_NUMBER));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseCarparkNumber_validValueWithWhitespace_returnsTrimmedCarparkNumber() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String carparkNumberWithWhitespace \u003d WHITESPACE + VALID_CARPARK_NUMBER + WHITESPACE;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkNumber expectedCarparkNumber \u003d new CarparkNumber(VALID_CARPARK_NUMBER);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedCarparkNumber, ParserUtil.parseCarparkNumber(carparkNumberWithWhitespace));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseCarparkType_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCarparkType((String) null));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseCarparkType_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCarparkType(INVALID_CARPARK_TYPE));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseCarparkType_validValueWithoutWhitespace_returnsCarparkType() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkType expectedCarparkType \u003d new CarparkType(VALID_CARPARK_TYPE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedCarparkType, ParserUtil.parseCarparkType(VALID_CARPARK_TYPE));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseCarparkType_validValueWithWhitespace_returnsTrimmedCarparkType() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String carparkTypeWithWhitespace \u003d WHITESPACE + VALID_CARPARK_TYPE + WHITESPACE;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkType expectedCarparkType \u003d new CarparkType(VALID_CARPARK_TYPE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedCarparkType, ParserUtil.parseCarparkType(carparkTypeWithWhitespace));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseCoordinate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCoordinate((String) null));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseCoordinate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCoordinate(INVALID_COORDINATE));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseCoordinate_validValueWithoutWhitespace_returnsCoordinate() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Coordinate expectedCoordinate \u003d new Coordinate(VALID_COORDINATE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedCoordinate, ParserUtil.parseCoordinate(VALID_COORDINATE));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseCoordinate_validValueWithWhitespace_returnsTrimmedCoordinate() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String coordinateWithWhitespace \u003d WHITESPACE + VALID_COORDINATE + WHITESPACE;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Coordinate expectedCoordinate \u003d new Coordinate(VALID_COORDINATE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedCoordinate, ParserUtil.parseCoordinate(coordinateWithWhitespace));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseFreeParking_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFreeParking((String) null));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseFreeParking_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseFreeParking(INVALID_FREE_PARKING));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseFreeParking_validValueWithoutWhitespace_returnsFreeParking() throws Exception {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        FreeParking expectedFreeParking \u003d new FreeParking(VALID_FREE_PARKING);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedFreeParking, ParserUtil.parseFreeParking(VALID_FREE_PARKING));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseFreeParking_validValueWithWhitespace_returnsTrimmedFreeParking() throws Exception {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String freeParkingWithWhitespace \u003d WHITESPACE + VALID_FREE_PARKING + WHITESPACE;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        FreeParking expectedFreeParking \u003d new FreeParking(VALID_FREE_PARKING);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedFreeParking, ParserUtil.parseFreeParking(freeParkingWithWhitespace));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseLotsAvailable_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseLotsAvailable((String) null));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseLotsAvailable_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseLotsAvailable(INVALID_LOTS_AVAILABLE));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseLotsAvailable_validValueWithoutWhitespace_returnsLotsAvailable() throws Exception {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        LotsAvailable expectedLotsAvailable \u003d new LotsAvailable(VALID_LOTS_AVAILABLE);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedLotsAvailable, ParserUtil.parseLotsAvailable(VALID_LOTS_AVAILABLE));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseLotsAvailable_validValueWithWhitespace_returnsTrimmedLotsAvailable() throws Exception {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String lotsAvailableWithWhitespace \u003d WHITESPACE + VALID_LOTS_AVAILABLE + WHITESPACE;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        LotsAvailable expectedLotsAvailable \u003d new LotsAvailable(VALID_LOTS_AVAILABLE);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedLotsAvailable, ParserUtil.parseLotsAvailable(lotsAvailableWithWhitespace));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseNightParking_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNightParking((String) null));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseNightParking_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseNightParking(INVALID_NIGHT_PARKING));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseNightParking_validValueWithoutWhitespace_returnsNightParking() throws Exception {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        NightParking expectedNightParking \u003d new NightParking(VALID_NIGHT_PARKING);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedNightParking, ParserUtil.parseNightParking(VALID_NIGHT_PARKING));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseNightParking_validValueWithWhitespace_returnsTrimmedNightParking() throws Exception {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String nightParkingWithWhitespace \u003d WHITESPACE + VALID_NIGHT_PARKING + WHITESPACE;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        NightParking expectedNightParking \u003d new NightParking(VALID_NIGHT_PARKING);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedNightParking, ParserUtil.parseNightParking(nightParkingWithWhitespace));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseShortTerm_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseShortTerm((String) null));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseShortTerm_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseShortTerm(INVALID_SHORT_TERM));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseShortTerm_validValueWithoutWhitespace_returnsShortTerm() throws Exception {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ShortTerm expectedShortTerm \u003d new ShortTerm(VALID_SHORT_TERM);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedShortTerm, ParserUtil.parseShortTerm(VALID_SHORT_TERM));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseShortTerm_validValueWithWhitespace_returnsTrimmedShortTerm() throws Exception {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String shortTermWithWhitespace \u003d WHITESPACE + VALID_SHORT_TERM + WHITESPACE;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ShortTerm expectedShortTerm \u003d new ShortTerm(VALID_SHORT_TERM);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedShortTerm, ParserUtil.parseShortTerm(shortTermWithWhitespace));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseTotalLots_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTotalLots((String) null));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseTotalLots_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTotalLots(INVALID_TOTAL_LOTS));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseTotalLots_validValueWithoutWhitespace_returnsTotalLots() throws Exception {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        TotalLots expectedTotalLots \u003d new TotalLots(VALID_TOTAL_LOTS);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedTotalLots, ParserUtil.parseTotalLots(VALID_TOTAL_LOTS));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseTotalLots_validValueWithWhitespace_returnsTrimmedTotalLots() throws Exception {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String totalLotsWithWhitespace \u003d WHITESPACE + VALID_TOTAL_LOTS + WHITESPACE;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        TotalLots expectedTotalLots \u003d new TotalLots(VALID_TOTAL_LOTS);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedTotalLots, ParserUtil.parseTotalLots(totalLotsWithWhitespace));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseTypeOfParking_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTypeOfParking((String) null));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseTypeOfParking_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTypeOfParking(INVALID_TYPE_OF_PARKING));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseTypeOfParking_validValueWithoutWhitespace_returnsTypeOfParking() throws Exception {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        TypeOfParking expectedTypeOfParking \u003d new TypeOfParking(VALID_TYPE_OF_PARKING);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedTypeOfParking, ParserUtil.parseTypeOfParking(VALID_TYPE_OF_PARKING));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void parseTypeOfParking_validValueWithWhitespace_returnsTrimmedTypeOfParking() throws Exception {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String typeOfParkingWithWhitespace \u003d WHITESPACE + VALID_TYPE_OF_PARKING + WHITESPACE;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        TypeOfParking expectedTypeOfParking \u003d new TypeOfParking(VALID_TYPE_OF_PARKING);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedTypeOfParking, ParserUtil.parseTypeOfParking(typeOfParkingWithWhitespace));"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 2,
      "-": 124,
      "ZhuanYu": 260
    }
  },
  {
    "path": "src/test/java/seedu/parking/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalIndexes.INDEX_FIRST_CARPARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_CARPARK));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 1,
      "-": 22,
      "ZhuanYu": 6
    }
  },
  {
    "path": "src/test/java/seedu/parking/model/CarparkFinderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_ADDRESS_JULIETT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_TAG_HOME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.ALFA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.JULIETT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.getTypicalCarparkFinder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.exceptions.DuplicateCarparkException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.CarparkBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkFinderTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final CarparkFinder carparkFinder \u003d new CarparkFinder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(Collections.emptyList(), carparkFinder.getCarparkList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkFinder.resetData(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void resetData_withValidReadOnlyCarparkFinder_replacesData() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkFinder newData \u003d getTypicalCarparkFinder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkFinder.resetData(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(newData, carparkFinder);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // Two car parks with the same identity fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark editedJuliett \u003d new CarparkBuilder(JULIETT).withAddress(VALID_ADDRESS_JULIETT).withTags(VALID_TAG_HOME)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        List\u003cCarpark\u003e newPersons \u003d Arrays.asList(JULIETT, editedJuliett);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkFinderStub newData \u003d new CarparkFinderStub(newPersons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        thrown.expect(DuplicateCarparkException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkFinder.resetData(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkFinder.hasCarpark(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void hasPerson_personNotInCarparkFinder_returnsFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(carparkFinder.hasCarpark(ALFA));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void hasPerson_personInCarparkFinder_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkFinder.addCarpark(ALFA);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(carparkFinder.hasCarpark(ALFA));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInCarparkFinder_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkFinder.addCarpark(JULIETT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark editedJuliett \u003d new CarparkBuilder(JULIETT).withAddress(VALID_ADDRESS_JULIETT).withTags(VALID_TAG_HOME)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(carparkFinder.hasCarpark(editedJuliett));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkFinder.getCarparkList().remove(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * A stub ReadOnlyCarparkFinder whose car parks list can violate interface constraints."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static class CarparkFinderStub implements ReadOnlyCarparkFinder {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        private final ObservableList\u003cCarpark\u003e carparks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkFinderStub(Collection\u003cCarpark\u003e carparks) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            this.carparks.setAll(carparks);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        public ObservableList\u003cCarpark\u003e getCarparkList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            return carparks;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 9,
      "-": 70,
      "ZhuanYu": 32
    }
  },
  {
    "path": "src/test/java/seedu/parking/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.model.Model.PREDICATE_SHOW_ALL_CARPARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.ALFA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.BRAVO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.CarparkFinderBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        modelManager.hasCarpark(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void hasPerson_personNotInCarparkFinder_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(modelManager.hasCarpark(ALFA));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void hasPerson_personInCarparkFinder_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        modelManager.addCarpark(ALFA);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(modelManager.hasCarpark(ALFA));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        modelManager.getFilteredCarparkList().remove(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkFinder carparkFinder \u003d new CarparkFinderBuilder().withCarpark(ALFA).withCarpark(BRAVO).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkFinder differentCarparkFinder \u003d new CarparkFinder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        modelManager \u003d new ModelManager(carparkFinder, userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(carparkFinder, userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // different carparkFinder -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentCarparkFinder, userPrefs)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        List\u003cString\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        temp.add(ALFA.getCarparkNumber().value);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String[] keywords \u003d temp.toArray(new String[0]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        modelManager.updateFilteredCarparkList(new CarparkContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(carparkFinder, userPrefs)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        modelManager.updateFilteredCarparkList(PREDICATE_SHOW_ALL_CARPARK);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        differentUserPrefs.setCarparkFinderFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(carparkFinder, differentUserPrefs)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 8,
      "-": 58,
      "ZhuanYu": 22
    }
  },
  {
    "path": "src/test/java/seedu/parking/model/VersionedCarparkFinderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.CHARLIE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.JULIETT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.KILO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.CarparkFinderBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class VersionedCarparkFinderTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final ReadOnlyCarparkFinder carparkFinderWithJuliett \u003d new CarparkFinderBuilder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withCarpark(JULIETT).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final ReadOnlyCarparkFinder carparkFinderWithKilo \u003d new CarparkFinderBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withCarpark(KILO).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final ReadOnlyCarparkFinder carparkFinderWithCharlie \u003d new CarparkFinderBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withCarpark(CHARLIE).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final ReadOnlyCarparkFinder emptyCarparkFinder \u003d new CarparkFinderBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void commit_singleCarparkFinder_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList(emptyCarparkFinder);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedCarparkFinder.commit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertCarparkFinderListStatus(versionedCarparkFinder,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                Collections.singletonList(emptyCarparkFinder),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void commit_multipleCarparkFinderPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder, carparkFinderWithJuliett, carparkFinderWithKilo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedCarparkFinder.commit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertCarparkFinderListStatus(versionedCarparkFinder,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                Arrays.asList(emptyCarparkFinder, carparkFinderWithJuliett, carparkFinderWithKilo),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                carparkFinderWithKilo,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void commit_multipleCarparkFinderPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder, carparkFinderWithJuliett, carparkFinderWithKilo);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCarparkFinder, 2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedCarparkFinder.commit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertCarparkFinderListStatus(versionedCarparkFinder,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                Collections.singletonList(emptyCarparkFinder),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void canUndo_multipleCarparkFinderPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder, carparkFinderWithJuliett, carparkFinderWithKilo);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(versionedCarparkFinder.canUndo());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void canUndo_multipleCarparkFinderPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder, carparkFinderWithJuliett, carparkFinderWithKilo);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCarparkFinder, 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(versionedCarparkFinder.canUndo());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void canUndo_singleCarparkFinder_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList(emptyCarparkFinder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(versionedCarparkFinder.canUndo());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void canUndo_multipleCarparkFinderPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder, carparkFinderWithJuliett, carparkFinderWithKilo);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCarparkFinder, 2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(versionedCarparkFinder.canUndo());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void canRedo_multipleCarparkFinderPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder, carparkFinderWithJuliett, carparkFinderWithKilo);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCarparkFinder, 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(versionedCarparkFinder.canRedo());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void canRedo_multipleCarparkFinderPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder, carparkFinderWithJuliett, carparkFinderWithKilo);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCarparkFinder, 2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(versionedCarparkFinder.canRedo());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void canRedo_singleCarparkFinder_returnsFalse() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList(emptyCarparkFinder);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(versionedCarparkFinder.canRedo());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void canRedo_multipleCarparkFinderPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder, carparkFinderWithJuliett, carparkFinderWithKilo);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(versionedCarparkFinder.canRedo());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void undo_multipleCarparkFinderPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder, carparkFinderWithJuliett, carparkFinderWithKilo);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedCarparkFinder.undo();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertCarparkFinderListStatus(versionedCarparkFinder,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                Collections.singletonList(emptyCarparkFinder),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                carparkFinderWithJuliett,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                Collections.singletonList(carparkFinderWithKilo));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void undo_multipleCarparkFinderPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder, carparkFinderWithJuliett, carparkFinderWithKilo);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCarparkFinder, 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedCarparkFinder.undo();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertCarparkFinderListStatus(versionedCarparkFinder,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                Arrays.asList(carparkFinderWithJuliett, carparkFinderWithKilo));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void undo_singleCarparkFinder_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList(emptyCarparkFinder);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertThrows(VersionedCarparkFinder.NoUndoableStateException.class, versionedCarparkFinder::undo);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void undo_multipleCarparkFinderPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder, carparkFinderWithJuliett, carparkFinderWithKilo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCarparkFinder, 2);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertThrows(VersionedCarparkFinder.NoUndoableStateException.class, versionedCarparkFinder::undo);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void redo_multipleCarparkFinderPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder, carparkFinderWithJuliett, carparkFinderWithKilo);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCarparkFinder, 1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedCarparkFinder.redo();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertCarparkFinderListStatus(versionedCarparkFinder,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                Arrays.asList(emptyCarparkFinder, carparkFinderWithJuliett),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                carparkFinderWithKilo,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void redo_multipleCarparkFinderPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder, carparkFinderWithJuliett, carparkFinderWithKilo);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCarparkFinder, 2);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedCarparkFinder.redo();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertCarparkFinderListStatus(versionedCarparkFinder,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                Collections.singletonList(emptyCarparkFinder),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                carparkFinderWithJuliett,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                Collections.singletonList(carparkFinderWithKilo));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void redo_singleCarparkFinder_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList(emptyCarparkFinder);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertThrows(VersionedCarparkFinder.NoRedoableStateException.class, versionedCarparkFinder::redo);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void redo_multipleCarparkFinderPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList("
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder, carparkFinderWithJuliett, carparkFinderWithKilo);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertThrows(VersionedCarparkFinder.NoRedoableStateException.class, versionedCarparkFinder::redo);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void compare_multipleCarparkFinderHaveTwoLeftOne_success() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList("
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder, carparkFinderWithJuliett, carparkFinderWithKilo);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(1, versionedCarparkFinder.compare());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void compare_multipleCarparkFinderHaveThreeLeftOne_success() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList("
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder, carparkFinderWithJuliett, carparkFinderWithKilo, carparkFinderWithCharlie);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCarparkFinder, 2);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(1, versionedCarparkFinder.compare());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void compare_singleCarparkFinder_throwsNoComparableStateException() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList(emptyCarparkFinder);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertThrows(VersionedCarparkFinder.NoComparableStateException.class, versionedCarparkFinder::compare);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void compare_multipleCarparkFinderPointerAtStartOfStateList_throwsNoComparableStateException() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList("
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyCarparkFinder, carparkFinderWithJuliett, carparkFinderWithKilo);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCarparkFinder, 2);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertThrows(VersionedCarparkFinder.NoComparableStateException.class, versionedCarparkFinder::compare);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d prepareCarparkFinderList(carparkFinderWithJuliett,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                carparkFinderWithKilo);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder copy \u003d prepareCarparkFinderList(carparkFinderWithJuliett, carparkFinderWithKilo);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(versionedCarparkFinder.equals(copy));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(versionedCarparkFinder.equals(versionedCarparkFinder));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(versionedCarparkFinder.equals(null));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(versionedCarparkFinder.equals(1));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder differentCarparkFinderList \u003d prepareCarparkFinderList("
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                carparkFinderWithKilo, carparkFinderWithCharlie);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(versionedCarparkFinder.equals(differentCarparkFinderList));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder differentCurrentStatePointer \u003d prepareCarparkFinderList("
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                carparkFinderWithJuliett, carparkFinderWithKilo);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCarparkFinder, 1);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(versionedCarparkFinder.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Asserts that {@code versionedCarparkFinder} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * states before {@code versionedCarparkFinder#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * and states after {@code versionedCarparkFinder#currentStatePointer}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private void assertCarparkFinderListStatus(VersionedCarparkFinder versionedCarparkFinder,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                                             List\u003cReadOnlyCarparkFinder\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                                             ReadOnlyCarparkFinder expectedCurrentState,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                                             List\u003cReadOnlyCarparkFinder\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(new CarparkFinder(versionedCarparkFinder), expectedCurrentState);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        while (versionedCarparkFinder.canUndo()) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            versionedCarparkFinder.undo();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (ReadOnlyCarparkFinder expectedCarparkFinder : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            assertEquals(expectedCarparkFinder, new CarparkFinder(versionedCarparkFinder));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            versionedCarparkFinder.redo();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (ReadOnlyCarparkFinder expectedCarparkFinder : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            versionedCarparkFinder.redo();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            assertEquals(expectedCarparkFinder, new CarparkFinder(versionedCarparkFinder));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(versionedCarparkFinder.canRedo());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedCarparkFinder.undo());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Creates and returns a {@code VersionedCarparkFinder} with the {@code CarparkFinderStates} added into it, and the"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code VersionedCarparkFinder#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private VersionedCarparkFinder prepareCarparkFinderList(ReadOnlyCarparkFinder... carparkFinderStates) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(carparkFinderStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedCarparkFinder versionedCarparkFinder \u003d new VersionedCarparkFinder(carparkFinderStates[0]);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (int i \u003d 1; i \u003c carparkFinderStates.length; i++) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            versionedCarparkFinder.resetData(carparkFinderStates[i]);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            versionedCarparkFinder.commit();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return versionedCarparkFinder;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Shifts the {@code versionedCarparkFinder#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedCarparkFinder versionedCarparkFinder, int count) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            versionedCarparkFinder.undo();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 138,
      "ZhuanYu": 199
    }
  },
  {
    "path": "src/test/java/seedu/parking/model/carpark/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/test/java/seedu/parking/model/carpark/CarparkContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.CarparkBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        CarparkContainsKeywordsPredicate firstPredicate \u003d new CarparkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        CarparkContainsKeywordsPredicate secondPredicate \u003d new CarparkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        CarparkContainsKeywordsPredicate firstPredicateCopy \u003d new CarparkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // different car park -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void test_carparkNumberContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        CarparkContainsKeywordsPredicate predicate \u003d new CarparkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                Collections.singletonList(\"A1\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(predicate.test(new CarparkBuilder().withCarparkNumber(\"A1\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        predicate \u003d new CarparkContainsKeywordsPredicate(Arrays.asList(\"PUNGGOL\", \"SERANGOON\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(predicate.test(new CarparkBuilder().withAddress(\"PUNGGOL SERANGOON\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        predicate \u003d new CarparkContainsKeywordsPredicate(Arrays.asList(\"A1\", \"KENT\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(predicate.test(new CarparkBuilder().withCarparkNumber(\"A1\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .withAddress(\"BLK 347 ANG MO KIO AVENUE 3\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        predicate \u003d new CarparkContainsKeywordsPredicate(Arrays.asList(\"a1\", \"nEwToN\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(predicate.test(new CarparkBuilder().withCarparkNumber(\"A1\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .withAddress(\"BLK 123 NEWTON SQUARE\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void test_carparkNumberDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkContainsKeywordsPredicate predicate \u003d new CarparkContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(predicate.test(new CarparkBuilder().withCarparkNumber(\"V6\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        predicate \u003d new CarparkContainsKeywordsPredicate(Arrays.asList(\"V32\", \"SENGKANG\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(predicate.test(new CarparkBuilder().withCarparkNumber(\"A29\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .withAddress(\"BLK 347 ANG MO KIO AVENUE 3\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // Keywords match car park type, free parking, but does not match address"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        predicate \u003d new CarparkContainsKeywordsPredicate(Arrays.asList(\"SURFACE\", \"7AM-10.30PM\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \"SENGKANG\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(predicate.test(new CarparkBuilder().withCarparkType(\"SURFACE CAR PARK\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .withFreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\").withAddress(\"BLK 347 ANG MO KIO AVENUE 3\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 8,
      "-": 49,
      "ZhuanYu": 26
    }
  },
  {
    "path": "src/test/java/seedu/parking/model/carpark/CarparkNumberTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkNumberTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new CarparkNumber(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void constructor_invalidCarparkNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String invalidCarparkName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new CarparkNumber(invalidCarparkName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void isValidCarparkNumber() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // null car park number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e CarparkNumber.isValidCarparkNumber(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // invalid car park number"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(CarparkNumber.isValidCarparkNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(CarparkNumber.isValidCarparkNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(CarparkNumber.isValidCarparkNumber(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(CarparkNumber.isValidCarparkNumber(\"a123*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-,\")); // special characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(CarparkNumber.isValidCarparkNumber(\"Z12 Z12 Z12\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // valid car park number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(CarparkNumber.isValidCarparkNumber(\"Z12\")); // alphanumeric only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(CarparkNumber.isValidCarparkNumber(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(CarparkNumber.isValidCarparkNumber(\"z12\")); // with small letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(CarparkNumber.isValidCarparkNumber(\"Z12123124123\")); // long number"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(CarparkNumber.isValidCarparkNumber(\"ZAWEAWDAWT16\")); // long alphabet"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 43
    }
  },
  {
    "path": "src/test/java/seedu/parking/model/carpark/CarparkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_ADDRESS_KILO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_CARPARK_NUMBER_KILO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_CARPARK_TYPE_KILO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_COORDINATE_KILO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_FREE_PARKING_KILO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_LOTS_AVAILABLE_KILO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_NIGHT_PARKING_KILO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_SHORT_TERM_KILO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_TAG_HOME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_TOTAL_LOTS_KILO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_TYPE_OF_PARKING_KILO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.ALFA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.BRAVO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.JULIETT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.CarparkBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "public class CarparkTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark carpark \u003d new CarparkBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carpark.getTags().remove(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public void isSameCarpark() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(JULIETT.isSameCarpark(JULIETT));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertFalse(JULIETT.isSameCarpark(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // different car park type and coordinate -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark editedJuliett \u003d new CarparkBuilder(JULIETT)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .withAddress(VALID_ADDRESS_KILO)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .withCarparkNumber(VALID_CARPARK_NUMBER_KILO)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .withCoordinate(VALID_COORDINATE_KILO)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .withLotsAvailable(VALID_LOTS_AVAILABLE_KILO)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .withTotalLots(VALID_TOTAL_LOTS_KILO).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertFalse(JULIETT.isSameCarpark(editedJuliett));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // different car park number -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        editedJuliett \u003d new CarparkBuilder(JULIETT).withCarparkNumber(VALID_CARPARK_NUMBER_KILO).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertFalse(JULIETT.isSameCarpark(editedJuliett));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // different free parking, different night parking, different tag -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        editedJuliett \u003d new CarparkBuilder(JULIETT).withFreeParking(VALID_FREE_PARKING_KILO)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .withNightParking(VALID_NIGHT_PARKING_KILO).withTags(VALID_TAG_HOME).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(JULIETT.isSameCarpark(editedJuliett));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // different name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        editedJuliett \u003d new CarparkBuilder(JULIETT).withCarparkType(VALID_LOTS_AVAILABLE_KILO)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .withShortTerm(VALID_SHORT_TERM_KILO).withTags(VALID_TAG_HOME).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(JULIETT.isSameCarpark(editedJuliett));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        editedJuliett \u003d new CarparkBuilder(JULIETT).withTypeOfParking(VALID_TYPE_OF_PARKING_KILO)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .withTags(VALID_TAG_HOME).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(JULIETT.isSameCarpark(editedJuliett));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark copyAlfa \u003d new CarparkBuilder(ALFA).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(ALFA.equals(copyAlfa));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(ALFA.equals(ALFA));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(ALFA.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(ALFA.equals(5));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different carpark -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(ALFA.equals(BRAVO));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Carpark editedAlfa \u003d new CarparkBuilder(ALFA).withCarparkNumber(VALID_CARPARK_NUMBER_KILO).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(ALFA.equals(editedAlfa));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        editedAlfa \u003d new CarparkBuilder(ALFA).withCarparkType(VALID_CARPARK_TYPE_KILO).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(ALFA.equals(editedAlfa));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        editedAlfa \u003d new CarparkBuilder(ALFA).withCoordinate(VALID_COORDINATE_KILO).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(ALFA.equals(editedAlfa));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // different parking -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        editedAlfa \u003d new CarparkBuilder(ALFA).withAddress(VALID_ADDRESS_KILO).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(ALFA.equals(editedAlfa));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        editedAlfa \u003d new CarparkBuilder(ALFA).withTags(VALID_TAG_HOME).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(ALFA.equals(editedAlfa));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 65,
      "ZhuanYu": 47
    }
  },
  {
    "path": "src/test/java/seedu/parking/model/carpark/CarparkTypeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkTypeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new CarparkType(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void constructor_invalidCarparkType_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String invalidCarparkType \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new CarparkType(invalidCarparkType));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void isValidCarType() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // null car park type"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e CarparkType.isValidCarType(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // invalid car park type"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(CarparkType.isValidCarType(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(CarparkType.isValidCarType(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // valid car park type"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(CarparkType.isValidCarType(\"COVERED CAR PARK\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(CarparkType.isValidCarType(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(CarparkType.isValidCarType(\"SURFACE/MULTI-STOREY CAR PARK\")); // long"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 37
    }
  },
  {
    "path": "src/test/java/seedu/parking/model/carpark/CoordinateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CoordinateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Coordinate(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void constructor_invalidCoordinate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Coordinate(invalidEmail));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void isValidCoordinate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // null coordinate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Coordinate.isValidCoordinate(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // blank coordinate"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"81695.6404\")); // missing y-coordinate"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"81695.6404 19937.3833\")); // missing \u0027,\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"19937.3833\")); // missing x-coordinate"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"81695@-\")); // invalid coordinate"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"81695.6404_19937.3833\")); // underscore in coordinate"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"81695 .6404, 19937.3833\")); // spaces in x-coordinate"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"81695.6404,19937.3833\")); // no spaces in x-coordinate"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\" 81695.6404,19937.3833\")); // leading space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"81695.6404,19937.3833 \")); // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"81695.6404,,19937.3833\")); // double \u0027,\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"816,95.6404,19937.3833\")); // \u0027,\u0027 symbol in x-coordinate"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"81695.6404,19937.38,33\")); // \u0027,\u0027 symbol in y-coordinate"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"81695.6404,.19937.3833\")); // y-coordinate starts with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"81695.6404,19937.3833.\")); // y-coordinate ends with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"81695.6404,-19937.3833\")); // y-coordinate starts with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"81695.6404,19937.3833-\")); // y-coordinate ends with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-, 19937.3833\")); // special characters x-coordinate"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"81695.6404, !#$%\u0026\u0027*+/\u003d?`{|}~^.-\")); // special characters y-coordinate"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"abcdef.ghjk, qwerty.uiop\")); // alphabets"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(Coordinate.isValidCoordinate(\"81+9e!, 1993e.3833\")); // mix of alphanumeric and special characters"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // valid coordinate"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(Coordinate.isValidCoordinate(\"81695.6404, 19937.3833\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(Coordinate.isValidCoordinate(\"816, 199\")); // minimal"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(Coordinate.isValidCoordinate(\"0.6404, 0.3833\")); // decimal only"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(Coordinate.isValidCoordinate(\"8169541231.64044124123, 199371231251.38331231241\")); // long all"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(Coordinate.isValidCoordinate(\"8169541231.6404, 199371231251.3833\")); // long number"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 63
    }
  },
  {
    "path": "src/test/java/seedu/parking/model/carpark/FreeParkingTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class FreeParkingTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new FreeParking(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void constructor_invalidFreeParking_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String invalidFreeParking \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new FreeParking(invalidFreeParking));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void isValidFreePark() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // null free parking"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FreeParking.isValidFreePark(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // invalid free parking"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(FreeParking.isValidFreePark(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(FreeParking.isValidFreePark(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // valid free parking"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(FreeParking.isValidFreePark(\"SUN \u0026 PH FR 7AM-10.30PM\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(FreeParking.isValidFreePark(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(FreeParking.isValidFreePark(\"NO\")); // long"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 37
    }
  },
  {
    "path": "src/test/java/seedu/parking/model/carpark/LotsAvailableTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class LotsAvailableTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new LotsAvailable(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void constructor_invalidLotsAvailable_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String invalidLotsAvailable \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new LotsAvailable(invalidLotsAvailable));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void isValidLotsAvailable() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // null lots available"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e LotsAvailable.isValidLotsAvailable(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // invalid lots available"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(LotsAvailable.isValidLotsAvailable(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(LotsAvailable.isValidLotsAvailable(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(LotsAvailable.isValidLotsAvailable(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(LotsAvailable.isValidLotsAvailable(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(LotsAvailable.isValidLotsAvailable(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(LotsAvailable.isValidLotsAvailable(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-,\")); // special characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // valid lots available"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(LotsAvailable.isValidLotsAvailable(\"911\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(LotsAvailable.isValidLotsAvailable(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(LotsAvailable.isValidLotsAvailable(\"124293842033123\")); // long numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 41
    }
  },
  {
    "path": "src/test/java/seedu/parking/model/carpark/NightParkingTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class NightParkingTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new NightParking(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void constructor_invalidNightParking_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String invalidNightParking \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new NightParking(invalidNightParking));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void isValidNightPark() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // null night parking"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e NightParking.isValidNightPark(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // invalid night parking"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(NightParking.isValidNightPark(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(NightParking.isValidNightPark(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // valid night parking"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(NightParking.isValidNightPark(\"NO\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(NightParking.isValidNightPark(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(NightParking.isValidNightPark(\"YES\")); // long"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 37
    }
  },
  {
    "path": "src/test/java/seedu/parking/model/carpark/ShortTermTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class ShortTermTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new ShortTerm(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void constructor_invalidShortTerm_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String invalidShortTerm \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new ShortTerm(invalidShortTerm));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void isValidShortTerm() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // null short term parking"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ShortTerm.isValidShortTerm(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // invalid short term parking"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(ShortTerm.isValidShortTerm(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(ShortTerm.isValidShortTerm(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // valid short term parking"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(ShortTerm.isValidShortTerm(\"WHOLE DAY\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(ShortTerm.isValidShortTerm(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(ShortTerm.isValidShortTerm(\"7AM-10.30PM\")); // long"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 37
    }
  },
  {
    "path": "src/test/java/seedu/parking/model/carpark/TotalLotsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class TotalLotsTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TotalLots(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void constructor_invalidTotalLots_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String invalidTotalLots \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TotalLots(invalidTotalLots));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void isValidTotalLots() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // null total lots"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e TotalLots.isValidTotalLots(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // invalid total lots"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(TotalLots.isValidTotalLots(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(TotalLots.isValidTotalLots(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(TotalLots.isValidTotalLots(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(TotalLots.isValidTotalLots(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(TotalLots.isValidTotalLots(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(TotalLots.isValidTotalLots(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-,\")); // special characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // valid total lots"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(TotalLots.isValidTotalLots(\"911\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(TotalLots.isValidTotalLots(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(TotalLots.isValidTotalLots(\"124293842033123\")); // long numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 41
    }
  },
  {
    "path": "src/test/java/seedu/parking/model/carpark/TypeOfParkingTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class TypeOfParkingTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TypeOfParking(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void constructor_invalidTypeOfParking_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String invalidTypeOfParking \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TypeOfParking(invalidTypeOfParking));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void isValidTypeOfParking() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // null type of parking"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e TypeOfParking.isValidTypePark(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // invalid type of parking"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(TypeOfParking.isValidTypePark(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(TypeOfParking.isValidTypePark(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // valid type of parking"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(TypeOfParking.isValidTypePark(\"COUPON PARKING\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(TypeOfParking.isValidTypePark(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(TypeOfParking.isValidTypePark(\"ELECTRONIC PARKING\")); // long TypeOfParking"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 37
    }
  },
  {
    "path": "src/test/java/seedu/parking/model/carpark/UniqueCarparkListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_ADDRESS_JULIETT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_ADDRESS_KILO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_TAG_HOME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.ALFA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.BRAVO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.JULIETT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.exceptions.CarparkNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.exceptions.DuplicateCarparkException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.CarparkBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class UniqueCarparkListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final UniqueCarparkList uniqueCarparkList \u003d new UniqueCarparkList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.contains(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(uniqueCarparkList.contains(ALFA));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(uniqueCarparkList.contains(ALFA));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.add(JULIETT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark editedJuliett \u003d new CarparkBuilder(JULIETT).withAddress(VALID_ADDRESS_JULIETT).withTags(VALID_TAG_HOME)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(uniqueCarparkList.contains(editedJuliett));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.add(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        thrown.expect(DuplicateCarparkException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.setCarpark(null, ALFA);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.setCarpark(ALFA, null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        thrown.expect(CarparkNotFoundException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.setCarpark(ALFA, ALFA);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.setCarpark(ALFA, ALFA);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        UniqueCarparkList expectedUniquePersonList \u003d new UniqueCarparkList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedUniquePersonList.add(ALFA);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueCarparkList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Carpark editedAlfa \u003d new CarparkBuilder(ALFA).withAddress(VALID_ADDRESS_KILO).withTags(VALID_TAG_HOME)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.setCarpark(ALFA, editedAlfa);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        UniqueCarparkList expectedUniquePersonList \u003d new UniqueCarparkList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedUniquePersonList.add(editedAlfa);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueCarparkList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.setCarpark(ALFA, BRAVO);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        UniqueCarparkList expectedUniquePersonList \u003d new UniqueCarparkList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedUniquePersonList.add(BRAVO);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueCarparkList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(BRAVO);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        thrown.expect(DuplicateCarparkException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.setCarpark(ALFA, BRAVO);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.remove(null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        thrown.expect(CarparkNotFoundException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.remove(ALFA);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.remove(ALFA);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        UniqueCarparkList expectedUniquePersonList \u003d new UniqueCarparkList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueCarparkList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.setCarparks((UniqueCarparkList) null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        UniqueCarparkList expectedUniquePersonList \u003d new UniqueCarparkList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedUniquePersonList.add(BRAVO);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.setCarparks(expectedUniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueCarparkList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.setCarparks((List\u003cCarpark\u003e) null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        List\u003cCarpark\u003e personList \u003d Collections.singletonList(BRAVO);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.setCarparks(personList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        UniqueCarparkList expectedUniquePersonList \u003d new UniqueCarparkList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedUniquePersonList.add(BRAVO);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueCarparkList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        List\u003cCarpark\u003e listWithDuplicatePersons \u003d Arrays.asList(ALFA, ALFA);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        thrown.expect(DuplicateCarparkException.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.setCarparks(listWithDuplicatePersons);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 29,
      "Alvinnyk": 1,
      "-": 116,
      "ZhuanYu": 41
    }
  },
  {
    "path": "src/test/java/seedu/parking/model/tag/TagTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/test/java/seedu/parking/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        userPrefs.setCarparkFinderFilePath(Paths.get(\"carparkfinder.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 119,
      "ZhuanYu": 15
    }
  },
  {
    "path": "src/test/java/seedu/parking/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.getTypicalCarparkFinder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.model.CarparkFinderChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.CarparkFinder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ReadOnlyCarparkFinder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlCarparkFinderStorage carparkFinderStorage \u003d new XmlCarparkFinderStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        storageManager \u003d new StorageManager(carparkFinderStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void carparkFinderReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         * {@link XmlCarparkFinderStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlCarparkFinderStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkFinder original \u003d getTypicalCarparkFinder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        storageManager.saveCarparkFinder(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ReadOnlyCarparkFinder retrieved \u003d storageManager.readCarparkFinder().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(original, new CarparkFinder(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void getCarparkFinderFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertNotNull(storageManager.getCarparkFinderFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void handleCarparkFinderChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlCarparkFinderStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        storage.handleCarparkFinderChangedEvent(new CarparkFinderChangedEvent(new CarparkFinder()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    class XmlCarparkFinderStorageExceptionThrowingStub extends XmlCarparkFinderStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public XmlCarparkFinderStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public void saveCarparkFinder(ReadOnlyCarparkFinder carparkFinder, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "ZhuanYu": 25
    }
  },
  {
    "path": "src/test/java/seedu/parking/storage/XmlAdaptedCarparkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import static seedu.parking.storage.XmlAdaptedCarpark.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import static seedu.parking.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import seedu.parking.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import seedu.parking.model.carpark.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import seedu.parking.model.carpark.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import seedu.parking.model.carpark.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import seedu.parking.model.carpark.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import seedu.parking.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class XmlAdaptedCarparkTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        XmlAdaptedCarpark carpark \u003d new XmlAdaptedCarpark(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        assertEquals(BENSON, carpark.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        XmlAdaptedCarpark carpark \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new XmlAdaptedCarpark(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, carpark::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        XmlAdaptedCarpark carpark \u003d new XmlAdaptedCarpark(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, carpark::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        XmlAdaptedCarpark carpark \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new XmlAdaptedCarpark(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, carpark::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        XmlAdaptedCarpark carpark \u003d new XmlAdaptedCarpark(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, carpark::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        XmlAdaptedCarpark carpark \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new XmlAdaptedCarpark(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, carpark::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        XmlAdaptedCarpark carpark \u003d new XmlAdaptedCarpark(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, carpark::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        XmlAdaptedCarpark carpark \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new XmlAdaptedCarpark(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, carpark::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        XmlAdaptedCarpark carpark \u003d new XmlAdaptedCarpark(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, carpark::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        XmlAdaptedCarpark carpark \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new XmlAdaptedCarpark(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, carpark::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 76,
      "-": 4,
      "ZhuanYu": 30
    }
  },
  {
    "path": "src/test/java/seedu/parking/storage/XmlCarparkFinderStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.ALFA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.HOTEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.INDIA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.getTypicalCarparkFinder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.CarparkFinder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ReadOnlyCarparkFinder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class XmlCarparkFinderStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlCarparkFinderStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void readCarparkFinder_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        readCarparkFinder(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private java.util.Optional\u003cReadOnlyCarparkFinder\u003e readCarparkFinder(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new XmlCarparkFinderStorage(Paths.get(filePath)).readCarparkFinder(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(readCarparkFinder(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        readCarparkFinder(\"NotXmlFormatCarparkFinder.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void readCarparkFinder_invalidCarparkCarparkFinder_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        readCarparkFinder(\"invalidCarparkCarparkFinder.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void readCarparkFinder_invalidAndValidPersonCarparkFinder_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        readCarparkFinder(\"invalidAndValidCarparkCarparkFinder.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void readAndSaveCarparkFinder_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempCarparkFinder.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkFinder original \u003d getTypicalCarparkFinder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlCarparkFinderStorage xmlCarparkFinderStorage \u003d new XmlCarparkFinderStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        xmlCarparkFinderStorage.saveCarparkFinder(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ReadOnlyCarparkFinder readBack \u003d xmlCarparkFinderStorage.readCarparkFinder(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(original, new CarparkFinder(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        original.addCarpark(HOTEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        original.removeCarpark(ALFA);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        xmlCarparkFinderStorage.saveCarparkFinder(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        readBack \u003d xmlCarparkFinderStorage.readCarparkFinder(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(original, new CarparkFinder(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        original.addCarpark(INDIA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        xmlCarparkFinderStorage.saveCarparkFinder(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        readBack \u003d xmlCarparkFinderStorage.readCarparkFinder().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(original, new CarparkFinder(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void saveCarparkFinder_nullCarparkFinder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        saveCarparkFinder(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Saves {@code carparkFinder} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private void saveCarparkFinder(ReadOnlyCarparkFinder carparkFinder, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            new XmlCarparkFinderStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .saveCarparkFinder(carparkFinder, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void saveCarparkFinder_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        saveCarparkFinder(new CarparkFinder(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "ZhuanYu": 44
    }
  },
  {
    "path": "src/test/java/seedu/parking/storage/XmlSerializableCarparkFinderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.CarparkFinder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.TypicalCarparks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class XmlSerializableCarparkFinderTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableCarparkFinderTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path TYPICAL_CARPARKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalCarparksCarparkFinder.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path INVALID_CARPARK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidCarparkCarparkFinder.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path DUPLICATE_CARPARK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateCarparkCarparkFinder.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void toModelType_typicalCarparksFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlSerializableCarparkFinder dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_CARPARKS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                XmlSerializableCarparkFinder.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkFinder carparkFinderFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkFinder typicalCarparksCarparkFinder \u003d TypicalCarparks.getTypicalCarparkFinder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(carparkFinderFromFile, typicalCarparksCarparkFinder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void toModelType_invalidCarparkFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlSerializableCarparkFinder dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_CARPARK_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                XmlSerializableCarparkFinder.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void toModelType_duplicateCarparks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlSerializableCarparkFinder dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_CARPARK_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                XmlSerializableCarparkFinder.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        thrown.expectMessage(XmlSerializableCarparkFinder.MESSAGE_DUPLICATE_CARPARK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "ZhuanYu": 23
    }
  },
  {
    "path": "src/test/java/seedu/parking/testutil/Assert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expected} Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expected, null, callable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                    VoidCallable callable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            callable.call();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable actualException) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!actualException.getClass().isAssignableFrom(expectedException)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        expectedException.getName(), actualException.getClass().getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(errorMessage, actualException);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(String.format("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function which does not return anything and may throw an exception."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface VoidCallable {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        void call() throws Exception;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/java/seedu/parking/testutil/CarparkBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.CarparkType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Coordinate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.FreeParking;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.LotsAvailable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.NightParking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.ShortTerm;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.TotalLots;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.TypeOfParking;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "public class CarparkBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String DEFAULT_CARPARK_NUMBER \u003d \"A1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String DEFAULT_CARPARK_TYPE \u003d \"DEFAULT CAR PARK\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String DEFAULT_COORDINATE \u003d \"11111.1111, 99999.9999\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String DEFAULT_FREE_PARKING \u003d \"YES\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String DEFAULT_LOTS_AVAILABLE \u003d \"1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String DEFAULT_NIGHT_PARKING \u003d \"NO\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String DEFAULT_SHORT_TERM \u003d \"SOME DAY\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String DEFAULT_TOTAL_LOTS \u003d \"9000\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String DEFAULT_TYPE_OF_PARKING \u003d \"OLD SCHOOL PARKING\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private CarparkNumber carparkNumber;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private CarparkType carparkType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private Coordinate coordinate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private FreeParking freeParking;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private LotsAvailable lotsAvailable;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private NightParking nightParking;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private ShortTerm shortTerm;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private TotalLots totalLots;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private TypeOfParking typeOfParking;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkNumber \u003d new CarparkNumber(DEFAULT_CARPARK_NUMBER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkType \u003d new CarparkType(DEFAULT_CARPARK_TYPE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        coordinate \u003d new Coordinate(DEFAULT_COORDINATE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        freeParking \u003d new FreeParking(DEFAULT_FREE_PARKING);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        lotsAvailable \u003d new LotsAvailable(DEFAULT_LOTS_AVAILABLE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        nightParking \u003d new NightParking(DEFAULT_NIGHT_PARKING);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        shortTerm \u003d new ShortTerm(DEFAULT_SHORT_TERM);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        totalLots \u003d new TotalLots(DEFAULT_TOTAL_LOTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        typeOfParking \u003d new TypeOfParking(DEFAULT_TYPE_OF_PARKING);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Initializes the CarparkBuilder with the data of {@code carparkToCopy}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder(Carpark carparkToCopy) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkNumber \u003d carparkToCopy.getCarparkNumber();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkType \u003d carparkToCopy.getCarparkType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        coordinate \u003d carparkToCopy.getCoordinate();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        freeParking \u003d carparkToCopy.getFreeParking();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        lotsAvailable \u003d carparkToCopy.getLotsAvailable();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        nightParking \u003d carparkToCopy.getNightParking();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        shortTerm \u003d carparkToCopy.getShortTerm();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        totalLots \u003d carparkToCopy.getTotalLots();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        typeOfParking \u003d carparkToCopy.getTypeOfParking();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        address \u003d carparkToCopy.getAddress();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(carparkToCopy.getTags());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code CarparkNumber} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withCarparkNumber (String carparkNumber) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.carparkNumber \u003d new CarparkNumber(carparkNumber);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code CarparkType} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withCarparkType(String carparkType) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.carparkType \u003d new CarparkType(carparkType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code Coordinate} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withCoordinate(String coordinate) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.coordinate \u003d new Coordinate(coordinate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code FreeParking} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withFreeParking(String freeParking) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.freeParking \u003d new FreeParking(freeParking);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code LotsAvailable} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withLotsAvailable(String lotsAvailable) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.lotsAvailable \u003d new LotsAvailable(lotsAvailable);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code NightParking} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withNightParking(String nightParking) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.nightParking \u003d new NightParking(nightParking);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code ShortTerm} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withShortTerm(String shortTerm) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.shortTerm \u003d new ShortTerm(shortTerm);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code TotalLots} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withTotalLots(String totalLots) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.totalLots \u003d new TotalLots(totalLots);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code TypeOfParking} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withTypeOfParking(String typeOfParking) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.typeOfParking \u003d new TypeOfParking(typeOfParking);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code Address} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Builds a {@code Carpark} that we are building."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public Carpark build() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return new Carpark(address, carparkNumber, carparkType, coordinate,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            freeParking, lotsAvailable, nightParking, shortTerm, totalLots, typeOfParking, tags);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 153,
      "ZhuanYu": 23
    }
  },
  {
    "path": "src/test/java/seedu/parking/testutil/CarparkFinderBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.CarparkFinder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * A utility class to help with building CarparkFinder objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " *     {@code CarparkFinder cf \u003d new CarparkFinderBuilder().withCarpark(\"Y16\", \"BLK 349-355 CLEMENTI AVE 2\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkFinderBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private CarparkFinder carparkFinder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkFinderBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkFinder \u003d new CarparkFinder();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkFinderBuilder(CarparkFinder carparkFinder) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.carparkFinder \u003d carparkFinder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Adds a new {@code Carpark} to the {@code CarparkFinder} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkFinderBuilder withCarpark(Carpark carpark) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkFinder.addCarpark(carpark);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkFinder build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparkFinder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 34
    }
  },
  {
    "path": "src/test/java/seedu/parking/testutil/EventsUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper methods related to events."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers. This method will return successfully after the {@code event}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * has been posted to all subscribers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postNow(BaseEvent event) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().interact(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers at some unspecified time in the future."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postLater(BaseEvent event) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/test/java/seedu/parking/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import static seedu.parking.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import static seedu.parking.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import static seedu.parking.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import static seedu.parking.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import static seedu.parking.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import seedu.parking.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import seedu.parking.logic.commands.EditCommand.EditCarparkDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import seedu.parking.model.carpark.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import seedu.parking.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Returns an add command string for adding the {@code carpark}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//    public static String getAddCommand(Person carpark) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(carpark);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Returns the part of command string for the given {@code carpark}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//    public static String getPersonDetails(Person carpark) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        sb.append(PREFIX_NAME + carpark.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        sb.append(PREFIX_PHONE + carpark.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        sb.append(PREFIX_EMAIL + carpark.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        sb.append(PREFIX_ADDRESS + carpark.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        carpark.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Returns the part of command string for the given {@code EditCarparkDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public static String getEditPersonDescriptorDetails(EditCarparkDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//        descriptor.getAddress().ifPresent(parking -\u003e sb.append(PREFIX_ADDRESS).append(parking.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 35,
      "-": 8,
      "ZhuanYu": 19
    }
  },
  {
    "path": "src/test/java/seedu/parking/testutil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/java/seedu/parking/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import seedu.parking.model.carpark.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Returns the middle index of the carpark in the {@code model}\u0027s carpark list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCarparkList().size() / 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Returns the last index of the carpark in the {@code model}\u0027s carpark list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCarparkList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Returns the carpark in the {@code model}\u0027s carpark list at {@code index}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static Carpark getCarpark(Model model, Index index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return model.getFilteredCarparkList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 7,
      "-": 44,
      "ZhuanYu": 5
    }
  },
  {
    "path": "src/test/java/seedu/parking/testutil/TypicalCarparks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_ADDRESS_JULIETT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_ADDRESS_KILO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_CARPARK_NUMBER_JULIETT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_CARPARK_NUMBER_KILO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_CARPARK_TYPE_JULIETT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_CARPARK_TYPE_KILO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_COORDINATE_JULIETT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_COORDINATE_KILO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_FREE_PARKING_JULIETT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_FREE_PARKING_KILO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_LOTS_AVAILABLE_JULIETT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_LOTS_AVAILABLE_KILO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_NIGHT_PARKING_JULIETT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_NIGHT_PARKING_KILO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_SHORT_TERM_JULIETT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_SHORT_TERM_KILO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_TOTAL_LOTS_JULIETT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_TOTAL_LOTS_KILO;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_TYPE_OF_PARKING_JULIETT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.CommandTestUtil.VALID_TYPE_OF_PARKING_KILO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.CarparkFinder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * A utility class containing a list of {@code Carpark} objects to be used in tests."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class TypicalCarparks {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark ALFA \u003d new CarparkBuilder().withCarparkNumber(\"C7\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withAddress(\"BLK 349-355 CLEMENTI AVE 2\").withCarparkType(\"SURFACE CAR PARK\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withCoordinate(\"21017.6263, 33014.2438\").withLotsAvailable(\"0\").withTotalLots(\"0\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withFreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\").withNightParking(\"YES\").withShortTerm(\"WHOLE DAY\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withTypeOfParking(\"ELECTRONIC PARKING\").withTags(\"Office\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark BRAVO \u003d new CarparkBuilder().withCarparkNumber(\"SK88\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withAddress(\"BLK 451 SENGKANG WEST WAY\").withCarparkType(\"MULTI-STOREY CAR PARK\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withCoordinate(\"32538.8707, 41769.3259\").withLotsAvailable(\"109\").withTotalLots(\"369\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withFreeParking(\"NO\").withNightParking(\"YES\").withShortTerm(\"WHOLE DAY\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withTypeOfParking(\"ELECTRONIC PARKING\").withTags(\"Home\", \"Office\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark CHARLIE \u003d new CarparkBuilder().withCarparkNumber(\"U25\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withAddress(\"BLK 337-353/355-356 BUKIT BATOK ST 34\").withCarparkType(\"SURFACE CAR PARK\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withCoordinate(\"18728.7311, 38350.9289\").withLotsAvailable(\"299\").withTotalLots(\"625\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withFreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\").withNightParking(\"YES\").withShortTerm(\"WHOLE DAY\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withTypeOfParking(\"ELECTRONIC PARKING\").withTags(\"School\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark DELTA \u003d new CarparkBuilder().withCarparkNumber(\"SK23\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withAddress(\"BLK 121E SENGKANG EAST WAY\").withCarparkType(\"MULTI-STOREY CAR PARK\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withCoordinate(\"36099.0459, 40907.1776\").withLotsAvailable(\"410\").withTotalLots(\"672\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withFreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\").withNightParking(\"YES\").withShortTerm(\"WHOLE DAY\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withTypeOfParking(\"ELECTRONIC PARKING\").withTags(\"Office\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark ECHO \u003d new CarparkBuilder().withCarparkNumber(\"PP5\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withAddress(\"BLK 113 TO 120 POTONG PASIR AVENUE 1\").withCarparkType(\"SURFACE CAR PARK\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withCoordinate(\"31328.0300, 35388.2500\").withLotsAvailable(\"92\").withTotalLots(\"321\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withFreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\").withNightParking(\"YES\").withShortTerm(\"NO\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withTypeOfParking(\"ELECTRONIC PARKING\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark FOXTROT \u003d new CarparkBuilder().withCarparkNumber(\"SE39\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withAddress(\"BLK 542A SERANGOON NORTH AVENUE 4\").withCarparkType(\"MULTI-STOREY CAR PARK\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withCoordinate(\"32271.7043, 39500.6075\").withLotsAvailable(\"39\").withTotalLots(\"206\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withFreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\").withNightParking(\"NO\").withShortTerm(\"7AM-10.30PM\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withTypeOfParking(\"ELECTRONIC PARKING\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark GOLF \u003d new CarparkBuilder().withCarparkNumber(\"W676\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withAddress(\"BLK 676 WOODLANDS DRIVE 71\").withCarparkType(\"BASEMENT CAR PARK\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withCoordinate(\"24373.6740, 46827.1390\").withLotsAvailable(\"186\").withTotalLots(\"230\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withFreeParking(\"NO\").withNightParking(\"YES\").withShortTerm(\"WHOLE DAY\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withTypeOfParking(\"ELECTRONIC PARKING\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark HOTEL \u003d new CarparkBuilder().withCarparkNumber(\"A29\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withAddress(\"BLK 347 ANG MO KIO AVENUE 3\").withCarparkType(\"SURFACE CAR PARK\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withCoordinate(\"29713.5035, 38806.4544\").withLotsAvailable(\"38\").withTotalLots(\"466\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withFreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\").withNightParking(\"YES\").withShortTerm(\"WHOLE DAY\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withTypeOfParking(\"ELECTRONIC PARKING\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark INDIA \u003d new CarparkBuilder().withCarparkNumber(\"JM16\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withAddress(\"BLK 659 JURONG WEST ST 65\").withCarparkType(\"MULTI-STOREY CAR PARK\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withCoordinate(\"13399.3160, 35488.4096\").withLotsAvailable(\"155\").withTotalLots(\"534\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withFreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\").withNightParking(\"YES\").withShortTerm(\"WHOLE DAY\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withTypeOfParking(\"ELECTRONIC PARKING\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark JULIETT \u003d new CarparkBuilder().withCarparkNumber(VALID_CARPARK_NUMBER_JULIETT)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withAddress(VALID_ADDRESS_JULIETT).withCarparkType(VALID_CARPARK_TYPE_JULIETT)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withCoordinate(VALID_COORDINATE_JULIETT).withLotsAvailable(VALID_LOTS_AVAILABLE_JULIETT)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withTotalLots(VALID_TOTAL_LOTS_JULIETT).withFreeParking(VALID_FREE_PARKING_JULIETT)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withNightParking(VALID_NIGHT_PARKING_JULIETT).withShortTerm(VALID_SHORT_TERM_JULIETT)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withTypeOfParking(VALID_TYPE_OF_PARKING_JULIETT).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark KILO \u003d new CarparkBuilder().withCarparkNumber(VALID_CARPARK_NUMBER_KILO)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withAddress(VALID_ADDRESS_KILO).withCarparkType(VALID_CARPARK_TYPE_KILO)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withCoordinate(VALID_COORDINATE_KILO).withLotsAvailable(VALID_LOTS_AVAILABLE_KILO)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withTotalLots(VALID_TOTAL_LOTS_KILO).withFreeParking(VALID_FREE_PARKING_KILO)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withNightParking(VALID_NIGHT_PARKING_KILO).withShortTerm(VALID_SHORT_TERM_KILO)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withTypeOfParking(VALID_TYPE_OF_PARKING_KILO).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String KEYWORD_MATCHING_SENGKANG \u003d \"SENGKANG\"; // A keyword that matches SENGKANG*/"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private TypicalCarparks() {} // prevents instantiation"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns an {@code CarparkFinder} with all the typical car parks."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static CarparkFinder getTypicalCarparkFinder() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkFinder ab \u003d new CarparkFinder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (Carpark carpark : getTypicalCarparks()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            ab.addCarpark(carpark);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static List\u003cCarpark\u003e getTypicalCarparks() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALFA, BRAVO, CHARLIE, DELTA, ECHO, FOXTROT, GOLF));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 26,
      "Alvinnyk": 4,
      "-": 23,
      "ZhuanYu": 63
    }
  },
  {
    "path": "src/test/java/seedu/parking/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final Index INDEX_FIRST_CARPARK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final Index INDEX_SECOND_CARPARK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final Index INDEX_THIRD_CARPARK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 3,
      "-": 7,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/test/java/seedu/parking/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.ALFA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.ui.CarparkPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private CarparkPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        selectionChangedEventStub \u003d new CarparkPanelSelectionChangedEvent(ALFA);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // associated web page of a car park"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                + ALFA.getCarparkNumber().value.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 3,
      "-": 37,
      "ZhuanYu": 9
    }
  },
  {
    "path": "src/test/java/seedu/parking/ui/CarparkCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.ui.testutil.GuiTestAssert.assertCardDisplaysCarpark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import guitests.guihandles.CarparkCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.CarparkBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "public class CarparkCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark carparkWithNoTags \u003d new CarparkBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        CarparkCard carparkCard \u003d new CarparkCard(carparkWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uiPartRule.setUiPart(carparkCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCardDisplay(carparkCard, carparkWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark carparkWithTags \u003d new CarparkBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkCard \u003d new CarparkCard(carparkWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uiPartRule.setUiPart(carparkCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCardDisplay(carparkCard, carparkWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark carpark \u003d new CarparkBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        CarparkCard carparkCard \u003d new CarparkCard(carpark, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // same carpark, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        CarparkCard copy \u003d new CarparkCard(carpark, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(carparkCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(carparkCard.equals(carparkCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertFalse(carparkCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertFalse(carparkCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different carpark, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark differentCarpark \u003d new CarparkBuilder().withCarparkNumber(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertFalse(carparkCard.equals(new CarparkCard(differentCarpark, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // same carpark, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertFalse(carparkCard.equals(new CarparkCard(carpark, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Asserts that {@code carparkCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private void assertCardDisplay(CarparkCard carparkCard, Carpark expectedCarpark, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        CarparkCardHandle carparkCardHandle \u003d new CarparkCardHandle (carparkCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", carparkCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // verify carpark details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCardDisplaysCarpark(expectedCarpark, carparkCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 67,
      "ZhuanYu": 5
    }
  },
  {
    "path": "src/test/java/seedu/parking/ui/CarparkListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.getTypicalCarparks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalIndexes.INDEX_SECOND_CARPARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.ui.testutil.GuiTestAssert.assertCardDisplaysCarpark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import guitests.guihandles.CarparkCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import guitests.guihandles.CarparkListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.storage.XmlSerializableCarparkFinder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final ObservableList\u003cCarpark\u003e TYPICAL_CARPARKS \u003d FXCollections.observableList(getTypicalCarparks());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_CARPARK);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private CarparkListPanelHandle carparkListPanelHandle;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        initUi(TYPICAL_CARPARKS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_CARPARKS.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            carparkListPanelHandle.navigateToCard(TYPICAL_CARPARKS.get(i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            Carpark expectedCarpark \u003d TYPICAL_CARPARKS.get(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            CarparkCardHandle actualCard \u003d carparkListPanelHandle.getCarparkCardHandle(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            assertCardDisplaysCarpark(expectedCarpark, actualCard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        initUi(TYPICAL_CARPARKS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkCardHandle expectedCarpark \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                carparkListPanelHandle.getCarparkCardHandle(INDEX_SECOND_CARPARK.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkCardHandle selectedCarpark \u003d carparkListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertCardEquals(expectedCarpark, selectedCarpark);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Verifies that creating and deleting large number of car parks in {@code CarparkListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ObservableList\u003cCarpark\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }, \"Creation and deletion of car park cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns a list of car parks containing {@code carparkCount} car parks that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code CarparkListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private ObservableList\u003cCarpark\u003e createBackingList(int carparkCount) throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithCarparks(carparkCount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlSerializableCarparkFinder xmlCarparkFinder \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableCarparkFinder.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return FXCollections.observableArrayList(xmlCarparkFinder.toModelType().getCarparkList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns a .xml file containing {@code carparkCount}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * carparks. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Path createXmlFileWithCarparks(int carparkCount) throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        builder.append(\"\u003ccarparkfinder\u003e\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (int i \u003d 0; i \u003c carparkCount; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003ccarparks\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003ccarparkNumber\u003e\").append(i).append(\"a\u003c/carparkNumber\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003ccarparkType\u003eb\u003c/carparkType\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003ccoordinate\u003e456.456, 123.123\u003c/coordinate\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003ctotalLots\u003e2\u003c/totalLots\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003clotsAvailable\u003e1\u003c/lotsAvailable\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003cfreeParking\u003ey\u003c/freeParking\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003cnightParking\u003en\u003c/nightParking\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003cshortTerm\u003es\u003c/shortTerm\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003ctypeOfParking\u003et\u003c/typeOfParking\u003e\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003c/carparks\u003e\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        builder.append(\"\u003c/carparkfinder\u003e\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Path manyCarparksFile \u003d TEST_DATA_FOLDER.resolve(\"manyCarparks.xml\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        FileUtil.createFile(manyCarparksFile);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        FileUtil.writeToFile(manyCarparksFile, builder.toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        manyCarparksFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return manyCarparksFile;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Initializes {@code carparkListPanelHandle} with a {@code CarparkListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code CarparkListPanel}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private void initUi(ObservableList\u003cCarpark\u003e backingList) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkListPanel carparkListPanel \u003d new CarparkListPanel(backingList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uiPartRule.setUiPart(carparkListPanel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkListPanelHandle \u003d new CarparkListPanelHandle(getChildNode(carparkListPanel.getRoot(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                CarparkListPanelHandle.CARPARK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "ZhuanYu": 130
    }
  },
  {
    "path": "src/test/java/seedu/parking/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * A GUI unit test class for CarparkFinder."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * NodeNotFoundException is thrown if no such node exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "ZhuanYu": 5
    }
  },
  {
    "path": "src/test/java/seedu/parking/ui/testutil/EventsCollectorRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Sets up an {@code EventsCollector} and tears it down after each test."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCollectorRule implements TestRule {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollector eventsCollector \u003d new EventsCollector();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * A class that collects events raised by other classes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public class EventsCollector {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        private List\u003cBaseEvent\u003e events \u003d new ArrayList\u003cBaseEvent\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        public EventsCollector() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * Collects any event raised by any class"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        @Subscribe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        public void collectEvent(BaseEvent event) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            events.add(event);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * Removes collected events from the collected list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        public void reset() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            events.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        public int getSize() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns the most recent event collected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        public BaseEvent getMostRecent() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            if (events.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.get(events.size() - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if the collector did not receive any events"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isEmpty() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.isEmpty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/test/java/seedu/parking/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import guitests.guihandles.CarparkCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import guitests.guihandles.CarparkListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lexzt"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lexzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static void assertCardEquals(CarparkCardHandle expectedCard, CarparkCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getCarparkNumber(), actualCard.getCarparkNumber());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getCarparkType(), actualCard.getCarparkType());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getCoordinate(), actualCard.getCoordinate());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getFreeParking(), actualCard.getFreeParking());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getLotsAvailable(), actualCard.getLotsAvailable());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getNightParking(), actualCard.getNightParking());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getShortTerm(), actualCard.getShortTerm());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getTotalLots(), actualCard.getTotalLots());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getTypeOfParking(), actualCard.getTypeOfParking());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedCarpark}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static void assertCardDisplaysCarpark(Carpark expectedCarpark, CarparkCardHandle actualCard) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCarpark.getCarparkNumber().value, actualCard.getCarparkNumber());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCarpark.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedCarpark.getCarparkType().value, actualCard.getCarparkType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(\"Coordinate: \" + expectedCarpark.getCoordinate().value, actualCard.getCoordinate());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (expectedCarpark.getTotalLots().value.equals(\"0\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            assertEquals(\"Total Lots: Not Available\", actualCard.getTotalLots());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            assertEquals(\"Lots Available: Not Available\", actualCard.getLotsAvailable());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            assertEquals(\"Total Lots: \" + expectedCarpark.getTotalLots().value, actualCard.getTotalLots());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            assertEquals(\"Lots Available: \" + expectedCarpark.getLotsAvailable().value, actualCard.getLotsAvailable());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(\"Free Parking: \" + expectedCarpark.getFreeParking().value, actualCard.getFreeParking());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(\"Night Parking: \" + expectedCarpark.getNightParking().value, actualCard.getNightParking());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(\"Short Term Parking: \" + expectedCarpark.getShortTerm().value, actualCard.getShortTerm());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(\"Parking System: \" + expectedCarpark.getTypeOfParking().value, actualCard.getTypeOfParking());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCarpark.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Asserts that the list in {@code carparkListPanelHandle} displays the details of {@code carparks} correctly and"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static void assertListMatching(CarparkListPanelHandle carparkListPanelHandle, Carpark... carparks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        for (int i \u003d 0; i \u003c carparks.length; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            carparkListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            assertCardDisplaysCarpark(carparks[i], carparkListPanelHandle.getCarparkCardHandle(i));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Asserts that the list in {@code carparkListPanelHandle} displays the details of {@code carparks} correctly and"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static void assertListMatching(CarparkListPanelHandle carparkListPanelHandle, List\u003cCarpark\u003e carparks) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertListMatching(carparkListPanelHandle, carparks.toArray(new Carpark[0]));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Asserts the size of the list in {@code carparkListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static void assertListSize(CarparkListPanelHandle carparkListPanelHandle, int size) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        int numberOfCarpark \u003d carparkListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(size, numberOfCarpark);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 63,
      "ZhuanYu": 29
    }
  },
  {
    "path": "src/test/java/seedu/parking/ui/testutil/StageRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Properly sets up and tears down a JavaFx stage for our testing purposes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StageRule implements TestRule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() throws Throwable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() throws Throwable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/java/seedu/parking/ui/testutil/UiPartRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.parking.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartRule extends StageRule {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/test/java/systemtests/CarparkFinderSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "import guitests.guihandles.CarparkListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.MainApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.TestApp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.CarparkFinder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.testutil.TypicalCarparks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.ui.BrowserPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.ui.CommandBox;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * A system test class for CarparkFinder, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public abstract class CarparkFinderSystemTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    protected CarparkFinder getInitialData() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return TypicalCarparks.getTypicalCarparkFinder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public CarparkListPanelHandle getCarparkListPanel() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        return mainWindowHandle.getCarparkListPanel();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Displays all car parks in the car park finder."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    protected void showAllCarparks() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(getModel().getCarparkFinder().getCarparkList().size(), getModel().getFilteredCarparkList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Displays all car parks with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    protected void showCarparksWithName(String keyword) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(getModel().getFilteredCarparkList().size() \u003c getModel().getCarparkFinder().getCarparkList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Selects the car park at {@code index} of the displayed list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    protected void selectCarpark(Index index) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(index.getZeroBased(), getCarparkListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Deletes all car parks in the car park finder."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    protected void deleteAllCarparks() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(0, getModel().getCarparkFinder().getCarparkList().size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same car park objects as {@code expectedModel}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * and the car park list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(new CarparkFinder(expectedModel.getCarparkFinder()), testApp.readStorageCarparkFinder());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        assertListMatching(getCarparkListPanel(), expectedModel.getFilteredCarparkList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code CarparkListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        getCarparkListPanel().rememberSelectedCarparkCard();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * of the previously selected car park."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        assertFalse(getCarparkListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the car park in the car park list panel at"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     * @see CarparkListPanelHandle#isSelectedCarparkCardChanged()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        getCarparkListPanel().navigateToCard(getCarparkListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        String selectedCardCarparkNumber \u003d getCarparkListPanel().getHandleToSelectedCard().getCarparkNumber();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardCarparkNumber.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getCarparkListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the car park list panel remain unchanged."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     * @see CarparkListPanelHandle#isSelectedCarparkCardChanged()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        assertFalse(getCarparkListPanel().isSelectedCarparkCardChanged());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        assertListMatching(getCarparkListPanel(), getModel().getFilteredCarparkList());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 17,
      "Lexzt": 8,
      "-": 237,
      "ZhuanYu": 32
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.KEYWORD_MATCHING_SENGKANG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class ClearCommandSystemTest extends CarparkFinderSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: clear non-empty car park finder, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: undo clearing car park finder -\u003e original car park finder restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: redo clearing car park finder -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: selects first card in car park list and clears car park finder -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original car park finder"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        selectCarpark(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: filters the car park list before clearing -\u003e entire car park finder cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original car park finder"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        showCarparksWithName(KEYWORD_MATCHING_SENGKANG);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: clear empty car park finder -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d ClearCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedResultMessage \u003d ClearCommand.MESSAGE_EMPTY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code CarparkFinderSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @see CarparkFinderSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code CarparkFinderSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @see CarparkFinderSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "ZhuanYu": 26
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.core.Messages.MESSAGE_CARPARKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.BRAVO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.CHARLIE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.DELTA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.KEYWORD_MATCHING_SENGKANG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class FindCommandSystemTest extends CarparkFinderSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find multiple persons in car park finder, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         * -\u003e 2 car parks found"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SENGKANG + \"   \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BRAVO, DELTA); // addresses contains sengkang"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: repeat previous find command where car park list is displaying the car parks we are finding"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         * -\u003e 2 car parks found"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SENGKANG;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find car park where car park list is not displaying the car park we are finding"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         * -\u003e 1 car park found"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" U25\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CHARLIE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find multiple car parks in car park finder, 2 keywords -\u003e 2 car parks found */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" SK88 SK23\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BRAVO, DELTA);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find multiple car parks in car park finder, 2 keywords in reversed order -\u003e 2 car parks found */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" SK23 SK88\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find multiple car parks in car park finder, 2 keywords with 1 repeat -\u003e 2 car parks found */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" SK23 SK88 SK23\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find multiple car parks in car park finder, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         * -\u003e 2 car parks found"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" SK23 SK88 NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find car park in car park finder, keyword is same as name but of different case"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         * -\u003e 1 car park found"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" SeNgKaNg\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find car park in car park finder, keyword is substring of name -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Sen\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find car park in car park finder, name is substring of keyword -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Sengkangs\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find car park not in car park finder -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" AK47\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find type of car park in car park finder -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DELTA.getCarparkType().value;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find coordinate of car park in car park finder -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DELTA.getCoordinate().value;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find lots available of car park in car park finder -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DELTA.getLotsAvailable().value;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find total lots of car park in car park finder -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DELTA.getTotalLots().value;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find free parking of car park in car park finder -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DELTA.getFreeParking().value;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find night parking of car park in car park finder -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DELTA.getNightParking().value;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find short term parking of car park in car park finder -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DELTA.getShortTerm().value;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find type of parking of car park in car park finder -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DELTA.getTypeOfParking().value;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find tags of car park in car park finder -\u003e 0 persons found */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DELTA.getTags());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        /* Case: find while a car park is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        showAllCarparks();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        selectCarpark(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertFalse(getCarparkListPanel().getHandleToSelectedCard().getCarparkNumber().equals("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                DELTA.getCarparkNumber().value));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" SK23\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DELTA);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find car park in empty car park finder -\u003e 0 persons found */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        deleteAllCarparks();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SENGKANG;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DELTA);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d \"FiNd Sengkang\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * box displays {@code Messages#MESSAGE_CARPARKS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code CarparkFinderSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @see CarparkFinderSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                MESSAGE_CARPARKS_LISTED_OVERVIEW, expectedModel.getFilteredCarparkList().size());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code CarparkFinderSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @see CarparkFinderSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 3,
      "-": 130,
      "ZhuanYu": 84
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalIndexes.INDEX_FIRST_CARPARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class HelpCommandSystemTest extends CarparkFinderSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        getCarparkListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARPARK.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertListMatching(getCarparkListPanel(), getModel().getFilteredCarparkList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 3,
      "-": 95,
      "ZhuanYu": 9
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.carpark.Carpark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final Predicate\u003cCarpark\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cCarpark\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Optional\u003cPredicate\u003cCarpark\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        model.updateFilteredCarparkList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static void setFilteredList(Model model, Carpark... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static Predicate\u003cCarpark\u003e getPredicateMatching(Carpark other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return carpark -\u003e carpark.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 7,
      "-": 30,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.core.Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.logic.commands.SelectCommand.MESSAGE_SELECT_CARPARK_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalCarparks.KEYWORD_MATCHING_SENGKANG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.parking.testutil.TypicalIndexes.INDEX_FIRST_CARPARK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class SelectCommandSystemTest extends CarparkFinderSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        /* Case: select the first card in the car park list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARPARK.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        /* Case: select the last card in the car park list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        /* Case: select the middle card in the car park list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: filtered car park list, select index within bounds of car park finder but out of bounds of car park"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         * list -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        showCarparksWithName(KEYWORD_MATCHING_SENGKANG);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        int invalidIndex \u003d getModel().getCarparkFinder().getCarparkList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: filtered car park list, select index within bounds of car park finder and car park list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredCarparkList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredCarparkList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: select from empty car park finder -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        deleteAllCarparks();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARPARK.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected carpark.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * 4. {@code Storage} and {@code CarparkListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code CarparkFinderSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @see CarparkFinderSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @see CarparkFinderSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                MESSAGE_SELECT_CARPARK_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getCarparkListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * 4. {@code Storage} and {@code CarparkListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code CarparkFinderSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @see CarparkFinderSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 16,
      "-": 112,
      "ZhuanYu": 26
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.parking.model.ReadOnlyCarparkFinder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyCarparkFinder\u003e carparkFinder, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(carparkFinder, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "ZhuanYu": 4
    }
  }
]
