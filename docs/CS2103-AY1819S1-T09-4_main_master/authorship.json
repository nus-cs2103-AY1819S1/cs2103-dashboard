[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d Car Park Finder"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-T09-4/main[image:https://travis-ci.org/CS2103-AY1819S1-T09-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "https://ci.appveyor.com/project/ZhuanYu/main/branch/master[image:https://ci.appveyor.com/api/projects/status/f9hvilg7n554igd4/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-T09-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-T09-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Car Park Finder is the application for all car owners seeking a hassle-free way to find HDB car parks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "It has a GUI (Graphic User Interface) but most of the user interactions happen using the CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* It is a Java application developed by us using data provided by https://data.gov.sg[Data.gov.sg]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* Features"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "** A sophisticated GUI that includes a list panel and an in-built Browser."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "** Test cases, including automated GUI testing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "** Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Some parts of this sample application were inspired by the excellent Java FX tutorial by Marco Jakob."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* This application was morphed from https://github.com/se-edu/addressbook-level4[Address Book level 4], a project created by the SE-EDU initiative."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Libraries used: https://github.com/google/gson[Gson],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 4,
      "-": 23,
      "ZhuanYu": 11
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"githubId\": \"Alvinnyk\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"displayName\": \"Alvin\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"authorNames\": [\"AeroSpectr3\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"githubId\": \"dlworldpeace\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"displayName\": \"Delong\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"githubId\": \"Lexzt\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"displayName\": \"Keith\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"authorNames\": [\"Keith Fong\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"githubId\": \"YurouTang\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"displayName\": \"Yurou\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"authorNames\": [\"Tang Yurou\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"githubId\": \"ZhuanYu\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"displayName\": \"Zhuan Yu\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \"authorNames\": [\"Zhuan Yu\", \"ZhuanYu\", \"Yeo Zhuan Yu\"]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 29
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\timplementation \u0027com.google.code.gson:gson:2.8.5\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u0027site-name\u0027: \u0027Car Park Finder\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-T09-4/main\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 244,
      "ZhuanYu": 3
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "We are Team T09-4 and we are a team based in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]. +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "This Java application is developed for CS2103T Software Engineering."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Damith C. Rajapakse"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::damithc.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "{empty}[http://www.comp.nus.edu.sg/~damithch[homepage]] [https://github.com/damithc[github]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Eugene Peh"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "image::eugenepeh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "{empty}[https://github.com/eugenepeh[github]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Project Advisor"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Fong Zhi Zhong"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "image::keith.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "{empty}[https://github.com/dlworldpeace[github]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Role: Team Leader +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Threading"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* UI"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Scheduling and tracking"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Yeo Zhuan Yu"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "image::zhuanyu.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "{empty}[https://github.com/ZhuanYu[github]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Data and API"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Deliverables and deadlines"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Tang Yurou"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "image::yurou2.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "{empty}[https://github.com/YurouTang[github]]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Commands"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Documentation"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Xiao Delong"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "image::delong.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "{empty}[https://github.com/dlworldpeace[github]]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Logic"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Testing"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Alvin Ng"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "image::alvin.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "{empty}[https://github.com/yijinl[github]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Responsibilities:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Data"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Code quality"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Integration"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YurouTang": 18,
      "-": 37,
      "ZhuanYu": 35
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-T09-4/main/issues[issue tracker]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "if you noticed bugs or have suggestions on how to improve."
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "ZhuanYu": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d Car Park Finder - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T09-4/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "By: `Team T09-4`      Since: `Oct 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "dialog first)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Open a console and run the command `gradlew processResources`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "(Mac/Linux: `./gradlew processResources`). It should finish"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedCarpark.java[`XmlAdaptedCarpark.java`]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "and link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Repeat this for the test folder as well"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "(e.g. check link:{repoURL}/src/test/java/seedu/address/commons/util/XmlUtilTest.java[`XmlUtilTest.java`]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "and link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "and if so, resolve it the same way)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d Architecture overview"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "This section explains the design architecture used by the entire system."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": " which contains 6 \u003c\u003cArchitecture-Components,*`architecture components`*\u003e\u003e and"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": " adopts an \u003c\u003cArchitecture-design,*`events-driven nature`*\u003e\u003e."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "[[Architecture-Components]]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d Architecture components"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "This section will briefly introduce the function of each architecture components"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "as well as common behaviours."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ".Architecture Components"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|Component |Main Function"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003c\u003cDesign-Main,*`Main`*\u003e\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|the starting point of the system, which encapsulates the other components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|represents a collection of classes used by multiple components."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003c\u003cDesign-Ui,*`User Interface`*\u003e\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|contains the user interface classes used by the application."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|execute user commands, also known as the command executor."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003c\u003cDesign-Model,*`Model`*\u003e\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|holds the data of the application in-memory."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|which allows reading and writing of data to the hard disk."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Each of the User Interface, Logic, Model, Storage Components also:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "[[Architecture-design]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d Events-driven nature of the design"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "This section will explain the main nature of design adopted by the system."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Car Park Finder data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "The _Sequence Diagram_ below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "[[Design-Main]]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d Main component"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "The __``Main`` component__ consists of only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d Commons component"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "The __``Commons`` component__ consists of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Classes used by multiple components are in the seedu.addressbook.commons package."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d User interface component"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "The _User Interface_ (`UI`) component consists of a `MainWindow` that is made up of different parts, with the base class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`] using _JavaFx UI_ framework."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Please refer to the Class Diagram below for more details on how they are connected."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".Structure of the User Interface component"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "In general, this is the workflow of the _UI_ component:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Execute user commands using the `Logic` component."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Bind itself to some data in the `Model` so that the _UI_ components can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Respond to events raised from various parts of the App and updates the _UI_ components accordingly."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "All of these _UI_ parts, including the `MainWindow`, inherit from the abstract `UiPart` class. The layout for each"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "component is defined in matching `.fxml` file and can be found in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "In short, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`] etc."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "The `Logic` component consist of a `LogicManager` that takes care of all the parse and exexcution of commands."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "It inherits the base class link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Please refer to the Class Diagram below for more details on how they are connected."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "In general, this is the workflow of the _Logic_ component:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".  Get the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".  Create a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".  Pass the result of the command execution over to `Model`, which can affect it (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".  Return the command execution by encapsulating as a `CommandResult` object which is passed back to the `UI`."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Please refer to the Sequence Diagram below for an example of interactions within the `Logic` component"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "using the `execute(\"delete 1\")` _API_ call."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".Interactions for execute operation"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "The `Model` component consist of a `ModelManager` that manages all the models."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* stores the Car Park Finder data."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Car Park Finder`, which `Carpark` can reference. This would allow `Car Park Finder` to only require one `Tag` object per unique `Tag`, instead of each `Carpark` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "The `Storage` component consist of a `StorageManager` that takes care of all the Input/Output actions."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* can save the Car Park Finder data in xml format and read it back."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current car park finder book state in its history."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous car park finder book state from its history."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone car park finder state from its history."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial car park finder state, and the `currentStatePointer` pointing to that single car park finder state."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".Step 1 of undo/redo usage scenario"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the car park finder. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the car park finder after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted car park finder state."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".Step 2 of undo/redo usage scenario"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified car park finder state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".Step 3 of undo/redo usage scenario"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the car park finder state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous car park finder state, and restores the car park finder to that state."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".Step 4 of undo/redo usage scenario"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial car park finder state, then there are no previous car park finder states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Please refer to the Sequence Diagram below for the `undo` operation."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".Interactions for undo operation"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the car park finder to that state."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest car park finder state, then there are no undone car park finder states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the car park finder, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".Step 5 of undo/redo usage scenario"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all car park finder states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".Step 6 of undo/redo usage scenario"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".Summary for executing a new command"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire car park finder."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of car park finder states."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d Find feature"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "The find mechanism is facilitated by `FindCommand` and `FindCommandParser`. It extends `Command` and implements the following operations."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* `FindCommand#execute()` -- Executes the command by running a predicate `CarparkContainsKeywordsPredicate` and updates the car park list."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "The find mechanism is supported by `FindCommandParser`. It implements `Parser` that contains the following operations."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* `FindCommandParser#parse()` -- Checks the arguments for empty strings and throws a `ParseException` if empty string is found. It then splits it by one or more white spaces. It then removes any strings in the list of common words."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "The predicate `CarparkContainsKeywordsPredicate` takes in a list of strings and checks if any of the strings contain fully or partial in the list of car park names or address, and returns the car park if so."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ".How the find operation works"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "image::seqdiagram-find.png[width\u003d\"800\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Given below is an example usage scenario and how the Find mechanism behaves at each step."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Step 2. The user executes `find punggol` command to get all car park in punggol."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "The `find` command calls `FindCommandParser#parse()`, checking the values `punggol`."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "If a command fails its execution, it will not call `FindCommand#execute()`, so the address book state will not be saved."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Step 3. The entire list of car park is filtered by the predicate `CarparkContainsKeywordsPredicate`."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Step 4. The filtered list of car park is returned to the GUI."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ".Flow chart of the find operation."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "image::actdiagram-find.png[width\u003d\"800\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How predicate works"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* **Alternative 1 (Current choice):** Predicate have additional filter with an ignore list."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "** Pros: Easy to implement, user friendly."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "** Cons: More complicated predicate, sub strings not easily taken care of."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* **Alternative 2:** Filter the data when it is taken in."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "** Pros: Less complicated predicate."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "** Cons: Manipulates the data, editing it for every other case."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d Command alias feature"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "The alias mechanism is facilitated by `AddressBookParser`. It extends the cases"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "when shorter command words are parsed through `parseCommand`."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Given below is an example usage scenario and how the alias mechanism behaves at"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "each step."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Step 1. The user launches the application for the first time. The `LogicManager`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "will be initialized with an `AddressBookParser`."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Step 2. The user executes `l` command instead of `list`. The `Matcher` object in"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "`AddressBookParser` splits the command text into **command word ** section and"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "*arguments,* section of which the **command word **is parsed using a _\u003cswitch\u003e_"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "statement. The *command word* will be matched to case of `COMMAND_ALIAS` from"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "`ListCommand`, which holds the final value of \u0027l\u0027. The program finds a match and"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "proceeds as if a `list` command is given."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ".Flow chart of command alias usage."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "image::AliasActivityDiagram.jpg[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "The **Activity Diagram** given above explains what happens when a user executes a `l`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "command."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How alias executes"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* *Alternative 1 (current choice):* declare `COMMAND_ALIAS` with a string value"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "in each Command file."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "** *Pros:* Easy to implement"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "** *Cons:* Have to decide the alias subjectively which brings down performance"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "if there are alot of commands"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* *Alternative 2:* declare `COMMAND_ALIAS` using the first two chars of `COMMAND_WORD`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "in each Command file."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "** *Pros*: Better performance as alias will be assigned systematically."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "** *Cons*: When there are 2 command words starting with same 2 chars e.g. `find`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u0026 `filter`, it does not work."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d Query feature"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "The query mechanism does an API call to the website `data.gov.sg` to pull the car park information in `JSON` format."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "The external library `Gson` is used to parse the data in `GsonUtil`. The data is stored internally as a `CarparkJson` object."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Some notable methods that `GsonUtil` implements are:"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `GsonUtil#getCarparkData()` — Get the basic car park information from the API."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `GsonUtil#getCarparkAvailability()` — Get the total parking lots as well as availability from another API."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `GsonUtil#fetchCarparkInfo()` — Return a list of car parks with populated data."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Only `GsonUtil#fetchCarparkInfo()` is exposed in `QueryCommand`, inside `QueryCommand#readCarpark()` method."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Given below is an example usage scenario and how the query mechanism behaves at each step."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Step 1. The user launches the application. The initial car park finder state might not have been updated"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "to the latest according to `data.gov.sg`."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Step 2. The user executes the `query` command to fetch the latest data from the API. The `query` command calls"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "`GsonUtil#fetchCarparkInfo()` which runs the two methods `GsonUtil#getCarparkData()` and `GsonUtil#getCarparkAvailability()`."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Step 3. The user waits for data to be updated. Inside `GsonUtil#getCarparkData()`, a connection is established with the API"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "to read the `JSON` data for the basic car park information."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "If the reading from the API fails, IOException is thrown."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Step 4. The `JSON` data is parsed using `Gson` library and stored inside `CarparkJson` class. A `HashSet` is used to consolidate"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "all the car parks and prevent duplicate entries."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Step 5. Once `GsonUtil#getCarparkData()` is done getting all the basic car park information, next is getting the parking lot"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "details with `GsonUtil#getCarparkAvailability()`. The process is similar to how `GsonUtil#getCarparkData()` gets the data from the API."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Step 6. When `GsonUtil#getCarparkAvailability()` is done adding in the parking lot details using `CarparkJson#addOn()`, a final check"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "to see if there are any car parks with no data on its parking lots. The value 0 is added if there is no data."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Step 7. An `ArrayList\u003cArrayList\u003cString\u003e\u003e` is returned from `GsonUtil#fetchCarparkInfo()`, which is used to update the car park finder state"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "to the latest. The text at the bottom of the application will show that it is updated and the user can continue to use the application."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Please refer to the Sequence Diagram below for the `query` operation."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".Interactions for query operation"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "image::zy_seq.png[width\u003d\"800\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How query executes"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* **Alternative 1 (current choice):** Wait for data to be queried sequentially."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** Cons: Performance issues as the application hangs."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* **Alternative 2 :** Data is queried using a separate thread."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** Pros: Application can be used as the data is being fetched in the background."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** Cons: Reading the car park list while querying might cause unintended side effects if not handled properly."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support query command"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* **Alternative 1 (current choice):** Use `ArrayList\u003cArrayList\u003cString\u003e\u003e` to store car park information."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** Pros: Easy to maintain an array list of list and iterate through to get a specific car park."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** Cons: `ArrayList\u003cArrayList\u003cString\u003e\u003e` can be confusing and not intuitive. Accessing elements is also not that efficient."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* **Alternative 2 :** Use a `HashMap` to store data."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** Pros: Much more efficient in accessing elements by using a key and better code readability"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "with `HashMap\u003cString,Carpark\u003e`."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** Cons: `HashMap` does not provide an ordered collection."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d [Propose] Notify feature"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "The notify mechanism will fetch data from the API every interval. The interval can be set in terms of seconds/minutes"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "and is used in conjunction with the `select` command."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "This means that it will only notify the current selected car park only, and not all the car parks."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Example"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "_This feature is coming in v2.0._"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".Summary for executing a notify command"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "image::zy_act.png[width\u003d\"800\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How notify executes"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* **Alternative 1 (current choice):** Set an interval for data to be queried sequentially."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** Cons: Performance issues as the application might stall."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* **Alternative 2 :** Data is queried using a separate thread every interval."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** Pros: Application can be used as the data is being fetched in the background."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** Cons: Reading the car park list while querying might cause unintended side effects if not handled properly."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Filter feature"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "The filter mechanism is facilitated by `AddressBookParser`, `FilterCommandParser` and `FilterCommand`. It extends"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "`Command` and implements `FilterCommand#execute()`."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Step 1. The `parseCommand` function in `AddressBookParser` is extended to take in an additional"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "command word: `filter`."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Step 2. After `filter`is being detected as the command word, a"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "`FilterCommandParser` is created to parse the arguments supplied to the command."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Step 3. The `FilterCommandParser` parses the arguments into an array of flags, which is then"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "passed into a newly created `FilterCommand`."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Step 4. `FilterCommand` then checks which flags are passed in and creates predicates to"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "filter the car parks accordingly. The various predicates include"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "`CarparkHasFreeParkingPredicate`, `CarparkHasNightParkingPredicate` and"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "`CarparkIsOfTypePredicate`."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Step 5. Next, `model` updates a filtered list of car parks by checking each car park"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "against the specified predicate."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Step 6. The following activity diagram summarizes what happens when a user executes a"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "filter command."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ".Activity Diagram"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "image::ActivityDiagram-filter.png[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ".How the filter operation works"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "image::SequenceDiagram-filter.png[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Possible Improvement to current implementation"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Connect to `find` command"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Filter through multiple flags at the same time"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Check for invalid parameters"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Determine whether a specific day is a public holiday, when filtering for free parking"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "A project often depends on third-party libraries. For example, Car Park Finder depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* commutes using a car and needs to find an empty parking lot"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* wants to know specific details of a car park in a certain location"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* prefers desktop apps over other types"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*Value proposition*: helping busy car owners to plan their trip by getting details"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "of nearby car parks from their destination in a fast and efficient manner"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Filter and Sorting - Yurou"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* * *` |car owner |know how far away my destination is from the car park"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|find the shortest walking distance to my destination"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |driver |find out how much is the parking fee |calculate the cost of parking at the car park"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |driver |find out the types of parking available at the car park"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|decide if I can park and leave my car there"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Search and Flag - Keith"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* * *` |car owner |know more details about the car park and its lots"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|decide where to go depending on the information provided"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* * *` |driver |find a list of available parking lots within my destination"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|plan which car park location is convenient for me"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |car owner |search by details of a car park |view information about a car park that I want"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Store and Load Favorites - Alvin"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |car owner |have a list of destinations that I visit often"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|save time as I do not have to retype my commands"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |user |add a car park to my favorites"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|create an organised list of preferred car parks"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |user |view my favorite list with ease at the start"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|glance through the car parks without using commands"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |user |save a list of destinations like a favorite list"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|add and keep track of preferred car parks"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |user |edit and write remarks about car parks in my favorite list"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|add or update new information about specific car parks"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |user |delete car parks from my favorites"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|remove car parks that are no longer of my interest"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d API and Notifications - Zhuan Yu"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* * *` |car owner |receive notifications about car park availability"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|save time and plan my trip accordingly to vacancy of parking lots"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |driver |set how frequent to notify me about more suitable car parks"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|change which car park I am headed to without searching again"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |driver |know if the car park is changed to fully occupied"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|go to another car park that is not full"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |driver |check the current weather forecast at destination"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|plan ahead if the car park has no shelter and move to one that has it"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Cache and Aliases - Delong"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* * *` |new user |learn how to use the application easily"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|spend less time on learning and more on using it"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* * *` |new user |be able to understand the UI without much instruction"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|spend my time on the program using the features"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`* *` |user |use shorthand equivalent alias of commands"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|navigate the application in a more time efficient way"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|`*` |user |autocomplete my requests"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|get the information that I want faster"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "(For all use cases below, the *System* is the `Car Park Finder` and the *Actor* is the"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "`user / driver / car owner`, unless specified otherwise)"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Filter and Sorting - Yurou"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC01 - Filter car park"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "1.  *Actor* requests a list of car parks"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "2.  *System* shows a list of car parks"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "3.  *Actor* requests to [.underline]#filter the list of car parks using flags *(UC05)*#"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "4.  *System* shows a new filtered list of car parks"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3a. The given flags are invalid."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3a1. *System* shows an error message."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3b. No input for flags."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3b1. *System* will show a list of car parks with all the flags selected."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC02 - Sort car park"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "1.  *Actor* requests a list of car parks"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "2.  *System* shows a list of car parks"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "3.  *Actor* requests to sort the list of car parks base on distance"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "4.  *System* shows a new sorted list of car parks"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3a. The given distance is invalid."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3a1. *System* shows an error message."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3b. No input for distance."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3b1. *System* will use the default distance to sort the list of car parks."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC03 - Calculate parking fee"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "1.  *Actor* requests a list of car parks"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "2.  *System* shows a list of car parks"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "3.  *Actor* requests to calculate the cost of parking at a car park given a duration"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "4.  *System* shows the amount to pay for that car park"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3a. The given car park number is invalid."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3a1. *System* shows an error message."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3b. No input for duration."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3b1. *System* will use the default duration to calculate the cost."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3c. The given duration is invalid."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3c1. *System* shows an error message."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Search and Flag - Keith"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC04 - Search car park"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "1.  *Actor* requests a list of car parks near the destination"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "2.  *System* shows a list of car parks"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "3.  *Actor* requests to [.underline]#filter the list of car parks using flags *(UC05)*#"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "4.  *System* shows a new filtered list of car parks"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 1a. The destination is invalid."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 1a1. *System* shows an error message."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3a. The given flags are invalid."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3a1. *System* shows an error message."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3b. No input for flags."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3b1. *System* will show a list of car parks with all the flags selected."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC05 - Flag car park details"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Preconditions: *Actor* already requested a list of car parks"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "1.  *Actor* sets the flags to indicate the required car park details"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "2.  *System* shows a list of car parks with the selected flags"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 1a. The given flags are invalid."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 1a1. *System* shows an error message."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes before step 1."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 1b. No input for flags."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 1b1. *System* will show a list of car parks with all the flags selected."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Store and Load Favourites - Alvin"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC06 - Add car park to Favourites"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "1.  *Actor* requests to list car parks"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "2.  *System* shows a list of car parks"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "3.  *Actor* requests to add a specific car park to the favourites list"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "4.  *System* adds the car park"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3a. The given index to add invalid."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3a1. *System* shows an error message."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC07 - Delete car park in Favourites"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "1.  *Actor* requests to list car parks"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "2.  *System* shows a list of car parks"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "3.  *Actor* requests to delete a specific car park in the favourites list"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "4.  *System* deletes the car park"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 2a. The favourites list is empty."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 2a1. *System* shows a message."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3a. The given index to delete is invalid."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3a1. *System* shows an error message."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC08 - List Favourites"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "1.  *Actor* requests to list favourites"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "2.  *System* shows a list of car parks"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 1a. The favourites list is empty."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 1a1. *System* shows a message."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC09 - Tags and remarks"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "1.  *Actor* requests to list favourites"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "2.  *System* shows a list of car parks"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "3.  *Actor* requests to modify tags and remarks to the car parks"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "4.  *System* shows favourites with the new changes"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 1a. The favourites list is empty."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 1a1. *System* shows a message."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3a. Tags and remarks are invalid."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3a1. *System* shows an error message."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d API and Notifications - Zhuan Yu"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC10 - Receive notifications"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Preconditions: *Actor* already requested a list of car parks"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "1.  *Actor* requests to be notified at regular intervals"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "2.  *System* shows the car park availability every interval"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 1a. The given time to notify is invalid."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 1a1. *System* shows an error message."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes before step 1."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 1b. No input for timing."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 1b1. *System* will use the default interval to notify."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 2a. Unable to retrieve car park availability."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 2a1. *System* shows an error message."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC11 - Car park fully occupied"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Preconditions: *Actor* already selected a car park from the list"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "1.  *System* shows the car park is now fully occupied"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "2.  *Actor* requests to list car parks again"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "3.  *System* shows a list of car parks"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "4.  *Actor* requests to select a new car park"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 3a. Unable to retrieve car park availability."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 3a1. *System* shows an error message."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC12 - Weather update"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Preconditions:"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* *Actor* already selected a car park from the list"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* *System* already showed weather forecast of the area"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "1.  *Actor* requests to update weather conditions"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "2.  *System* shows the current weather forecast of the area"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 2a. Unable to retrieve weather forecast."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 2a1. *System* shows an error message."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Cache and Aliases - Delong"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC13 - View instructions"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "1.  *Actor* requests help in learning the application"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "2.  *System* shows a list of commands with information about each one of them"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 1a. Wrong command input"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 1a1. *System* shows the list of commands"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC14 - Command alias"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "1.  *Actor* requests using alias for the commands"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "2.  *System* understands the command and proceeds to process it"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* 1a. Alias not accepted"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "** 1a1. *System* shows the list of commands"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d Use case: UC15 - Autocomplete command"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "1.  *Actor* beings typing in the command"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "2.  *System* recognises the command and does autocomplete"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "3.  *Actor* selects the autocomplete word"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": ". Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Should not have any noticeable sluggishness when holding list of car parks."
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Should come with automated unit tests and be able to handle errors and exceptions."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Should be easy to use for novice that have never used a CLI before or never used an application"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "to search for locations of car parks."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Query should respond fast assuming no connection delays and the API is working."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". The application is not expected to download an entire list of car parks in the country to work offline."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". This application is not suppose to be used by drivers on the road."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". The system should be easy and scalable in adding on features for future versions."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". The car park data should be updated frequently while running to send notifications in real time."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Privacy details in the favourites list should not be seen or shared easily by others."
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[[api]] API (Application Programming Interface)::"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Specifies the interface through which other programs can interact with a software component. It is a contract between the component and its clients."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[[autocomplete]]  Autocomplete::"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Provides suggestions while you type into the field."
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[[flag]] Flag::"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "A value that acts as a signal for a function or process."
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[[JSON]] JSON (JavaScript Object Notation)::"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "A file format that allows humans to easily read and write data for machines to process."
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[[private-contact-detail]] Favourites::"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "A custom list of car parks that is meant to be viewed easily."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[[ui]] UI (User Interface)::"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Allows the user to interact with the application through inputs and outputs of data."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Deleting a car park"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ". Deleting a car park while all carparks are listed"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".. Prerequisites: List all car parks using the `list` command. Multiple car parks in the list."
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "   Expected: No car park is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 99,
      "Lexzt": 61,
      "-": 682,
      "ZhuanYu": 604
    }
  },
  {
    "path": "docs/DummySearchPage.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmeta charset\u003d\"utf-8\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ctitle\u003eDummy Search Page\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscript type\u003d\"text/javascript\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    function getJsonFromUrl() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      var query \u003d location.search.substr(1);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      var result \u003d {};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "      query.split(\"\u0026\").forEach(function(part) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        var item \u003d part.split(\"\u003d\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        result[item[0]] \u003d decodeURIComponent(item[1]);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      return result;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    document.addEventListener(\"DOMContentLoaded\", function(event) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      document.getElementById(\"name\").innerHTML\u003dgetJsonFromUrl().name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/script\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  \u003ciframe width\u003d\"1000\" height\u003d\"400\" src\u003d\"https://data.gov.sg/dataset/hdb-carpark-information/resource/139a3035-e624-4f56-b63f-89ae28d4ae4c/view/e02fdccf-b667-4ede-a87b-74cb9f1e6080\" frameBorder\u003d\" 10\"\u003e \u003c/iframe\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  \u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  Hi \u003cspan id\u003d\"name\"\u003e\u003c/span\u003e: This is a placeholder page for se-edu/addressbook-level4.\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  You may update the code to load a page from a real service (e.g., Google search).\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  This dummy page is used here because, given the high number of forks of this repo, \u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  loading a page from a real third-party service by default can result in that service taking counter-measures \u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  (e.g., redirecting to captcha pages) due to the high number of rapid requests received from a single IP.\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  When you have made the change, please remove:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003col\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cli\u003eThis file (\u003ccode\u003edocs/DummySearchPage.html\u003c/code\u003e).\u003c/li\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cli\u003eTask \u003ccode\u003ecopyDummySearchPage\u003c/code\u003e in both \u003ccode\u003ebuild.gradle\u003c/code\u003e and \u003ccode\u003e.travis.yml\u003c/code\u003e.\u003c/li\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/ol\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 1,
      "-": 31,
      "ZhuanYu": 5
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d Car Park Finder - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T09-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "By: `Team T09-4`      Since: `Oct 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "The Car Park Finder is an application to find HDB (Housing Development Board) car parks in Singapore. It allows you to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "work with a *Command Line Interface (CLI)* to display a list of car parks with the convenience of simply typing. If you"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YurouTang"
        },
        "content": " *use the computer frequently* and *commute by driving*, you would find our application useful in helping you obtain"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YurouTang"
        },
        "content": " various information about car parks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Here are several quick tips to get the application running."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ". Check that you have https://www.oracle.com/technetwork/java/javase/downloads/index.html[Java version 9] or later installed in your Computer."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ". Download the latest carparkbook.jar here."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for your Car park book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ". Double-click the file to start the application. The *Graphical User Interface (GUI)* should appear in a few seconds."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ".Home page"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "image::Ui2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ". Type the command in the command box and press kbd:[Enter] to execute it."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Some example commands you can try are:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "- list: list your favorites list, with all the car park details"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "- help: shows the list of available commands and how to use them"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "- exit: exit the program"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `find LOCATION`, `LOCATION` is a"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "parameter which can be used as `find serangoon`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* Items in square brackets are optional e.g `filter [f/] [n/] [ct/CARPARK_TYPE]` can be used as `filter f/ n/ ct/SURFACE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "` or as `filter f/`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `filter [f/] [n/] [ct/CARPARK_TYPE]`,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "`filter [n/] [f/] [ct/CARPARK_TYPE]` is also acceptable."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Shows the list of available commands and how to use them. +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Format: `help` or `h`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "A help window will pop up that contains all the commands available and how to"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "use them."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d Finding car parks : `find`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Finds a list of available car parks +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]` or `f KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "Upper and lower case characters do not matter."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ".Before using find command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "image::findbefore.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ".After using find command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "image::findafter.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "* `find punggol`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* `f HG83`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Select car park : `select`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Select the car park you wish to go to. +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Format: `select INDEX` or `s INDEX`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* The index refers to the index number shown in the displayed car park list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".After using select command"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "image::select.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Select the 2nd car park in the address book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `find sengkang` +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "`s 1` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Selects the 1st car park in the results of the `find` command."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Filter car parks : `filter`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Filters the list of car parks by free parking, night parking or car park type. +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Format: `filter [f/ DAY START_TIME END_TIME] [n/] [ct/ CARPARK_TYPE]` +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "or `fi [f/ DAY START_TIME END_TIME] [n/] [ct/ CARPARK_TYPE]`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Must have car parks beforehand. +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Upper and lower case characters do not matter."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Flags:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `f/ - FREE_PARKING`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `n/ - NIGHT_PARKING`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `ct/ - CARPARK_TYPE`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "- `SURFACE`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "- `MULTI-STOREY`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "- `BASEMENT`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "- `COVERED`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "- `MECHANISED`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ".Filtering covered car parks"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "image::filter.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* `filter f/ SUN 7.30AM 5.30PM n/ ct/ SURFACE`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* `fi ct/ BASEMENT`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "\u003d\u003d\u003d Sort car parks : `sort`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Sort the list of car parks by distance or name. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Format: `sort FILTER_TYPE` or `so FILTER_TYPE`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Must have car parks beforehand."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Flags:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `DISTANCE`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `NAME`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `FP (Free Parking)`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `NP (Night Parking)`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* `sort DISTANCE`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* `so NAME`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Listing all car parks : `list`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Show a list of all the car parks with their details. +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Format: `list` or `l`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".After using list command"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "image::listafter.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d\u003d Add favourite car parks or location : `add` `[coming in v2.0]`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Add a car park into your favorites list +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Format: `add c/CARPARK_NUMBER` or `a c/CARPARK_NUMBER`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* `add c/SE12`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* `a c/SE12`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Remove from favorites list : `delete` `[coming in v2.0]`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Remove the specified car park from your favorites list +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Format: `delete c/CARPARK_NUMBER` or `d c/CARPARK_NUMBER`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `delete c/SE12`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `d c/SE12`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Data query : `query`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Get car park information from data.gov.sg by querying it. +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "You need to run this command to get the latest information on all the car parks."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ".After using query command"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "image::query.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `query`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Notification : `notify` `[coming in v2.0]`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Set the interval to give updates in real time for all the car parks. +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "Format: `notify TIME_SECONDS` or `n TIME_SECONDS`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "The default value is 60 seconds. You can set within a range of 10 seconds to 1 hour."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "* `notify 60`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "* `n 60`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Weather update : `weather` `[coming in v2.0]`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Include weather updates in the notifications by indicating on or off. +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Format: `weather TOGGLE`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `weather on`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "* `weather off`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Clears all entries from the list. +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d\u003d\u003d Exiting the application : `exit`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "Exits the application. +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "*Q*: How do I transfer my data to another computer? +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "*A*: Install the application in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Car Park Finder folder."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "*Q*: If I do not know the postal code of the location, am I still able to find car parks through other means? +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "*A*: Yes, by typing keywords like street names."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ".General Commands"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|Command |Format |Example"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*Help*"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`help`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`h`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*Clear*"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`clear`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`c`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*History*"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`history`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`hi`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*Query*"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`query`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`q`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*Exit*"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`exit`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`e`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ".Carpark Management"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|Command |Format |Example"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*List*"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`list`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`l`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*Select*"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`select INDEX`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`s 2`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*Find*"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`f punggol`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*Filter*"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`filter [f/FREE_PARKING] [n/NIGHT_PARKING] [ct/CARPARK_TYPE]`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`fi f/true n/false ct/multi`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*Sort*"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`sort FILTER_TYPE`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`so DISTANCE`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|*Notify*"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`notify`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|`n 60`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 67,
      "Lexzt": 24,
      "YurouTang": 34,
      "-": 123,
      "ZhuanYu": 78
    }
  },
  {
    "path": "docs/team/alvin.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003d Alvin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 208,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX \u003d \"The car park index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_CARPARKS_LISTED_OVERVIEW \u003d \"%1$d car parks listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    //public static final String MESSAGE_INVALID_FILTER_PARAMETERS \u003d \"The filter parameters are invalid.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YurouTang": 2,
      "-": 11,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/** Indicates the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ReadOnlyAddressBook data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return \"number of carparks \" + data.getCarparkList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/CarparkPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a selection change in the Car park List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final Carpark newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkPanelSelectionChangedEvent(Carpark newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Carpark getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "ZhuanYu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/JumpToListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Indicates a request to jump to the list of carparks"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JumpToListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public JumpToListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String, String...)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/GsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.net.URLConnection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Converts JSON from API call to a Java Object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class GsonUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static HashSet\u003cCarparkJson\u003e carparkList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Fetches car park information and returns a list of it."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @return A list of list of strings containing the car park information."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws IOException if unable to connect to URL."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static ArrayList\u003cArrayList\u003cString\u003e\u003e fetchCarparkInfo() throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        getCarparkData();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        getCarparkAvailability();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e str \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (CarparkJson list : carparkList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            if (list.jsonData \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                list.addOn(\"0\", \"0\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            str.add(list.jsonData);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static void getCarparkAvailability() throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String url \u003d \"https://api.data.gov.sg/v1/transport/carpark-availability\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        URL obj \u003d new URL(url);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        URLConnection con \u003d obj.openConnection();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        con.connect();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        InputStreamReader in \u003d new InputStreamReader((InputStream) con.getContent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        JsonArray test3 \u003d new JsonParser()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .parse(in)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .getAsJsonObject()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .getAsJsonArray(\"items\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .get(0)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .getAsJsonObject()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .getAsJsonArray(\"carpark_data\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (int i \u003d 0; i \u003c test3.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            JsonObject object \u003d test3.get(i).getAsJsonObject();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            String[] res \u003d object.get(\"carpark_number\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .toString()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .split(\"\\\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            JsonObject test \u003d object.getAsJsonArray(\"carpark_info\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .get(0)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .getAsJsonObject();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            String[] res2 \u003d test.get(\"total_lots\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .toString()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .split(\"\\\"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            String[] res3 \u003d test.get(\"lots_available\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .toString()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .split(\"\\\"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            for (CarparkJson carpark : carparkList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                if (carpark.getNumber().contains(res[1])) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    carpark.addOn(res2[1], res3[1]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static void getCarparkData() throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String urlHalf \u003d \"https://data.gov.sg/api/action/datastore_search?\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                + \"resource_id\u003d139a3035-e624-4f56-b63f-89ae28d4ae4c\u0026limit\u003d1000\u0026offset\u003d\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        int offset \u003d 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        StringBuilder urlFull \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        urlFull.append(urlHalf).append(offset);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        InputStreamReader in;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        JsonArray test3;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            URL obj \u003d new URL(urlFull.toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            URLConnection con \u003d obj.openConnection();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            con.connect();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            in \u003d new InputStreamReader((InputStream) con.getContent());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            test3 \u003d new JsonParser()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .parse(in)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .getAsJsonObject()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .getAsJsonObject(\"result\")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    .getAsJsonArray(\"records\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            for (int i \u003d 0; i \u003c test3.size(); i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                JsonElement object \u003d test3.get(i);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                CarparkJson cPark \u003d gson.fromJson(object.toString(), CarparkJson.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                carparkList.add(cPark);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            offset +\u003d 1000;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            urlFull.setLength(0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            urlFull.append(urlHalf).append(offset);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        } while (test3.size() \u003e 0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Container class to hold JSON data."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private class CarparkJson {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //CHECKSTYLE.OFF: MemberNameCheck"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private final String short_term_parking;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private final String y_coord;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private final String car_park_type;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private final String x_coord;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private final String free_parking;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private final String night_parking;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private final String address;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private final String car_park_no;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private final String type_of_parking_system;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //CHECKSTYLE.ON: MemberNameCheck"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private ArrayList\u003cString\u003e jsonData;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private CarparkJson(String... data) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            short_term_parking \u003d data[0];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            car_park_type \u003d data[1];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            y_coord \u003d data[2];"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            x_coord \u003d data[3];"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            free_parking \u003d data[4];"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            night_parking \u003d data[5];"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            address \u003d data[6];"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            car_park_no \u003d data[7];"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            type_of_parking_system \u003d data[8];"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         * Adds the JSON data into a list"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         * @param data Contains total lots and lots availability numbers."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private void addOn(String... data) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(address);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(car_park_no);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(car_park_type);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(x_coord + \", \" + y_coord);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(free_parking);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(data[1]);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(night_parking);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(short_term_parking);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(data[0]);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            jsonData.add(type_of_parking_system);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private String getNumber() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return car_park_no;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            if (!(other instanceof CarparkJson)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            CarparkJson otherCarparkJson \u003d (CarparkJson) other;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return short_term_parking.equals(otherCarparkJson.short_term_parking)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 y_coord.equals(otherCarparkJson.y_coord)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 car_park_type.equals(otherCarparkJson.car_park_type)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 x_coord.equals(otherCarparkJson.x_coord)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 free_parking.equals(otherCarparkJson.free_parking)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 night_parking.equals(otherCarparkJson.night_parking)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 address.equals(otherCarparkJson.address)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 car_park_no.equals(otherCarparkJson.car_park_no)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 type_of_parking_system.equals(otherCarparkJson.type_of_parking_system);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public int hashCode() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return Objects.hash(short_term_parking, y_coord, car_park_type, x_coord, free_parking, night_parking,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    address, car_park_no, type_of_parking_system);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 209
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Returns true if the {@code sentence} contains partial the {@code word}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     *   Ignores case, but a partial word match is required."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static boolean containsPartialWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String preppedWord \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .anyMatch(data -\u003e data.contains(preppedWord));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 26,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of carparks */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    ObservableList\u003cCarpark\u003e getFilteredCarparkList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public ObservableList\u003cCarpark\u003e getFilteredCarparkList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return model.getFilteredCarparkList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Adds a car park to the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a carpark to the address book. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"We are not doing adds. Due for deletion.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New car park added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARPARK \u003d \"This car park already exists in the address book\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final Carpark toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Carpark}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public AddCommand(Carpark carpark) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(carpark);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        toAdd \u003d carpark;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (model.hasCarpark(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CARPARK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        model.addCarpark(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 1,
      "-": 38,
      "ZhuanYu": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Deletes a car park identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            + \": Deletes the car park identified by the index number used in the displayed car park list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_DELETE_CARPARK_SUCCESS \u003d \"Deleted Car park: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        List\u003cCarpark\u003e lastShownList \u003d model.getFilteredCarparkList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Carpark carparkToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        model.deleteCarpark(carparkToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CARPARK_SUCCESS, carparkToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "ZhuanYu": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARPARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.CarparkNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.CarparkType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Coordinate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.FreeParking;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.LotsAvailable;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.NightParking;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.ShortTerm;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.TotalLots;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.TypeOfParking;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Edits the details of an existing car park in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the carpark identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + \"by the index number used in the displayed carpark list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //        + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"We are not doing edits. Due for deletion.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_EDIT_CARPARK_SUCCESS \u003d \"Edited Carpark: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARPARK \u003d \"This carpark already exists in the address book.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final EditCarparkDescriptor editCarparkDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param index of the carpark in the filtered carpark list to edit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param editCarparkDescriptor details to edit the carpark with"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public EditCommand(Index index, EditCarparkDescriptor editCarparkDescriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(editCarparkDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.editCarparkDescriptor \u003d new EditCarparkDescriptor(editCarparkDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        List\u003cCarpark\u003e lastShownList \u003d model.getFilteredCarparkList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Carpark carparkToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Carpark editedCarpark \u003d createEditedCarpark(carparkToEdit, editCarparkDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!carparkToEdit.isSameCarpark(editedCarpark) \u0026\u0026 model.hasCarpark(editedCarpark)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CARPARK);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        model.updateCarpark(carparkToEdit, editedCarpark);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        model.updateFilteredCarparkList(PREDICATE_SHOW_ALL_CARPARK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CARPARK_SUCCESS, editedCarpark));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Creates and returns a {@code Carpark} with the details of {@code carparkToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * edited with {@code editCarparkDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static Carpark createEditedCarpark(Carpark carparkToEdit,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                                               EditCarparkDescriptor editCarparkDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assert carparkToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Address updatedAddress \u003d editCarparkDescriptor.getAddress()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .orElse(carparkToEdit.getAddress());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkNumber updatedCarparkNumber \u003d editCarparkDescriptor.getCarparkNumber()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .orElse(carparkToEdit.getCarparkNumber());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkType updatedCarparkType \u003d editCarparkDescriptor.getCarparkType()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .orElse(carparkToEdit.getCarparkType());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Coordinate updatedCoordinate \u003d editCarparkDescriptor.getCoordinate()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .orElse(carparkToEdit.getCoordinate());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        FreeParking updatedFreeParking \u003d editCarparkDescriptor.getFreeParking()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .orElse(carparkToEdit.getFreeParking());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        LotsAvailable updatedLotsAvailable \u003d editCarparkDescriptor.getLotsAvailable()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .orElse(carparkToEdit.getLotsAvailable());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        NightParking updatedNightParking \u003d editCarparkDescriptor.getNightParking()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .orElse(carparkToEdit.getNightParking());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ShortTerm updatedShortTerm \u003d editCarparkDescriptor.getShortTerm()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .orElse(carparkToEdit.getShortTerm());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        TotalLots updatedTotalLots \u003d editCarparkDescriptor.getTotalLots()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .orElse(carparkToEdit.getTotalLots());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        TypeOfParking updatedTypeOfParking \u003d editCarparkDescriptor.getTypeOfParking()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .orElse(carparkToEdit.getTypeOfParking());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editCarparkDescriptor.getTags()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .orElse(carparkToEdit.getTags());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new Carpark(updatedAddress, updatedCarparkNumber, updatedCarparkType, updatedCoordinate,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                updatedFreeParking, updatedLotsAvailable, updatedNightParking, updatedShortTerm,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                updatedTotalLots, updatedTypeOfParking, updatedTags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 editCarparkDescriptor.equals(e.editCarparkDescriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Stores the details to edit the carpark with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * corresponding field value of the carpark."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static class EditCarparkDescriptor {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private CarparkNumber carparkNumber;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private CarparkType carparkType;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private Coordinate coordinate;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private FreeParking freeParking;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private LotsAvailable lotsAvailable;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private NightParking nightParking;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private ShortTerm shortTerm;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private TotalLots totalLots;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        private TypeOfParking typeOfParking;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public EditCarparkDescriptor() {}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public EditCarparkDescriptor(EditCarparkDescriptor toCopy) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            setCarparkNumber(toCopy.carparkNumber);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            setCarparkType(toCopy.carparkType);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            setCoordinate(toCopy.coordinate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            setFreeParking(toCopy.freeParking);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            setLotsAvailable(toCopy.lotsAvailable);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            setNightParking(toCopy.nightParking);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            setShortTerm(toCopy.shortTerm);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            setTotalLots(toCopy.totalLots);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            setTypeOfParking(toCopy.typeOfParking);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return CollectionUtil.isAnyNonNull(address, carparkNumber, carparkType, coordinate, freeParking,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    lotsAvailable, nightParking, shortTerm, totalLots, typeOfParking, tags);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public void setCarparkNumber(CarparkNumber carparkNumber) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            this.carparkNumber \u003d carparkNumber;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public Optional\u003cCarparkNumber\u003e getCarparkNumber() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return Optional.ofNullable(carparkNumber);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public void setCarparkType(CarparkType carparkType) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            this.carparkType \u003d carparkType;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public Optional\u003cCarparkType\u003e getCarparkType() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return Optional.ofNullable(carparkType);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public void setCoordinate(Coordinate carparkType) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            this.coordinate \u003d coordinate;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public Optional\u003cCoordinate\u003e getCoordinate() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return Optional.ofNullable(coordinate);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public void setFreeParking(FreeParking freeParking) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            this.freeParking \u003d freeParking;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public Optional\u003cFreeParking\u003e getFreeParking() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return Optional.ofNullable(freeParking);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public void setLotsAvailable(LotsAvailable lotsAvailable) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            this.lotsAvailable \u003d lotsAvailable;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public Optional\u003cLotsAvailable\u003e getLotsAvailable() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return Optional.ofNullable(lotsAvailable);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public void setNightParking(NightParking nightParking) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            this.nightParking \u003d nightParking;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public Optional\u003cNightParking\u003e getNightParking() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return Optional.ofNullable(nightParking);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public void setShortTerm(ShortTerm shortTerm) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            this.shortTerm \u003d shortTerm;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public Optional\u003cShortTerm\u003e getShortTerm() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return Optional.ofNullable(shortTerm);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public void setTotalLots(TotalLots totalLots) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            this.totalLots \u003d totalLots;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public Optional\u003cTotalLots\u003e getTotalLots() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return Optional.of(totalLots);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public void setTypeOfParking(TypeOfParking typeOfParking) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            this.typeOfParking \u003d typeOfParking;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        public Optional\u003cTypeOfParking\u003e getTypeOfParking() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return Optional.of(typeOfParking);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            if (!(other instanceof EditCarparkDescriptor)) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            EditCarparkDescriptor e \u003d (EditCarparkDescriptor) other;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 getCarparkNumber().equals(e.getCarparkNumber())"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 getCarparkType().equals(e.getCarparkType())"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 getCoordinate().equals(e.getCoordinate())"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 getFreeParking().equals(e.getFreeParking())"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 getLotsAvailable().equals(e.getLotsAvailable())"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 getNightParking().equals(e.getNightParking())"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 getShortTerm().equals(e.getShortTerm())"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 getTotalLots().equals(e.getTotalLots())"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    \u0026\u0026 getTypeOfParking().equals(e.getTypeOfParking())"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 143,
      "ZhuanYu": 177
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 2,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import seedu.address.model.carpark.CarparkHasFreeParkingPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import seedu.address.model.carpark.CarparkHasNightParkingPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import seedu.address.model.carpark.CarparkIsOfTypePredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YurouTang"
        },
        "content": " * Filters car parks using to flags"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"fi\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            + \": Filters the carpark based using flags.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            + \"Flags:\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            + \"\u003e Night Parking: n/ \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            + \"\u003e Free Parking: f/ [day] [start time] [end time]     Example: filter f/ SUN 7.30AM 8.30PM\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            + \"\u003e Car Park Type: ct/ [car park type]     Example: filter ct/ basement\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            + \"   SURFACE\\n\" + \"   MUITISTOREY\\n\" + \"   BASEMENT\\n\" + \"   COVERED\\n\" + \"   MECHANISED\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    //public static final String MESSAGE_FILTER_CARPARK_SUCCESS \u003d \"Filtered Car Parks.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    private Predicate predicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    private String[] flags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "     * Creates a FilterCommand with the relevant flags"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public FilterCommand(String[] flags) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        this.flags \u003d flags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        this.predicate \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        List\u003cString\u003e flagList \u003d Arrays.asList(flags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        // Currently can only have one flag at a time."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        if (flagList.contains(\"n/\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            this.predicate \u003d new CarparkHasNightParkingPredicate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            model.updateFilteredCarparkList(predicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        if (flagList.contains(\"f/\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            int index \u003d flagList.indexOf(\"f/\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            // Can accept small letters too"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            String day \u003d flagList.get(index + 1).toUpperCase();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            System.out.println(\"day: \" + day);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            String startTime \u003d flagList.get(index + 2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            System.out.println(\"startTime: \" + startTime);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            String endTime \u003d flagList.get(index + 3);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            System.out.println(\"endTime: \" + endTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            this.predicate \u003d new CarparkHasFreeParkingPredicate(day, startTime, endTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            model.updateFilteredCarparkList(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        if (flagList.contains(\"ct/\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            int index2 \u003d flagList.indexOf(\"ct/\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            String carparkType \u003d flagList.get(index2 + 1).toUpperCase();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            System.out.println(\"carparkType: \" + carparkType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            this.predicate \u003d new CarparkIsOfTypePredicate(carparkType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            model.updateFilteredCarparkList(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                String.format(Messages.MESSAGE_CARPARKS_LISTED_OVERVIEW, model.getFilteredCarparkList().size()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //throw new CommandException(\"filter command executed.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //return new CommandResult(String.format(MESSAGE_FILTER_CARPARK_SUCCESS));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        return other \u003d\u003d this; // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //|| (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //\u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 1,
      "YurouTang": 86,
      "ZhuanYu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.CarparkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Finds and lists all car parks in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all car parks whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final CarparkContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public FindCommand(CarparkContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        model.updateFilteredCarparkList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                String.format(Messages.MESSAGE_CARPARKS_LISTED_OVERVIEW, model.getFilteredCarparkList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 1,
      "-": 36,
      "ZhuanYu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARPARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Lists all carparks in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all car parks\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        model.updateFilteredCarparkList(PREDICATE_SHOW_ALL_CARPARK);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 1,
      "-": 21,
      "ZhuanYu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NotifyCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.commons.util.GsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.CarparkNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.CarparkType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Coordinate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.FreeParking;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.LotsAvailable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.NightParking;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.ShortTerm;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.TotalLots;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.TypeOfParking;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Notifies when to get the car park information from the API."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class NotifyCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"notify\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            + \": Sets when to update the car park information.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Car park information updated\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_ERROR_CARPARK \u003d \"Problem loading car park information from online\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Calls the API and load all the car parks information"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @return An array of car parks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws IOException If unable to load from API"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private ArrayList\u003cCarpark\u003e readCarpark() throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ArrayList\u003cCarpark\u003e carparkList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (ArrayList\u003cString\u003e carpark : GsonUtil.fetchCarparkInfo()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            Carpark c \u003d new Carpark(new Address(carpark.get(0)), new CarparkNumber(carpark.get(1)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    new CarparkType(carpark.get(2)), new Coordinate(carpark.get(3)),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    new FreeParking(carpark.get(4)), new LotsAvailable(carpark.get(5)),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    new NightParking(carpark.get(6)), new ShortTerm(carpark.get(7)),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    new TotalLots(carpark.get(8)), new TypeOfParking(carpark.get(9)), null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            carparkList.add(c);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparkList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            model.loadCarpark(readCarpark());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new CommandException(MESSAGE_ERROR_CARPARK);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 1,
      "ZhuanYu": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/QueryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.commons.util.GsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.CarparkNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.CarparkType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Coordinate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.FreeParking;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.LotsAvailable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.NightParking;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.ShortTerm;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.TotalLots;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.TypeOfParking;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Queries when to get the car park information from the API."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class QueryCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"query\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"q\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            + \": Sets when to update the car park information.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Car park information updated\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_ERROR_CARPARK \u003d \"Problem loading car park information from online\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Calls the API and load all the car parks information"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @return An array of car parks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws IOException If unable to load from API"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private ArrayList\u003cCarpark\u003e readCarpark() throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ArrayList\u003cCarpark\u003e carparkList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (ArrayList\u003cString\u003e carpark : GsonUtil.fetchCarparkInfo()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            Carpark c \u003d new Carpark(new Address(carpark.get(0)), new CarparkNumber(carpark.get(1)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    new CarparkType(carpark.get(2)), new Coordinate(carpark.get(3)),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    new FreeParking(carpark.get(4)), new LotsAvailable(carpark.get(5)),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    new NightParking(carpark.get(6)), new ShortTerm(carpark.get(7)),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    new TotalLots(carpark.get(8)), new TypeOfParking(carpark.get(9)), null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            carparkList.add(c);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparkList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            model.loadCarpark(readCarpark());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new CommandException(MESSAGE_ERROR_CARPARK);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARPARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        model.updateFilteredCarparkList(PREDICATE_SHOW_ALL_CARPARK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Selects a carpark identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            + \": Selects the carpark identified by the index number used in the displayed carpark list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_SELECT_CARPARK_SUCCESS \u003d \"Selected Carpark: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        List\u003cCarpark\u003e filteredCarparkList \u003d model.getFilteredCarparkList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredCarparkList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_CARPARK_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 1,
      "-": 49,
      "ZhuanYu": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARPARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        model.updateFilteredCarparkList(PREDICATE_SHOW_ALL_CARPARK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CAR_NUM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CAR_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREE_PARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOTS_AVAILABLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NIGHT_PARK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SHORT_TERM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOTAL_LOTS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE_PARK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.CarparkNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.CarparkType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Coordinate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.FreeParking;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.LotsAvailable;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.NightParking;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.ShortTerm;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.TotalLots;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.TypeOfParking;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ADDRESS, PREFIX_CAR_NUM, PREFIX_CAR_TYPE, PREFIX_COORD,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                        PREFIX_FREE_PARK, PREFIX_LOTS_AVAILABLE, PREFIX_NIGHT_PARK, PREFIX_SHORT_TERM,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                        PREFIX_TOTAL_LOTS, PREFIX_TYPE_PARK, PREFIX_TAG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ADDRESS, PREFIX_CAR_NUM, PREFIX_CAR_TYPE, PREFIX_COORD,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                PREFIX_FREE_PARK, PREFIX_LOTS_AVAILABLE, PREFIX_NIGHT_PARK, PREFIX_SHORT_TERM,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                PREFIX_TOTAL_LOTS, PREFIX_TYPE_PARK, PREFIX_TAG)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkNumber carparkNumber \u003d ParserUtil.parseCarparkNumber(argMultimap.getValue(PREFIX_CAR_NUM).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkType carparkType \u003d ParserUtil.parseCarparkType(argMultimap.getValue(PREFIX_CAR_NUM).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Coordinate coordinate \u003d ParserUtil.parseCoordinate(argMultimap.getValue(PREFIX_COORD).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        FreeParking freeParking \u003d ParserUtil.parseFreeParking(argMultimap.getValue(PREFIX_FREE_PARK).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        LotsAvailable lotsAvailable \u003d ParserUtil.parseLotsAvailable(argMultimap.getValue(PREFIX_LOTS_AVAILABLE).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        NightParking nightParking \u003d ParserUtil.parseNightParking(argMultimap.getValue(PREFIX_NIGHT_PARK).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ShortTerm shortTerm \u003d ParserUtil.parseShortTerm(argMultimap.getValue(PREFIX_SHORT_TERM).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        TotalLots totalLots \u003d ParserUtil.parseTotalLots(argMultimap.getValue(PREFIX_TOTAL_LOTS).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        TypeOfParking typeOfParking \u003d ParserUtil.parseTypeOfParking(argMultimap.getValue(PREFIX_TYPE_PARK).get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Carpark carpark \u003d new Carpark(address, carparkNumber, carparkType, coordinate, freeParking,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                lotsAvailable, nightParking, shortTerm, totalLots, typeOfParking, tagList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new AddCommand(carpark);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "ZhuanYu": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.logic.commands.QueryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        case ExitCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        case HelpCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        case FilterCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        case QueryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        case QueryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return new QueryCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 8,
      "YurouTang": 3,
      "-": 92,
      "ZhuanYu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Prefix PREFIX_CAR_NUM \u003d new Prefix(\"cn/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Prefix PREFIX_CAR_TYPE \u003d new Prefix(\"ct/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Prefix PREFIX_COORD \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Prefix PREFIX_FREE_PARK \u003d new Prefix(\"fp/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Prefix PREFIX_LOTS_AVAILABLE \u003d new Prefix(\"la/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Prefix PREFIX_NIGHT_PARK \u003d new Prefix(\"np/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Prefix PREFIX_SHORT_TERM \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Prefix PREFIX_TOTAL_LOTS \u003d new Prefix(\"tl/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Prefix PREFIX_TYPE_PARK \u003d new Prefix(\"tp/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "ZhuanYu": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CAR_NUM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CAR_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREE_PARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOTS_AVAILABLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NIGHT_PARK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SHORT_TERM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOTAL_LOTS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE_PARK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ADDRESS, PREFIX_CAR_NUM, PREFIX_CAR_TYPE, PREFIX_COORD,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                        PREFIX_FREE_PARK, PREFIX_LOTS_AVAILABLE, PREFIX_NIGHT_PARK, PREFIX_SHORT_TERM,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                        PREFIX_TOTAL_LOTS, PREFIX_TYPE_PARK, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        EditCommand.EditCarparkDescriptor editCarparkDescriptor \u003d new EditCommand.EditCarparkDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            editCarparkDescriptor.setAddress("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CAR_NUM).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            editCarparkDescriptor.setCarparkNumber("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    ParserUtil.parseCarparkNumber(argMultimap.getValue(PREFIX_CAR_NUM).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CAR_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            editCarparkDescriptor.setCarparkType("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    ParserUtil.parseCarparkType(argMultimap.getValue(PREFIX_CAR_TYPE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COORD).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            editCarparkDescriptor.setCoordinate("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    ParserUtil.parseCoordinate(argMultimap.getValue(PREFIX_COORD).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FREE_PARK).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            editCarparkDescriptor.setFreeParking("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    ParserUtil.parseFreeParking(argMultimap.getValue(PREFIX_FREE_PARK).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOTS_AVAILABLE).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            editCarparkDescriptor.setLotsAvailable("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    ParserUtil.parseLotsAvailable(argMultimap.getValue(PREFIX_LOTS_AVAILABLE).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NIGHT_PARK).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            editCarparkDescriptor.setNightParking("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    ParserUtil.parseNightParking(argMultimap.getValue(PREFIX_NIGHT_PARK).get()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SHORT_TERM).isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            editCarparkDescriptor.setShortTerm("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    ParserUtil.parseShortTerm(argMultimap.getValue(PREFIX_SHORT_TERM).get()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TOTAL_LOTS).isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            editCarparkDescriptor.setTotalLots("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    ParserUtil.parseTotalLots(argMultimap.getValue(PREFIX_TOTAL_LOTS).get()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TYPE_PARK).isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            editCarparkDescriptor.setTypeOfParking("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    ParserUtil.parseTypeOfParking(argMultimap.getValue(PREFIX_TYPE_PARK).get()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editCarparkDescriptor::setTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!editCarparkDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new EditCommand(index, editCarparkDescriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "ZhuanYu": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * To be added"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * To be added"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        String[] flags \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //System.out.println(flags[0]);   // [space]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //System.out.println(flags[1]);   // flag 1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //System.out.println(flags[2]);   // flag 2"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        return new FilterCommand(flags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YurouTang": 26,
      "ZhuanYu": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.CarparkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private String[] ignoreKeywords \u003d new String[]{\"blk\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            keywords[i] \u003d keywords[i].toLowerCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        List nameKeywords \u003d new ArrayList\u003c\u003e(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        for (String ignore:ignoreKeywords) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            nameKeywords.removeAll(Collections.singleton(ignore.toUpperCase()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return new FindCommand(new CarparkContainsKeywordsPredicate(nameKeywords));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 14,
      "-": 30,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.CarparkNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.CarparkType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Coordinate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.FreeParking;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.LotsAvailable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.NightParking;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.ShortTerm;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.TotalLots;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.TypeOfParking;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String carNum} into a {@code CarparkNumber}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code carNum} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static CarparkNumber parseCarparkNumber(String carNum) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedcarNum \u003d carNum.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedcarNum)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new CarparkNumber(trimmedcarNum);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String carType} into a {@code CarparkType}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code carType} is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static CarparkType parseCarparkType(String carType) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(carType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedCarparkType \u003d carType.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!CarparkType.isValidCarType(trimmedCarparkType)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(CarparkType.MESSAGE_CAR_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new CarparkType(trimmedCarparkType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String coordinate} into a {@code Coordinate}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code coordinate} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static Coordinate parseCoordinate(String coordinate) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(coordinate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedCoordinate \u003d coordinate.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!Coordinate.isValidCoord(trimmedCoordinate)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(Coordinate.MESSAGE_COORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new Coordinate(trimmedCoordinate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String freePark} into a {@code FreeParking}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code coordinate} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static FreeParking parseFreeParking(String freePark) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(freePark);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedFreeParking \u003d freePark.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!FreeParking.isValidFreePark(trimmedFreeParking)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(FreeParking.MESSAGE_FREE_PARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new FreeParking(trimmedFreeParking);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String lotsAvail} into a {@code LotsAvailable}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code lotsAvail} is invalid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static LotsAvailable parseLotsAvailable(String lotsAvail) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedLotsAvail \u003d lotsAvail.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedLotsAvail)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new LotsAvailable(trimmedLotsAvail);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String nightPark} into a {@code NightParking}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code nightPark} is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static NightParking parseNightParking(String nightPark) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(nightPark);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedNightParking \u003d nightPark.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!NightParking.isValidNightPark(trimmedNightParking)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(NightParking.MESSAGE_NIGHT_PARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new NightParking(trimmedNightParking);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String shortTerm} into a {@code ShortTerm}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code shortTerm} is invalid."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static ShortTerm parseShortTerm(String shortTerm) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(shortTerm);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedShortTerm \u003d shortTerm.trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!ShortTerm.isValidShortTerm(trimmedShortTerm)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(ShortTerm.MESSAGE_SHORT_TERM_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new ShortTerm(trimmedShortTerm);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String totalLots} into an {@code TotalLots}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code totalLots} is invalid."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static TotalLots parseTotalLots(String totalLots) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(totalLots);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedTotalLots \u003d totalLots.trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedTotalLots)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new TotalLots(trimmedTotalLots);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses a {@code String typePark} into a {@code TypeOfParking}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws ParseException if the given {@code typePark} is invalid."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static TypeOfParking parseTypeOfParking(String typePark) throws ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(typePark);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String trimmedTypeOfParking \u003d typePark.trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!TypeOfParking.isValidTypePark(trimmedTypeOfParking)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new ParseException(TypeOfParking.MESSAGE_TYPE_PARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new TypeOfParking(trimmedTypeOfParking);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 88,
      "ZhuanYu": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.UniqueCarparkList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Duplicates are not allowed (by .isSameCarpark comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final UniqueCarparkList carparks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparks \u003d new UniqueCarparkList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Creates an AddressBook using the car parks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Replaces the contents of the car park list with {@code carparks}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code carparks} must not contain duplicate car parks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void setCarparks(List\u003cCarpark\u003e listCarparks) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparks.setCarparks(listCarparks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        setCarparks(newData.getCarparkList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //// car park-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a car park with the same identity as {@code carpark} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean hasCarpark(Carpark carpark) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(carpark);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparks.contains(carpark);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Adds a car park to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The car park must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void addCarpark(Carpark c) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparks.add(c);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Replaces the given car park {@code target} in the list with {@code editedCarpark}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The car park identity of {@code editedCarpark} must not be the same as"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * another existing car park in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void updateCarpark(Carpark target, Carpark editedCarpark) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(editedCarpark);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparks.setCarpark(target, editedCarpark);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void removeCarpark(Carpark key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparks.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparks.asUnmodifiableObservableList().size() + \" car parks\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public ObservableList\u003cCarpark\u003e getCarparkList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 carparks.equals(((AddressBook) other).carparks));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparks.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 88,
      "ZhuanYu": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    Predicate\u003cCarpark\u003e PREDICATE_SHOW_ALL_CARPARK \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a car park with the same identity as {@code carpark} exists in the address book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    boolean hasCarpark(Carpark carpark);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Deletes the given car park."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The car park must exist in the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    void deleteCarpark(Carpark target);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Adds the given car park."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code carpark} must not already exist in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    void addCarpark(Carpark carpark);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Replaces the given car park {@code target} with {@code editedCarpark}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The car park identity of {@code editedCarpark} must not be the same"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * as another existing car park in the address book."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    void updateCarpark(Carpark target, Carpark editedCarpark);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Updates with a list of car parks {@code listCarpark}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    void loadCarpark(List\u003cCarpark\u003e listCarpark);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /** Returns an unmodifiable view of the filtered car park list */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    ObservableList\u003cCarpark\u003e getFilteredCarparkList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Updates the filter of the filtered car park list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    void updateFilteredCarparkList(Predicate\u003cCarpark\u003e predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "ZhuanYu": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final FilteredList\u003cCarpark\u003e filteredCarparks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        filteredCarparks \u003d new FilteredList\u003c\u003e(versionedAddressBook.getCarparkList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean hasCarpark(Carpark carpark) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(carpark);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return versionedAddressBook.hasCarpark(carpark);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void deleteCarpark(Carpark target) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedAddressBook.removeCarpark(target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void addCarpark(Carpark carpark) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedAddressBook.addCarpark(carpark);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        updateFilteredCarparkList(PREDICATE_SHOW_ALL_CARPARK);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void updateCarpark(Carpark target, Carpark editedCarpark) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireAllNonNull(target, editedCarpark);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedAddressBook.updateCarpark(target, editedCarpark);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void loadCarpark(List\u003cCarpark\u003e listCarkpark) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        versionedAddressBook.setCarparks(listCarkpark);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        updateFilteredCarparkList(PREDICATE_SHOW_ALL_CARPARK);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Carpark List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Carpark} backed by the internal list of"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public ObservableList\u003cCarpark\u003e getFilteredCarparkList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredCarparks);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void updateFilteredCarparkList(Predicate\u003cCarpark\u003e predicate) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        filteredCarparks.setPredicate(predicate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 filteredCarparks.equals(other.filteredCarparks);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 129,
      "ZhuanYu": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns an unmodifiable view of the carparks list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * This list will not contain any duplicate carparks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    ObservableList\u003cCarpark\u003e getCarparkList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "ZhuanYu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/carpark/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.address.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a car park\u0027s address."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/carpark/Carpark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.address.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a car park."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class Carpark {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final CarparkNumber carparkNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final Coordinate coordinate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final CarparkType carparkType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final FreeParking freeParking;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final LotsAvailable lotsAvailable;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final NightParking nightParking;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final ShortTerm shortTerm;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final TotalLots totalLots;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final TypeOfParking typeOfParking;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Carpark(Address address, CarparkNumber carparkNumber, CarparkType carparkType, Coordinate coordinate,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                   FreeParking freeParking, LotsAvailable lotsAvailable, NightParking nightParking,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                   ShortTerm shortTerm, TotalLots totalLots, TypeOfParking typeOfParking, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireAllNonNull(address, carparkNumber, carparkType, coordinate, freeParking, lotsAvailable,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                nightParking, shortTerm, totalLots, typeOfParking);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.carparkNumber \u003d carparkNumber;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.lotsAvailable \u003d lotsAvailable;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.carparkType \u003d carparkType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.coordinate \u003d coordinate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.freeParking \u003d freeParking;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.nightParking \u003d nightParking;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.shortTerm \u003d shortTerm;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.totalLots \u003d totalLots;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.typeOfParking \u003d typeOfParking;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            this.tags.addAll(tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkNumber getCarparkNumber() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparkNumber;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkType getCarparkType() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparkType;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Coordinate getCoordinate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return coordinate;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public FreeParking getFreeParking() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return freeParking;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public LotsAvailable getLotsAvailable() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return lotsAvailable;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public NightParking getNightParking() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return nightParking;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public ShortTerm getShortTerm() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return shortTerm;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public TotalLots getTotalLots() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return totalLots;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public TypeOfParking getTypeOfParking() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return typeOfParking;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if both carparks of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * This defines a weaker notion of equality between two carparks."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean isSameCarpark(Carpark otherCarpark) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (otherCarpark \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return otherCarpark !\u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getCarparkNumber().equals(getCarparkNumber())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getCoordinate().equals((getCoordinate()))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getLotsAvailable().equals(getLotsAvailable())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getTotalLots().equals(getTotalLots());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if both carparks have the same identity and data fields."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * This defines a stronger notion of equality between two carparks."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!(other instanceof Carpark)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Carpark otherCarpark \u003d (Carpark) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return otherCarpark.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getCarparkNumber().equals(getCarparkNumber())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getCarparkType().equals((getCarparkType()))"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getCoordinate().equals((getCoordinate()))"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getFreeParking().equals((getFreeParking()))"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getLotsAvailable().equals(getLotsAvailable())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getNightParking().equals(getNightParking())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getShortTerm().equals(getShortTerm())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getTotalLots().equals(getTotalLots())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getTypeOfParking().equals(getTypeOfParking())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 otherCarpark.getTags().equals(getTags());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return Objects.hash(address, carparkNumber, carparkType, coordinate, freeParking, lotsAvailable,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                nightParking, shortTerm, totalLots, typeOfParking, tags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        builder.append(getCarparkNumber())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Coordinate: \")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(getCoordinate())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Type: \")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(getCarparkType())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Total Lots: \")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(getTotalLots())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Lots Available: \")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(getLotsAvailable())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Free Parking: \")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(getFreeParking())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Night Parking: \")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(getNightParking())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Short Term Parking: \")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(getShortTerm())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Parking System: \")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(getTypeOfParking())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 2,
      "ZhuanYu": 178
    }
  },
  {
    "path": "src/main/java/seedu/address/model/carpark/CarparkContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.address.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Tests that a {@code Carpark}\u0027s {@code carparkNumber} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkContainsKeywordsPredicate implements Predicate\u003cCarpark\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean test(Carpark carpark) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(carpark.getCarparkNumber().value, keyword)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                                || StringUtil.containsWordIgnoreCase(carpark.getAddress().value, keyword)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                                || StringUtil.containsPartialWordIgnoreCase(carpark.getCarparkNumber().value, keyword)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                                || StringUtil.containsPartialWordIgnoreCase(carpark.getAddress().value, keyword)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                        );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof CarparkContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 keywords.equals(((CarparkContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 6,
      "-": 23,
      "ZhuanYu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/carpark/CarparkHasFreeParkingPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "package seedu.address.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YurouTang"
        },
        "content": " * Tests that a {@code Carpark} has free parking."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YurouTang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "public class CarparkHasFreeParkingPredicate implements Predicate\u003cCarpark\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public CarparkHasFreeParkingPredicate(String day, String startTime, String endTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public boolean test(Carpark carpark) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        // To Be Implemented: Parsing of timing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        String timePeriod \u003d carpark.getFreeParking().value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        boolean hasFreeParkingTiming \u003d !timePeriod.equals(\"NO\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        boolean hasDay \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        boolean afterStart \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        boolean beforeEnd \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            if (hasFreeParkingTiming) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                // Check if timePeriod contains day"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                hasDay \u003d timePeriod.contains(day);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                // Split time period using spacing"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                String[] timePeriodArray \u003d timePeriod.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                // Get the last element of the array"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                String time \u003d timePeriodArray[timePeriodArray.length - 1];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                // Split the string into half by hyphen"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                String[] startAndEndTime \u003d time.split(\"-\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                SimpleDateFormat dateFormat1 \u003d new SimpleDateFormat(\"hhaa\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                SimpleDateFormat dateFormat2 \u003d new SimpleDateFormat(\"hh.mmaa\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                Date start \u003d dateFormat1.parse(startAndEndTime[0]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                Date end \u003d dateFormat2.parse(startAndEndTime[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                // Input time of user can only be of dateFormat2"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                Date inputStart \u003d dateFormat2.parse(startTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                Date inputEnd \u003d dateFormat2.parse(endTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                afterStart \u003d inputStart.after(start) || inputStart.equals(start);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "                beforeEnd \u003d inputEnd.before(end) || inputEnd.equals(end);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            System.out.println(\"parse exception\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        return hasFreeParkingTiming \u0026\u0026 hasDay \u0026\u0026 afterStart \u0026\u0026 beforeEnd;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        return other \u003d\u003d this; // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //|| (other instanceof CarparkHasNightParkingPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //\u0026\u0026 keyword.equals(((CarparkHasNightParkingPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YurouTang": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/carpark/CarparkHasNightParkingPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "package seedu.address.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YurouTang"
        },
        "content": " * Tests that a {@code Carpark} has night parking."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "public class CarparkHasNightParkingPredicate implements Predicate\u003cCarpark\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public boolean test(Carpark carpark) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        return carpark.getNightParking().value.equals(\"YES\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        return other \u003d\u003d this; // short circuit if same object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //|| (other instanceof CarparkHasNightParkingPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //\u0026\u0026 keyword.equals(((CarparkHasNightParkingPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YurouTang": 21,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/carpark/CarparkIsOfTypePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "package seedu.address.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YurouTang"
        },
        "content": " * Tests that a {@code Carpark} is of a specified car park type."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YurouTang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "public class CarparkIsOfTypePredicate implements Predicate\u003cCarpark\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    private final String carparkType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public CarparkIsOfTypePredicate(String carparkType) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        this.carparkType \u003d carparkType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public boolean test(Carpark carpark) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        switch (carparkType) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        case \"SURFACE\":"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            return carpark.getCarparkType().value.contains(\"SURFACE\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        case \"MULTISTOREY\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            return carpark.getCarparkType().value.contains(\"MULTI-STOREY\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        case \"BASEMENT\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            return carpark.getCarparkType().value.contains(\"BASEMENT\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        case \"MECHANISED\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            return carpark.getCarparkType().value.contains(\"MECHANISED\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        case \"COVERED\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            return carpark.getCarparkType().value.contains(\"COVERED\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            // should catch invalid input instead (to be implemented)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "            return carpark.getCarparkType().value.contains(\"CAR PARK\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        return other \u003d\u003d this; // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //|| (other instanceof CarparkHasNightParkingPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "        //\u0026\u0026 keyword.equals(((CarparkHasNightParkingPredicate) other).keyword)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YurouTang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YurouTang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YurouTang": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/carpark/CarparkNumber.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.address.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a car park\u0027s number."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCarNum(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkNumber {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_CAR_NUM_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"Car park number should only contain alphanumeric characters and spaces, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    + \"and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The first character must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String CAR_NUM_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an {@code CarparkNumber}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param carNum A valid carpark number."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkNumber(String carNum) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(carNum);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        checkArgument(isValidCarNum(carNum), MESSAGE_CAR_NUM_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.value \u003d carNum;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static boolean isValidCarNum(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return test.matches(CAR_NUM_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof CarparkNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 value.equals(((CarparkNumber) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/carpark/CarparkType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.address.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a car park\u0027s type."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCarType(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_CAR_TYPE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"Car park type can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The first character must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String CAR_TYPE_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an {@code CarparkType}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param carType A valid carpark type."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkType(String carType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(carType);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        checkArgument(isValidCarType(carType), MESSAGE_CAR_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        value \u003d carType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a given string is a valid carpark type."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static boolean isValidCarType(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return test.matches(CAR_TYPE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof CarparkType // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 value.equals(((CarparkType) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/carpark/Coordinate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.address.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a car park\u0027s coordinate."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCoord(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class Coordinate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_COORD_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"Coordinate should only contain decimal numbers\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String COORD_VALIDATION_REGEX \u003d \"^(\\\\d+(\\\\.\\\\d+)?),\\\\s*(\\\\d+(\\\\.\\\\d+)?)$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs a {@code Coordinate}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param coord A valid Coordinate."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Coordinate(String coord) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(coord);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        checkArgument(isValidCoord(coord), MESSAGE_COORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        value \u003d coord;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a given string is a valid coordinate."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static boolean isValidCoord(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return test.matches(COORD_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof Coordinate // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 value.equals(((Coordinate) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/carpark/FreeParking.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.address.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a car park\u0027s free parking."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFreePark(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class FreeParking {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_FREE_PARK_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"Car park free parking can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The first character must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String FREE_PARK_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an {@code FreeParking}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param freePark A valid free parking."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public FreeParking(String freePark) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(freePark);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        checkArgument(isValidFreePark(freePark), MESSAGE_FREE_PARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        value \u003d freePark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a given string is a valid free parking."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static boolean isValidFreePark(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return test.matches(FREE_PARK_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof FreeParking // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 value.equals(((FreeParking) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/carpark/LotsAvailable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.address.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents the lots available in a car park."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLotsAvail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class LotsAvailable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_LOTS_AVAIL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"Lots available should only contain numbers\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String LOTS_AVAIL_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an {@code TotalLots}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param lotsAvail A valid lots available number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public LotsAvailable(String lotsAvail) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(lotsAvail);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        checkArgument(isValidLotsAvail(lotsAvail), MESSAGE_LOTS_AVAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.value \u003d lotsAvail;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a given string is a valid lots available number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static boolean isValidLotsAvail(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return test.matches(LOTS_AVAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof LotsAvailable // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 value.equals(((LotsAvailable) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/carpark/NightParking.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.address.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a car park\u0027s night parking."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidNightPark(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class NightParking {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_NIGHT_PARK_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"Car park night parking can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The first character must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String NIGHT_PARK_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an {@code NightParking}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param nightPark A valid night parking."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public NightParking(String nightPark) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(nightPark);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        checkArgument(isValidNightPark(nightPark), MESSAGE_NIGHT_PARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        value \u003d nightPark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a given string is a valid night parking."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static boolean isValidNightPark(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return test.matches(NIGHT_PARK_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof NightParking // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 value.equals(((NightParking) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/carpark/ShortTerm.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.address.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a car park\u0027s short term parking timing."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidShortTerm(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class ShortTerm {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_SHORT_TERM_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"Short term parking can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The first character must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String SHORT_TERM_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an {@code ShortTerm}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param shortTerm A valid short term parking."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public ShortTerm(String shortTerm) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(shortTerm);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        checkArgument(isValidShortTerm(shortTerm), MESSAGE_SHORT_TERM_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        value \u003d shortTerm;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a given string is a valid short term parking."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static boolean isValidShortTerm(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return test.matches(SHORT_TERM_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof ShortTerm // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 value.equals(((ShortTerm) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/carpark/TotalLots.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.address.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents the total lots in a car park."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTotalLots(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class TotalLots {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_TOTAL_LOTS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"Total lots should only contain numbers\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String TOTAL_LOTS_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an {@code TotalLots}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param totalLots A valid total lots number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public TotalLots(String totalLots) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(totalLots);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        checkArgument(isValidTotalLots(totalLots), MESSAGE_TOTAL_LOTS_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.value \u003d totalLots;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a given string is a valid total lots number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static boolean isValidTotalLots(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return test.matches(TOTAL_LOTS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof TotalLots // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 value.equals(((TotalLots) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/carpark/TypeOfParking.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.address.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents the type of parking system for a car park."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTypePark(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class TypeOfParking {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_TYPE_PARK_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"Type of parking system can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The first character must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String TYPE_PARK_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an {@code TypeOfParking}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param typePark A valid type of parking."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public TypeOfParking(String typePark) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(typePark);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        checkArgument(isValidTypePark(typePark), MESSAGE_TYPE_PARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        value \u003d typePark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if a given string is a valid type of parking."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static boolean isValidTypePark(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return test.matches(TYPE_PARK_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof TypeOfParking // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 value.equals(((TypeOfParking) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/carpark/UniqueCarparkList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.address.model.carpark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.exceptions.CarparkNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.exceptions.DuplicateCarparkException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * A list of car parks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * A car park is considered unique by comparing using {@code Carpark#isSameCarpark(Carpark)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * As such, adding and updating of car parks uses Carpark#isSameCarpark(Carpark) for equality so as to ensure"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * that the car park being added or updated is unique in terms of identity in the UniqueCarparkList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * However, the removal of a car park uses Carpark#equals(Object) so as to ensure that the car park with"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * @see Carpark#isSameCarpark(Carpark)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class UniqueCarparkList implements Iterable\u003cCarpark\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final ObservableList\u003cCarpark\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if the list contains an equivalent car park as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean contains(Carpark toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCarpark);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Adds a car park to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The car park must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void add(Carpark toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new DuplicateCarparkException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Replaces the car park {@code target} in the list with {@code editedCarpark}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The car park identity of {@code editedCarpark} must not be the same as another existing car park in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void setCarpark(Carpark target, Carpark editedCarpark) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireAllNonNull(target, editedCarpark);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new CarparkNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!target.isSameCarpark(editedCarpark) \u0026\u0026 contains(editedCarpark)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new DuplicateCarparkException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        internalList.set(index, editedCarpark);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Removes the equivalent car park from the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * The car park must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void remove(Carpark toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new CarparkNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void setCarparks(UniqueCarparkList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Replaces the contents of this list with {@code carparks}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code car parks} must not contain duplicate car parks."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void setCarparks(List\u003cCarpark\u003e carparks) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        requireAllNonNull(carparks);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!carparksAreUnique(carparks)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new DuplicateCarparkException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        internalList.setAll(carparks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public ObservableList\u003cCarpark\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Iterator\u003cCarpark\u003e iterator() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                || (other instanceof UniqueCarparkList // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueCarparkList) other).internalList));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if {@code carparks} contains only unique car parks."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private boolean carparksAreUnique(List\u003cCarpark\u003e carparks) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (int i \u003d 0; i \u003c carparks.size() - 1; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            for (int j \u003d i + 1; j \u003c carparks.size(); j++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                if (carparks.get(i).isSameCarpark(carparks.get(j))) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/carpark/exceptions/CarparkNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.address.model.carpark.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Signals that the operation is unable to find the specified car park."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/carpark/exceptions/DuplicateCarparkException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.address.model.carpark.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Signals that the operation will result in duplicate Carparks (Carparks are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class DuplicateCarparkException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public DuplicateCarparkException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        super(\"Operation would result in duplicate carparks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Represents a Tag."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.CarparkNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.CarparkType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Coordinate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.FreeParking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.LotsAvailable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.NightParking;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.ShortTerm;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.TotalLots;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.TypeOfParking;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static Carpark[] getSampleCarpark() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new Carpark[] {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            new Carpark(new Address(\"BLK 174 PUNGGOL FIELD\"), new CarparkNumber(\"PL10\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new CarparkType(\"MULTI-STOREY CAR PARK\"), new Coordinate(\"36567.6957, 42059.8507\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new FreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\"), new LotsAvailable(\"188\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new NightParking(\"YES\"), new ShortTerm(\"WHOLE DAY\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new TotalLots(\"560\"), new TypeOfParking(\"ELECTRONIC PARKING\"), getTagSet(\"Home\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            new Carpark(new Address(\"BLK 175 PUNGGOL FIELD\"), new CarparkNumber(\"PL11\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new CarparkType(\"MULTI-STOREY CAR PARK\"), new Coordinate(\"36383.4393, 42222.0385\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new FreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\"), new LotsAvailable(\"236\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new NightParking(\"YES\"), new ShortTerm(\"WHOLE DAY\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new TotalLots(\"548\"), new TypeOfParking(\"ELECTRONIC PARKING\"), getTagSet(\"Friend\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            new Carpark(new Address(\"BLK 292 PUNGGOL CENTRAL\"), new CarparkNumber(\"PL14\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new CarparkType(\"MULTI-STOREY CAR PARK\"), new Coordinate(\"35982.6704, 42695.5596\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new FreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\"), new LotsAvailable(\"407\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new NightParking(\"YES\"), new ShortTerm(\"WHOLE DAY\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new TotalLots(\"734\"), new TypeOfParking(\"ELECTRONIC PARKING\"), getTagSet(\"Mall\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            new Carpark(new Address(\"BLK 642 PUNGGOL DRIVE\"), new CarparkNumber(\"PL17\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new CarparkType(\"MULTI-STOREY CAR PARK\"), new Coordinate(\"37244.6093, 42288.7308\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new FreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\"), new LotsAvailable(\"297\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new NightParking(\"YES\"), new ShortTerm(\"WHOLE DAY\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new TotalLots(\"609\"), new TypeOfParking(\"ELECTRONIC PARKING\"), getTagSet(\"Office\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            new Carpark(new Address(\"BLK 162 PUNGGOL CENTRAL\"), new CarparkNumber(\"PL18\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new CarparkType(\"MULTI-STOREY CAR PARK\"), new Coordinate(\"37013.9934, 41998.5248\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new FreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\"), new LotsAvailable(\"136\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new NightParking(\"YES\"), new ShortTerm(\"WHOLE DAY\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new TotalLots(\"615\"), new TypeOfParking(\"ELECTRONIC PARKING\"), getTagSet(\"Fun\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            new Carpark(new Address(\"BLK 186-188,190-192 PUNGGOL CENTRAL\"), new CarparkNumber(\"PL19\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new CarparkType(\"BASEMENT CAR PARK\"), new Coordinate(\"36545.1733, 42395.6863\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new FreeParking(\"NO\"), new LotsAvailable(\"67\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new NightParking(\"NO\"), new ShortTerm(\"7AM-7PM\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new TotalLots(\"291\"), new TypeOfParking(\"ELECTRONIC PARKING\"), getTagSet(\"Base\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (Carpark sampleCarpark : getSampleCarpark()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            sampleAb.addCarpark(sampleCarpark);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 10,
      "-": 33,
      "ZhuanYu": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Saves the current version of the Car Park Finder to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedCarpark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.CarparkNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.CarparkType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Coordinate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.FreeParking;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.LotsAvailable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.NightParking;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.ShortTerm;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.TotalLots;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.TypeOfParking;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * JAXB-friendly version of the Car park."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class XmlAdaptedCarpark {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Car park\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String carparkNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String carparkType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String coordinate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String freeParking;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String lotsAvailable;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String nightParking;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String shortTerm;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String totalLots;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private String typeOfParking;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an XmlAdaptedCarpark."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public XmlAdaptedCarpark() {}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Constructs an {@code XmlAdaptedCarpark} with the given car park details."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public XmlAdaptedCarpark(String address, String carkparkNumber, String carparkType, String coordinate,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                             String freeParking, String lotsAvailable, String nightParking, String shortTerm,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                             String totalLots, String typeOfParking, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.carparkNumber \u003d carkparkNumber;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.carparkType \u003d carparkType;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.coordinate \u003d coordinate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.freeParking \u003d freeParking;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.lotsAvailable \u003d lotsAvailable;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.nightParking \u003d nightParking;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.shortTerm \u003d shortTerm;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.totalLots \u003d totalLots;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.typeOfParking \u003d typeOfParking;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Converts a given Car park into this class for JAXB use."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedCarpark"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public XmlAdaptedCarpark(Carpark source) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.carparkNumber \u003d source.getCarparkNumber().value;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.carparkType \u003d source.getCarparkType().value;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.coordinate \u003d source.getCoordinate().value;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.freeParking \u003d source.getFreeParking().value;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.lotsAvailable \u003d source.getLotsAvailable().value;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.nightParking \u003d source.getNightParking().value;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.shortTerm \u003d source.getShortTerm().value;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.totalLots \u003d source.getTotalLots().value;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.typeOfParking \u003d source.getTypeOfParking().value;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        this.tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Converts this jaxb-friendly adapted Carpark object into the model\u0027s Carpark object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Carpark"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public Carpark toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final List\u003cTag\u003e carparkTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            carparkTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (carparkNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    CarparkNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!CarparkNumber.isValidCarNum(carparkNumber)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(CarparkNumber.MESSAGE_CAR_NUM_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final CarparkNumber modelCarparkNumber \u003d new CarparkNumber(carparkNumber);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (carparkType \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    CarparkType.class.getSimpleName()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!CarparkType.isValidCarType(carparkType)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(CarparkType.MESSAGE_CAR_TYPE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final CarparkType modelCarparkType \u003d new CarparkType(carparkType);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (coordinate \u003d\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    Coordinate.class.getSimpleName()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!Coordinate.isValidCoord(coordinate)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(Coordinate.MESSAGE_COORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final Coordinate modelCoordinate \u003d new Coordinate(coordinate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (totalLots \u003d\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    TotalLots.class.getSimpleName()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!TotalLots.isValidTotalLots(totalLots)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(TotalLots.MESSAGE_TOTAL_LOTS_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final TotalLots modelTotalLots \u003d new TotalLots(totalLots);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (lotsAvailable \u003d\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    LotsAvailable.class.getSimpleName()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!LotsAvailable.isValidLotsAvail(lotsAvailable)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(LotsAvailable.MESSAGE_LOTS_AVAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final LotsAvailable modelLotsAvailable \u003d new LotsAvailable(lotsAvailable);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (freeParking \u003d\u003d null) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    FreeParking.class.getSimpleName()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!FreeParking.isValidFreePark(freeParking)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(FreeParking.MESSAGE_FREE_PARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final FreeParking modelFreeParking \u003d new FreeParking(freeParking);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (nightParking \u003d\u003d null) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    LotsAvailable.class.getSimpleName()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!NightParking.isValidNightPark(nightParking)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(NightParking.MESSAGE_NIGHT_PARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final NightParking modelNightParking \u003d new NightParking(nightParking);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (shortTerm \u003d\u003d null) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    ShortTerm.class.getSimpleName()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!ShortTerm.isValidShortTerm(shortTerm)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(ShortTerm.MESSAGE_SHORT_TERM_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final ShortTerm modelShortTerm \u003d new ShortTerm(shortTerm);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (typeOfParking \u003d\u003d null) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    TypeOfParking.class.getSimpleName()));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!TypeOfParking.isValidTypePark(typeOfParking)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            throw new IllegalValueException(TypeOfParking.MESSAGE_TYPE_PARK_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final TypeOfParking modelTypeOfParking \u003d new TypeOfParking(typeOfParking);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(carparkTags);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new Carpark(modelAddress, modelCarparkNumber, modelCarparkType, modelCoordinate,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                modelFreeParking, modelLotsAvailable, modelNightParking, modelShortTerm, modelTotalLots,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                modelTypeOfParking, modelTags);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (!(other instanceof XmlAdaptedCarpark)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlAdaptedCarpark otherCarpark \u003d (XmlAdaptedCarpark) other;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return Objects.equals(address, otherCarpark.address)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 Objects.equals(carparkNumber, otherCarpark.carparkNumber)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 Objects.equals(carparkType, otherCarpark.carparkType)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 Objects.equals(coordinate, otherCarpark.coordinate)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 Objects.equals(freeParking, otherCarpark.freeParking)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 Objects.equals(lotsAvailable, otherCarpark.lotsAvailable)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 Objects.equals(nightParking, otherCarpark.nightParking)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 Objects.equals(shortTerm, otherCarpark.shortTerm)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 Objects.equals(totalLots, otherCarpark.totalLots)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 Objects.equals(typeOfParking, otherCarpark.typeOfParking)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 tagged.equals(otherCarpark.tagged);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 237
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted car park"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARPARK \u003d \"Car parks list contains duplicate car park(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private List\u003cXmlAdaptedCarpark\u003e carparks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparks.addAll(src.getCarparkList().stream().map(XmlAdaptedCarpark::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code XmlAdaptedCarpark}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (XmlAdaptedCarpark c : carparks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            Carpark carpark \u003d c.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            if (addressBook.hasCarpark(carpark)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CARPARK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            addressBook.addCarpark(carpark);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparks.equals(((XmlSerializableAddressBook) other).carparks);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "ZhuanYu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.commons.events.ui.CarparkPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \"https://cs2103-ay1819s1-t09-4.github.io/main/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private void loadCarparkPage(Carpark carpark) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + carpark.getCarparkNumber());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private void handleCarparkPanelSelectionChangedEvent(CarparkPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        loadCarparkPage(event.getNewSelection());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "ZhuanYu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CarparkCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * An UI component that displays information of a {@code Carpark}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "public class CarparkCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String FXML \u003d \"CarparkListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public final Carpark carpark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private Label carparkNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Label coordinate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Label carparkType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private Label totalLots;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Label lotsAvailable;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Label freeParking;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Label nightParking;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Label shortTerm;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Label parkingSystem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkCard(Carpark carpark, int displayedIndex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.carpark \u003d carpark;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkNumber.setText(carpark.getCarparkNumber().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        address.setText(carpark.getAddress().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkType.setText(carpark.getCarparkType().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        coordinate.setText(\"Coordinate: \" + carpark.getCoordinate().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (carpark.getTotalLots().value.equals(\"0\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            totalLots.setText(\"Total Lots: Not Available\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            lotsAvailable.setText(\"Lots Available: Not Available\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            totalLots.setText(\"Total Lots: \" + carpark.getTotalLots().value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            lotsAvailable.setText(\"Lots Available: \" + carpark.getLotsAvailable().value);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        freeParking.setText(\"Free Parking: \" + carpark.getFreeParking().value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        nightParking.setText(\"Night Parking: \" + carpark.getNightParking().value);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        shortTerm.setText(\"Short Term Parking: \" + carpark.getShortTerm().value);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        parkingSystem.setText(\"Parking System: \" + carpark.getTypeOfParking());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carpark.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        if (!(other instanceof CarparkCard)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        CarparkCard card \u003d (CarparkCard) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                \u0026\u0026 carpark.equals(card.carpark);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 15,
      "-": 51,
      "ZhuanYu": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CarparkListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.commons.events.ui.CarparkPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Panel containing the list of car parks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "public class CarparkListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String FXML \u003d \"CarparkListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CarparkListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private ListView\u003cCarpark\u003e carparkListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkListPanel(ObservableList\u003cCarpark\u003e carparkList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        setConnections(carparkList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private void setConnections(ObservableList\u003cCarpark\u003e carparkList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkListView.setItems(carparkList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkListView.setCellFactory(listView -\u003e new CarparkListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                        logger.fine(\"Selection in car park list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                        raise(new CarparkPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Scrolls to the {@code CarparkCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            carparkListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            carparkListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Carpark} using a {@code CarparkCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    class CarparkListViewCell extends ListCell\u003cCarpark\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        protected void updateItem(Carpark carpark, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            super.updateItem(carpark, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            if (empty || carpark \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                setGraphic(new CarparkCard(carpark, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 21,
      "-": 58,
      "ZhuanYu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private CarparkListPanel carparkListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private StackPane carparkListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkListPanel \u003d new CarparkListPanel(logic.getFilteredCarparkList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkListPanelPlaceholder.getChildren().add(carparkListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkListPanel getCarparkListPanel() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparkListPanel;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 197,
      "ZhuanYu": 6
    }
  },
  {
    "path": "src/main/resources/view/CarparkListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cLabel fx:id\u003d\"carparkNumber\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$carparkNumber\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel fx:id\u003d\"carparkType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$carparkType\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel fx:id\u003d\"coordinate\" styleClass\u003d\"cell_small_label\" text\u003d \"\\$coordinate\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel text\u003d\"\u0026#10;\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel fx:id\u003d\"totalLots\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$totalLots\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel fx:id\u003d\"lotsAvailable\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$lotsAvailable\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel text\u003d\"\u0026#10;\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel fx:id\u003d\"freeParking\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$freeParking\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel fx:id\u003d\"nightParking\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nightParking\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel fx:id\u003d\"shortTerm\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$shortTerm\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "      \u003cLabel fx:id\u003d\"parkingSystem\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$parkingSystem\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "ZhuanYu": 11
    }
  },
  {
    "path": "src/main/resources/view/CarparkListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  \u003cListView fx:id\u003d\"carparkListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-base: #233343;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-control-inner-background: #233343;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: #233343;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     -fx-background-color: derive(#233343, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     -fx-background-color: derive(#233343, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     -fx-border-color: derive(#233343, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-border-color: derive(#233343, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-border-color: derive(#233343, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: #233343;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "  -fx-text-fill: #233343;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: #233343;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: #233343;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: #233343;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-background-color: derive(#233343, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    -fx-font-family: \"Trebuchet MS\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "#filterField, #carparkListPanel, #carparkWebpage {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 312,
      "ZhuanYu": 39
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "          \u003cVBox fx:id\u003d\"carparkList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            \u003cStackPane fx:id\u003d\"carparkListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/test/data/XmlCarparkFinderStorageTest/invalidAndValidCarparkCarparkFinder.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c!-- Valid Car park --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 508-517,520-533 HOUGANG AVENUE 10\u003c/address\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eHG38\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e34274.4064, 39391.9731\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e809\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e1279\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eHome\u003c/tagged\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c!-- Car park with invalid coordinate field --\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 508-517,520-533 HOUGANG AVENUE 10\u003c/address\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eHG38\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e34274.4064as, df39391.9731\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e809\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e1279\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eHome\u003c/tagged\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 31
    }
  },
  {
    "path": "src/test/data/XmlCarparkFinderStorageTest/invalidCarparkCarparkFinder.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c!-- Car park with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK! 508-517,520-533@ HOUGANG AVENUE 10\u003c/address\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eHG38\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e34274.4064, 39391.9731\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003eabc\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e1279\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eHome\u003c/tagged\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 17
    }
  },
  {
    "path": "src/test/data/XmlSerializableCarparkFinderTest/duplicateCarparkCarparkFinder.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 349-355 CLEMENTI AVE 2\u003c/address\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eC7\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e21017.6263, 33014.2438\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e0\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e0\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eOffice\u003c/tagged\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c!-- Car park with same identity as C7 --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 349-355 CLEMENTI AVE 2\u003c/address\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eC7\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e21017.6263, 33014.2438\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e0\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e0\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eOffice\u003c/tagged\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 33
    }
  },
  {
    "path": "src/test/data/XmlSerializableCarparkFinderTest/invalidCarparkCarparkFinder.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c!-- Car park with invalid lots available field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 508-517,520-533 HOUGANG AVENUE 10\u003c/address\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eHG38\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e34274.4064, 39391.9731\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003eabc\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e1279\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eHome\u003c/tagged\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 18
    }
  },
  {
    "path": "src/test/data/XmlSerializableCarparkFinderTest/typicalCarparksCarparkFinder.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Car park values as in TypicalCarparks#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 349-355 CLEMENTI AVE 2\u003c/address\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eC7\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e21017.6263, 33014.2438\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e0\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e0\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eOffice\u003c/tagged\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 451 SENGKANG WEST WAY\u003c/address\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eSK88\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eMULTI-STOREY CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e32538.8707, 41769.3259\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eNO\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e109\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e369\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eHome\u003c/tagged\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eOffice\u003c/tagged\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 337-353/355-356 BUKIT BATOK ST 34\u003c/address\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eU25\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e18728.7311, 38350.9289\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e299\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e625\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eSchool\u003c/tagged\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 121E SENGKANG EAST WAY\u003c/address\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eSK23\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eMULTI-STOREY CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e36099.0459, 40907.1776\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e410\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e672\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctagged\u003eOffice\u003c/tagged\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 113 TO 120 POTONG PASIR AVENUE 1\u003c/address\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003ePP5\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e31328.0300, 35388.2500\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e92\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eNO\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e321\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 542A SERANGOON NORTH AVENUE 4\u003c/address\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eSE39\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eMULTI-STOREY CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e32271.7043, 39500.6075\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e39\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eNO\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003e7AM-10.30PM\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e206\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 676 WOODLANDS DRIVE 71\u003c/address\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eW676\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eBASEMENT CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e24373.6740, 46827.1390\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eNO\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e186\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e230\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 93
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidCarparkField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c!-- Car park with an invalid coordinate field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003ccarparks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003caddress\u003eBLK 508-517,520-533 HOUGANG AVENUE 10\u003c/address\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparkNumber\u003eHG38\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccoordinate\u003e9482asf424\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003clotsAvailable\u003e809\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ctotalLots\u003e1279\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ctagged\u003eHome\u003c/tagged\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c/carparks\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 15
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingCarparkField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c!-- Car park with missing number field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003ccarparks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003caddress\u003eBLK 508-517,520-533 HOUGANG AVENUE 10\u003c/address\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccoordinate\u003e34274.4064, 39391.9731\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003clotsAvailable\u003e809\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ctotalLots\u003e1279\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ctagged\u003eHome\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c/carparks\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 14
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validCarpark.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003ccarparks\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003caddress\u003eBLK 508-517,520-533 HOUGANG AVENUE 10\u003c/address\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparkNumber\u003eHG38\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccoordinate\u003e34274.4064, 39391.9731\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003clotsAvailable\u003e809\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ctotalLots\u003e1279\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ctagged\u003eHome\u003c/tagged\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c/carparks\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 14
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validCarparkFinder.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 5A GHIM MOH RD\u003c/address\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eGM1B\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eMULTI-STOREY CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e22985.4178, 32794.2010\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e0\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e0\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 49A WHAMPOA SOUTH\u003c/address\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eKB20\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eMULTI-STOREY CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e31686.3712, 33999.0332\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e222\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e245\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 643-646/649-662/665-667 HOUGANG AVENUE 8\u003c/address\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eHG42\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e33575.4429, 39573.3197\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e333\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e786\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 301/309 BUKIT BATOK STREET 31\u003c/address\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eU21\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e18569.9729, 37715.1464\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e131\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e1000\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 231/237 SERANGOON AVENUE 3\u003c/address\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eSE14\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e32080.9673, 37405.0495\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e87\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e187\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 562/565/560 ANG MO KIO STREET 54\u003c/address\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eA47\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e30885.4750, 39174.8899\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e192\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e303\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 137 EDGEDALE PLAINS\u003c/address\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003ePL12\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eMULTI-STOREY CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e36467.5455, 41586.9263\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e592\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e747\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 729/730 ANG MO KIO AVE 6/8\u003c/address\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eA55\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e29485.5000, 39515.4900\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eSUN \u0026amp; PH FR 7AM-10.30PM\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e0\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eYES\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003eWHOLE DAY\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e0\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003ccarparks\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003caddress\u003eBLK 639/640 ROWELL COURT\u003c/address\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkNumber\u003eCR30\u003c/carparkNumber\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccarparkType\u003eSURFACE CAR PARK\u003c/carparkType\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ccoordinate\u003e30406.3770, 32213.3125\u003c/coordinate\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cfreeParking\u003eNO\u003c/freeParking\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003clotsAvailable\u003e71\u003c/lotsAvailable\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cnightParking\u003eNO\u003c/nightParking\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003cshortTerm\u003e7AM-10.30PM\u003c/shortTerm\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctotalLots\u003e100\u003c/totalLots\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        \u003ctypeOfParking\u003eELECTRONIC PARKING\u003c/typeOfParking\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    \u003c/carparks\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "ZhuanYu": 111
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CarparkCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lexzt"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lexzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "public class CarparkCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String CARPARK_NUMBER_FIELD_ID \u003d \"#carparkNumber\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String CARPARK_TYPE_FIELD_ID \u003d \"#carparkType\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String COORDINATE_FIELD_ID \u003d \"#coordinate\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String FREE_PARKING_FIELD_ID \u003d \"#freeParking\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String LOTS_AVAILABLE_FIELD_ID \u003d \"#lotsAvailable\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String NIGHT_PARKING_FIELD_ID \u003d \"#nightParking\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String SHORT_TERM_FIELD_ID \u003d \"#shortTerm\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String TOTAL_LOTS_FIELD_ID \u003d \"#totalLots\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String TYPE_OF_PARKING_FIELD_ID \u003d \"#parkingSystem\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label carparkNumberLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label carparkTypeLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label coordinateLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label freeParkingLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label lotsAvailableLabel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label nightParkingLabel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label shortTermLabel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label totalLotsLabel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label typeOfParkingLabel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkNumberLabel \u003d getChildNode(CARPARK_NUMBER_FIELD_ID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkTypeLabel \u003d getChildNode(CARPARK_TYPE_FIELD_ID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        coordinateLabel \u003d getChildNode(COORDINATE_FIELD_ID);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        freeParkingLabel \u003d getChildNode(FREE_PARKING_FIELD_ID);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        lotsAvailableLabel \u003d getChildNode(LOTS_AVAILABLE_FIELD_ID);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        nightParkingLabel \u003d getChildNode(NIGHT_PARKING_FIELD_ID);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        shortTermLabel \u003d getChildNode(SHORT_TERM_FIELD_ID);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        totalLotsLabel \u003d getChildNode(TOTAL_LOTS_FIELD_ID);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        typeOfParkingLabel \u003d getChildNode(TYPE_OF_PARKING_FIELD_ID);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getCarparkNumber() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return carparkNumberLabel.getText();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getCarparkType() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return carparkTypeLabel.getText();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getCoordinate() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return coordinateLabel.getText();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getFreeParking() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return freeParkingLabel.getText();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getLotsAvailable() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return lotsAvailableLabel.getText();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getNightParking() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return nightParkingLabel.getText();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getShortTerm() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return shortTermLabel.getText();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getTotalLots() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return totalLotsLabel.getText();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getTypeOfParking() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return typeOfParkingLabel.getText();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public boolean equals(Carpark carpark) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (carpark.getTotalLots().value.equals(\"0\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            if (!getTotalLots().equals(\"Total Lots: Not Available\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    || !getLotsAvailable().equals(\"Lots Available: Not Available\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            if (!getTotalLots().equals(\"Total Lots: \" + carpark.getTotalLots().value)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    || !getLotsAvailable().equals(\"Lots Available: \" + carpark.getLotsAvailable().value)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return getCarparkNumber().equals(carpark.getCarparkNumber().value)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 getAddress().equals(carpark.getAddress().value)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 getCarparkType().equals(carpark.getCarparkType().value)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 getCoordinate().equals(\"Coordinate: \" + carpark.getCoordinate().value)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 getFreeParking().equals(\"Free Parking: \" + carpark.getFreeParking().value)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 getNightParking().equals(\"Night Parking: \" + carpark.getNightParking().value)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 getShortTerm().equals(\"Short Term Parking: \" + carpark.getShortTerm().value)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                \u0026\u0026 getTypeOfParking().equals(\"Parking System: \" + carpark.getTypeOfParking().value)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(carpark.getTags().stream()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 117,
      "ZhuanYu": 27
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CarparkListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * Provides a handle for {@code CarparkListPanel} containing the list of {@code PersonCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "public class CarparkListPanelHandle extends NodeHandle\u003cListView\u003cCarpark\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String CARPARK_LIST_VIEW_ID \u003d \"#carparkListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Optional\u003cCarpark\u003e lastRememberedSelectedCarparkCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkListPanelHandle(ListView\u003cCarpark\u003e carparkListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        super(carparkListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Returns a handle to the selected {@code CarparkCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        List\u003cCarpark\u003e selectedPersonList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedPersonList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Person list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .map(CarparkCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedPersonList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        List\u003cCarpark\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to display {@code person}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public void navigateToCard(Carpark person) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!getRootNode().getItems().contains(person)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Person does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the {@code PersonCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns the car park card handle of a car park associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public CarparkCardHandle getCarparkCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .map(CarparkCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .filter(handle -\u003e handle.equals(getCarpark(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private Carpark getCarpark(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Remembers the selected {@code CarparkCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public void rememberSelectedCarparkCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        List\u003cCarpark\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            lastRememberedSelectedCarparkCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            lastRememberedSelectedCarparkCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns true if the selected {@code CarparkCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * {@code rememberSelectedCarparkCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public boolean isSelectedCarparkCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        List\u003cCarpark\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return lastRememberedSelectedCarparkCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            return !lastRememberedSelectedCarparkCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                    || !lastRememberedSelectedCarparkCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 16,
      "-": 129,
      "ZhuanYu": 14
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final CarparkListPanelHandle carparkListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkListPanel \u003d new CarparkListPanelHandle(getChildNode(CarparkListPanelHandle.CARPARK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkListPanelHandle getCarparkListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return carparkListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 1,
      "-": 47,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredCarparkList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 119,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(\"Typical App Title\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setAppTitle(\"Updated Title\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 118,
      "ZhuanYu": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/JsonUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "//import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    //private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //        .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "ZhuanYu": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.storage.XmlAdaptedCarpark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.testutil.CarparkBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validCarparkFinder.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path MISSING_CARPARK_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingCarparkField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path INVALID_CARPARK_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidCarparkField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path VALID_CARPARK_FILE \u003d TEST_DATA_FOLDER.resolve(\"validCarpark.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempCarparkFinder.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String INVALID_COORDINATE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"BLK 508-517,520-533 HOUGANG AVENUE 10\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_CARPARK_NUMBER \u003d \"HG38\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_CARPARK_TYPE \u003d \"SURFACE CAR PARK\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_COORDINATE \u003d \"34274.4064, 39391.9731\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_FREE_PARKING \u003d \"SUN \u0026 PH FR 7AM-10.30PM\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_LOTS_AVAILABLE \u003d \"809\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_NIGHT_PARKING \u003d \"YES\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_SHORT_TERM \u003d \"WHOLE DAY\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_TOTAL_LOTS \u003d \"1279\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final String VALID_TYPE_OF_PARKING \u003d \"ELECTRONIC PARKING\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"Home\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(9, dataFromFile.getCarparkList().size());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void xmlAdaptedCarparkFromFile_fileWithMissingCarparkField_validResult() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlAdaptedCarpark actualCarpark \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                MISSING_CARPARK_FIELD_FILE, XmlAdaptedCarparkWithRootElement.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlAdaptedCarpark expectedCarpark \u003d new XmlAdaptedCarpark(VALID_ADDRESS, null,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                VALID_CARPARK_TYPE, VALID_COORDINATE, VALID_FREE_PARKING, VALID_LOTS_AVAILABLE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                VALID_NIGHT_PARKING, VALID_SHORT_TERM, VALID_TOTAL_LOTS, VALID_TYPE_OF_PARKING,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedCarpark, actualCarpark);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void xmlAdaptedCarparkFromFile_fileWithInvalidCarparkField_validResult() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlAdaptedCarpark actualCarpark \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                INVALID_CARPARK_FIELD_FILE, XmlAdaptedCarparkWithRootElement.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlAdaptedCarpark expectedCarpark \u003d new XmlAdaptedCarpark(VALID_ADDRESS, VALID_CARPARK_NUMBER,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                VALID_CARPARK_TYPE, INVALID_COORDINATE, VALID_FREE_PARKING, VALID_LOTS_AVAILABLE,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                VALID_NIGHT_PARKING, VALID_SHORT_TERM, VALID_TOTAL_LOTS, VALID_TYPE_OF_PARKING,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedCarpark, actualCarpark);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void xmlAdaptedCarparkFromFile_fileWithValidCarpark_validResult() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlAdaptedCarpark actualCarpark \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                VALID_CARPARK_FILE, XmlAdaptedCarparkWithRootElement.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlAdaptedCarpark expectedCarpark \u003d new XmlAdaptedCarpark(VALID_ADDRESS, VALID_CARPARK_NUMBER,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                VALID_CARPARK_TYPE, VALID_COORDINATE, VALID_FREE_PARKING, VALID_LOTS_AVAILABLE,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                VALID_NIGHT_PARKING, VALID_SHORT_TERM, VALID_TOTAL_LOTS, VALID_TYPE_OF_PARKING,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedCarpark, actualCarpark);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                builder.withCarpark(new CarparkBuilder().build()).build());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedCarpark}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @XmlRootElement(name \u003d \"carparks\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static class XmlAdaptedCarparkWithRootElement extends XmlAdaptedCarpark {}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 5,
      "-": 108,
      "ZhuanYu": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        logic.getFilteredCarparkList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 3,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.resetData(new AddressBook());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 1,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CAR_NUM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CAR_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COORD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREE_PARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOTS_AVAILABLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NIGHT_PARK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SHORT_TERM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TOTAL_LOTS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE_PARK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.CarparkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_ADDRESS_JULIETT \u003d \"BLK 508-517,520-533 HOUGANG AVENUE 10\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_ADDRESS_KILO \u003d \"BLK 537-543, 564-569 PASIR RIS STREET 51\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_CARPARK_NUMBER_JULIETT \u003d \"HG38\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_CARPARK_NUMBER_KILO \u003d \"PR13\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_CARPARK_TYPE_JULIETT \u003d \"SURFACE CAR PARK\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String VALID_CARPARK_TYPE_KILO \u003d \"MULTI-STOREY CAR PARK\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_COORDINATE_JULIETT \u003d \"34274.4064, 39391.9731\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_COORDINATE_KILO \u003d \"40942.8203, 39055.5703\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_FREE_PARKING_JULIETT \u003d \"SUN \u0026 PH FR 7AM-10.30PM\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_FREE_PARKING_KILO \u003d \"NO\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_LOTS_AVAILABLE_JULIETT \u003d \"529\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_LOTS_AVAILABLE_KILO \u003d \"0\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_NIGHT_PARKING_JULIETT \u003d \"YES\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_NIGHT_PARKING_KILO \u003d \"YES\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_SHORT_TERM_JULIETT \u003d \"WHOLE DAY\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_SHORT_TERM_KILO \u003d \"WHOLE DAY\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_TOTAL_LOTS_JULIETT \u003d \"900\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_TOTAL_LOTS_KILO \u003d \"0\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_TYPE_OF_PARKING_JULIETT \u003d \"ELECTRONIC PARKING\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_TYPE_OF_PARKING_KILO \u003d \"ELECTRONIC PARKING\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_TAG_HOME \u003d \"Home\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String VALID_TAG_OFFICE \u003d \"Office\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String CARPARK_NO_DESC_JULIETT \u003d \" \" + PREFIX_CAR_NUM + VALID_CARPARK_NUMBER_JULIETT;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String CARPARK_NO_DESC_KILO \u003d \" \" + PREFIX_CAR_NUM + VALID_CARPARK_NUMBER_KILO;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String CARPARK_TYPE_DESC_JULIETT \u003d \" \" + PREFIX_CAR_TYPE + VALID_CARPARK_TYPE_JULIETT;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String CARPARK_TYPE_DESC_KILO \u003d \" \" + PREFIX_CAR_TYPE + VALID_CARPARK_TYPE_KILO;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String COORDINATE_DESC_JULIETT \u003d \" \" + PREFIX_COORD + VALID_COORDINATE_JULIETT;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String COORDINATE_DESC_KILO \u003d \" \" + PREFIX_COORD + VALID_COORDINATE_KILO;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String FREE_PARKING_DESC_JULIETT \u003d \" \" + PREFIX_FREE_PARK + VALID_FREE_PARKING_JULIETT;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String FREE_PARKING_DESC_KILO \u003d \" \" + PREFIX_FREE_PARK + VALID_FREE_PARKING_KILO;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String LOTS_AVAILABLE_DESC_JULIETT \u003d \" \" + PREFIX_LOTS_AVAILABLE + VALID_LOTS_AVAILABLE_JULIETT;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String LOTS_AVAILABLE_DESC_KILO \u003d \" \" + PREFIX_LOTS_AVAILABLE + VALID_LOTS_AVAILABLE_KILO;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String NIGHT_PARKING_DESC_JULIETT \u003d \" \" + PREFIX_NIGHT_PARK + VALID_NIGHT_PARKING_JULIETT;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String NIGHT_PARKING_DESC_KILO \u003d \" \" + PREFIX_NIGHT_PARK + VALID_NIGHT_PARKING_KILO;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String SHORT_TERM_DESC_JULIETT \u003d \" \" + PREFIX_SHORT_TERM + VALID_SHORT_TERM_JULIETT;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String SHORT_TERM_DESC_KILO \u003d \" \" + PREFIX_SHORT_TERM + VALID_SHORT_TERM_KILO;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String TOTAL_LOTS_DESC_KILO \u003d \" \" + PREFIX_TOTAL_LOTS + VALID_TOTAL_LOTS_JULIETT;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String TOTAL_LOTS_DESC_JULIETT \u003d \" \" + PREFIX_TOTAL_LOTS + VALID_TOTAL_LOTS_KILO;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String TYPE_OF_PARKING_DESC_JULIETT \u003d \" \" + PREFIX_TYPE_PARK + VALID_TYPE_OF_PARKING_JULIETT;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String TYPE_OF_PARKING_DESC_KILO \u003d \" \" + PREFIX_TYPE_PARK + VALID_TYPE_OF_PARKING_KILO;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String ADDRESS_DESC_JULIETT \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_JULIETT;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String ADDRESS_DESC_KILO \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_KILO;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String TAG_DESC_OFFICE \u003d \" \" + PREFIX_TAG + VALID_TAG_OFFICE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String TAG_DESC_HOME \u003d \" \" + PREFIX_TAG + VALID_TAG_HOME;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // \u0027@\u0027 not allowed in carpark number."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_CARPARK_NO_DESC \u003d \" \" + PREFIX_CAR_NUM + \"TJ@1\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // \u0027!@\u0027 not allowed in carpark type."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_CARPARK_TYPE_DESC \u003d \" \" + PREFIX_CAR_TYPE + \"!@a\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // wrong format, has number."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_COORDINATE_DESC \u003d \" \" + PREFIX_COORD + \"asd!\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // \u0027!\u0027 not allowed"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_FREE_PARKING_DESC \u003d \" \" + PREFIX_FREE_PARK + \"!\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_LOTS_AVAILABLE_DESC \u003d \" \" + PREFIX_LOTS_AVAILABLE + \"asd\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_NIGHT_PARKING_DESC \u003d \" \" + PREFIX_NIGHT_PARK + \"%^\u0026\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_SHORT_TERM_DESC \u003d \" \" + PREFIX_SHORT_TERM + \"!@#\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_TOTAL_LOTS_DESC \u003d \" \" + PREFIX_TOTAL_LOTS + \"asd!@#\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_TYPE_OF_PARKING_LOTS_DESC \u003d \" \" + PREFIX_TYPE_PARK + \"!@#\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // empty string not allowed for addresses"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * - the address book and the filtered carpark list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        List\u003cCarpark\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCarparkList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredCarparkList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the carpark at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static void showCarparkAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCarparkList().size());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark carpark \u003d model.getFilteredCarparkList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        final String[] splitName \u003d carpark.getCarparkNumber().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        model.updateFilteredCarparkList(new CarparkContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(1, model.getFilteredCarparkList().size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Deletes the first carpark in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static void deleteFirstCarpark(Model model) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark firstCarpark \u003d model.getFilteredCarparkList().get(0);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        model.deleteCarpark(firstCarpark);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 41,
      "-": 81,
      "ZhuanYu": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCarparkAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARPARK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CARPARK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark carparkToDelete \u003d model.getFilteredCarparkList().get(INDEX_FIRST_CARPARK.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CARPARK_SUCCESS, carparkToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        expectedModel.deleteCarpark(carparkToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCarparkList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        showCarparkAtIndex(model, INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark carparkToDelete \u003d model.getFilteredCarparkList().get(INDEX_FIRST_CARPARK.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CARPARK_SUCCESS, carparkToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        expectedModel.deleteCarpark(carparkToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        showCarparkAtIndex(model, INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CARPARK;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getCarparkList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark carparkToDelete \u003d model.getFilteredCarparkList().get(INDEX_FIRST_CARPARK.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        expectedModel.deleteCarpark(carparkToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // delete -\u003e first carpark deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered carpark list to show all persons"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // redo -\u003e same first carpark deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCarparkList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted carpark in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the carpark object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        showCarparkAtIndex(model, INDEX_SECOND_CARPARK);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark carparkToDelete \u003d model.getFilteredCarparkList().get(INDEX_FIRST_CARPARK.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        expectedModel.deleteCarpark(carparkToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // delete -\u003e deletes second carpark in unfiltered carpark list / first carpark in filtered carpark list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered carpark list to show all persons"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertNotEquals(carparkToDelete, model.getFilteredCarparkList().get(INDEX_FIRST_CARPARK.getZeroBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // redo -\u003e deletes same second carpark in unfiltered carpark list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_CARPARK);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different carpark -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        model.updateFilteredCarparkList(p -\u003e false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(model.getFilteredCarparkList().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 44,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CARPARKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.CHARLIE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.ECHO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.FOXTROT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.CarparkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new CarparkContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                new CarparkContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // different carpark -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CARPARKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.updateFilteredCarparkList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredCarparkList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CARPARKS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkContainsKeywordsPredicate predicate \u003d preparePredicate(\"U25 PP5 SE39\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedModel.updateFilteredCarparkList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(Arrays.asList(CHARLIE, ECHO, FOXTROT), model.getFilteredCarparkList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Parses {@code userInput} into a {@code CarparkContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private CarparkContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new CarparkContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 4,
      "-": 63,
      "ZhuanYu": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCarparkAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARPARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        showCarparkAtIndex(model, INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 6,
      "Alvinnyk": 4,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstCarpark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        deleteFirstCarpark(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        deleteFirstCarpark(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        deleteFirstCarpark(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        deleteFirstCarpark(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 6,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCarparkAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARPARK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CARPARK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_CARPARK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public SelectCommandTest() throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredCarparkList().size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_CARPARK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredCarparkList().size() + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        showCarparkAtIndex(model, INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        showCarparkAtIndex(expectedModel, INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        showCarparkAtIndex(model, INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        showCarparkAtIndex(expectedModel, INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_CARPARK;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getCarparkList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_CARPARK);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different carpark -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_CARPARK_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 11,
      "Alvinnyk": 17,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstCarpark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        deleteFirstCarpark(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        deleteFirstCarpark(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        deleteFirstCarpark(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        deleteFirstCarpark(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 6,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARPARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.CarparkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARPARK.getOneBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_CARPARK), command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(new FindCommand(new CarparkContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARPARK.getOneBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_CARPARK), command);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 5,
      "-": 114,
      "ZhuanYu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 20,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARPARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(INDEX_FIRST_CARPARK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(INDEX_FIRST_CARPARK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCarparkNumber((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCarparkNumber(INVALID_NAME));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 5,
      "-": 140,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARPARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_CARPARK));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_JULIETT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HOME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.ALFA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.JULIETT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.exceptions.DuplicateCarparkException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.testutil.CarparkBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getCarparkList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // Two carparks with the same identity fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark editedJuliett \u003d new CarparkBuilder(JULIETT).withAddress(VALID_ADDRESS_JULIETT).withTags(VALID_TAG_HOME)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        List\u003cCarpark\u003e newPersons \u003d Arrays.asList(JULIETT, editedJuliett);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        thrown.expect(DuplicateCarparkException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        addressBook.hasCarpark(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(addressBook.hasCarpark(ALFA));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        addressBook.addCarpark(ALFA);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(addressBook.hasCarpark(ALFA));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        addressBook.addCarpark(JULIETT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark editedJuliett \u003d new CarparkBuilder(JULIETT).withAddress(VALID_ADDRESS_JULIETT).withTags(VALID_TAG_HOME)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(addressBook.hasCarpark(editedJuliett));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        addressBook.getCarparkList().remove(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * A stub ReadOnlyAddressBook whose carparks list can violate interface constraints."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        private final ObservableList\u003cCarpark\u003e carparks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        AddressBookStub(Collection\u003cCarpark\u003e carparks) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            this.carparks.setAll(carparks);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        public ObservableList\u003cCarpark\u003e getCarparkList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            return carparks;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 22,
      "-": 84,
      "ZhuanYu": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CARPARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.ALFA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.BRAVO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.CarparkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        modelManager.hasCarpark(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(modelManager.hasCarpark(ALFA));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        modelManager.addCarpark(ALFA);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(modelManager.hasCarpark(ALFA));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        modelManager.getFilteredCarparkList().remove(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withCarpark(ALFA).withCarpark(BRAVO).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        List\u003cString\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        temp.add(ALFA.getCarparkNumber().value);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String[] keywords \u003d temp.toArray(new String[0]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        modelManager.updateFilteredCarparkList(new CarparkContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        modelManager.updateFilteredCarparkList(PREDICATE_SHOW_ALL_CARPARK);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 7,
      "-": 71,
      "ZhuanYu": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.CHARLIE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.JULIETT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.KILO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithJuliett \u003d new AddressBookBuilder().withCarpark(JULIETT).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithKilo \u003d new AddressBookBuilder().withCarpark(KILO).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithCharlie \u003d new AddressBookBuilder().withCarpark(CHARLIE).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook emptyAddressBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyAddressBook, addressBookWithJuliett, addressBookWithKilo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithJuliett, addressBookWithKilo),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                addressBookWithKilo,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyAddressBook, addressBookWithJuliett, addressBookWithKilo);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyAddressBook, addressBookWithJuliett, addressBookWithKilo);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyAddressBook, addressBookWithJuliett, addressBookWithKilo);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyAddressBook, addressBookWithJuliett, addressBookWithKilo);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyAddressBook, addressBookWithJuliett, addressBookWithKilo);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyAddressBook, addressBookWithJuliett, addressBookWithKilo);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyAddressBook, addressBookWithJuliett, addressBookWithKilo);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyAddressBook, addressBookWithJuliett, addressBookWithKilo);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                addressBookWithJuliett,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                Collections.singletonList(addressBookWithKilo));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyAddressBook, addressBookWithJuliett, addressBookWithKilo);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                Arrays.asList(addressBookWithJuliett, addressBookWithKilo));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyAddressBook, addressBookWithJuliett, addressBookWithKilo);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyAddressBook, addressBookWithJuliett, addressBookWithKilo);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithJuliett),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                addressBookWithKilo,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyAddressBook, addressBookWithJuliett, addressBookWithKilo);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                addressBookWithJuliett,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                Collections.singletonList(addressBookWithKilo));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                emptyAddressBook, addressBookWithJuliett, addressBookWithKilo);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(addressBookWithJuliett, addressBookWithKilo);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedAddressBook copy \u003d prepareAddressBookList(addressBookWithJuliett, addressBookWithKilo);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        VersionedAddressBook differentAddressBookList \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                addressBookWithKilo, addressBookWithCharlie);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                addressBookWithJuliett, addressBookWithKilo);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertAddressBookListStatus(VersionedAddressBook versionedAddressBook,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                                             ReadOnlyAddressBook expectedCurrentState,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code VersionedAddressBook} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code VersionedAddressBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    private VersionedAddressBook prepareAddressBookList(ReadOnlyAddressBook... addressBookStates) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d new VersionedAddressBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedAddressBook versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 265,
      "ZhuanYu": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Ignore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.carpark.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Ignore"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Ignore"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Ignore"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void isValidAddress() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // null address"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // invalid addresses"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // valid addresses"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 36,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/CarparkContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.CarparkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.testutil.CarparkBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        CarparkContainsKeywordsPredicate firstPredicate \u003d new CarparkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        CarparkContainsKeywordsPredicate secondPredicate \u003d new CarparkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        CarparkContainsKeywordsPredicate firstPredicateCopy \u003d new CarparkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        // different carpark -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        CarparkContainsKeywordsPredicate predicate \u003d new CarparkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(predicate.test(new CarparkBuilder().withCarparkNumber(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        predicate \u003d new CarparkContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(predicate.test(new CarparkBuilder().withCarparkNumber(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        predicate \u003d new CarparkContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(predicate.test(new CarparkBuilder().withCarparkNumber(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        predicate \u003d new CarparkContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(predicate.test(new CarparkBuilder().withCarparkNumber(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkContainsKeywordsPredicate predicate \u003d new CarparkContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertFalse(predicate.test(new CarparkBuilder().withCarparkNumber(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        predicate \u003d new CarparkContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertFalse(predicate.test(new CarparkBuilder().withCarparkNumber(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        predicate \u003d new CarparkContainsKeywordsPredicate(Arrays.asList(\"V32\", \"SURFACE\", \"SENGKANG\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertFalse(predicate.test(new CarparkBuilder().withCarparkNumber(\"A29\").withCarparkType(\"SURFACE CAR PARK\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .withFreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\").withAddress(\"BLK 347 ANG MO KIO AVENUE 3\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 18,
      "-": 54,
      "ZhuanYu": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/CarparkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_JULIETT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_KILO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARPARK_NUMBER_KILO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARPARK_TYPE_JULIETT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARPARK_TYPE_KILO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COORDINATE_JULIETT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COORDINATE_KILO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HOME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.ALFA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.BRAVO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.JULIETT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.testutil.CarparkBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "public class CarparkTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark carpark \u003d new CarparkBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carpark.getTags().remove(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public void isSameCarpark() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(JULIETT.isSameCarpark(JULIETT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertFalse(JULIETT.isSameCarpark(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark editedJuliett \u003d new CarparkBuilder(JULIETT)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .withCarparkType(VALID_CARPARK_TYPE_KILO)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                .withCoordinate(VALID_COORDINATE_KILO).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertFalse(JULIETT.isSameCarpark(editedJuliett));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        editedJuliett \u003d new CarparkBuilder(JULIETT).withCarparkNumber(VALID_CARPARK_TYPE_JULIETT).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertFalse(JULIETT.isSameCarpark(editedJuliett));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        editedJuliett \u003d new CarparkBuilder(JULIETT).withCoordinate(VALID_COORDINATE_JULIETT)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .withAddress(VALID_ADDRESS_JULIETT).withTags(VALID_TAG_HOME).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(JULIETT.isSameCarpark(editedJuliett));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        editedJuliett \u003d new CarparkBuilder(JULIETT).withCarparkType(VALID_CARPARK_TYPE_KILO)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                .withAddress(VALID_ADDRESS_JULIETT).withTags(VALID_TAG_HOME).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(JULIETT.isSameCarpark(editedJuliett));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        editedJuliett \u003d new CarparkBuilder(JULIETT).withAddress(VALID_ADDRESS_JULIETT).withTags(VALID_TAG_HOME).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(JULIETT.isSameCarpark(editedJuliett));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark copyAlfa \u003d new CarparkBuilder(ALFA).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(ALFA.equals(copyAlfa));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(ALFA.equals(ALFA));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(ALFA.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(ALFA.equals(5));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different carpark -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(ALFA.equals(BRAVO));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Carpark editedAlfa \u003d new CarparkBuilder(ALFA).withCarparkNumber(VALID_CARPARK_NUMBER_KILO).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(ALFA.equals(editedAlfa));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        editedAlfa \u003d new CarparkBuilder(ALFA).withCarparkType(VALID_CARPARK_TYPE_KILO).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(ALFA.equals(editedAlfa));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        editedAlfa \u003d new CarparkBuilder(ALFA).withCoordinate(VALID_COORDINATE_KILO).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(ALFA.equals(editedAlfa));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        editedAlfa \u003d new CarparkBuilder(ALFA).withAddress(VALID_ADDRESS_KILO).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(ALFA.equals(editedAlfa));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        editedAlfa \u003d new CarparkBuilder(ALFA).withTags(VALID_TAG_HOME).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(ALFA.equals(editedAlfa));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 83,
      "ZhuanYu": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Ignore;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Ignore"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Ignore"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Ignore"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void isValidEmail() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // null email"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // blank email"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // missing parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // invalid parts"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // valid email"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 59,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 35,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void isValidPhone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // null phone number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // invalid phone numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 36,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_JULIETT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_KILO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HOME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.ALFA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.BRAVO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.JULIETT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.carpark.UniqueCarparkList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import seedu.address.model.carpark.exceptions.CarparkNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.exceptions.DuplicateCarparkException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.testutil.CarparkBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final UniqueCarparkList uniqueCarparkList \u003d new UniqueCarparkList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.contains(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(uniqueCarparkList.contains(ALFA));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(uniqueCarparkList.contains(ALFA));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.add(JULIETT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark editedJuliett \u003d new CarparkBuilder(JULIETT).withAddress(VALID_ADDRESS_JULIETT).withTags(VALID_TAG_HOME)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(uniqueCarparkList.contains(editedJuliett));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.add(null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        thrown.expect(DuplicateCarparkException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.setCarpark(null, ALFA);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.setCarpark(ALFA, null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        thrown.expect(CarparkNotFoundException.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.setCarpark(ALFA, ALFA);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.setCarpark(ALFA, ALFA);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        UniqueCarparkList expectedUniquePersonList \u003d new UniqueCarparkList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedUniquePersonList.add(ALFA);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueCarparkList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Carpark editedAlfa \u003d new CarparkBuilder(ALFA).withAddress(VALID_ADDRESS_KILO).withTags(VALID_TAG_HOME)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.setCarpark(ALFA, editedAlfa);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        UniqueCarparkList expectedUniquePersonList \u003d new UniqueCarparkList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedUniquePersonList.add(editedAlfa);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueCarparkList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.setCarpark(ALFA, BRAVO);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        UniqueCarparkList expectedUniquePersonList \u003d new UniqueCarparkList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedUniquePersonList.add(BRAVO);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueCarparkList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(BRAVO);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        thrown.expect(DuplicateCarparkException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.setCarpark(ALFA, BRAVO);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.remove(null);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        thrown.expect(CarparkNotFoundException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.remove(ALFA);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.remove(ALFA);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        UniqueCarparkList expectedUniquePersonList \u003d new UniqueCarparkList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueCarparkList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.setCarparks((UniqueCarparkList) null);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        UniqueCarparkList expectedUniquePersonList \u003d new UniqueCarparkList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedUniquePersonList.add(BRAVO);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.setCarparks(expectedUniquePersonList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueCarparkList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.setCarparks((List\u003cCarpark\u003e) null);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uniqueCarparkList.add(ALFA);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        List\u003cCarpark\u003e personList \u003d Collections.singletonList(BRAVO);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.setCarparks(personList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        UniqueCarparkList expectedUniquePersonList \u003d new UniqueCarparkList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedUniquePersonList.add(BRAVO);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueCarparkList);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        List\u003cCarpark\u003e listWithDuplicatePersons \u003d Arrays.asList(ALFA, ALFA);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        thrown.expect(DuplicateCarparkException.class);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.setCarparks(listWithDuplicatePersons);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uniqueCarparkList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 34,
      "Alvinnyk": 3,
      "-": 118,
      "ZhuanYu": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        //assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 123,
      "ZhuanYu": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlCarparkFinderStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 1,
      "-": 101,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedCarparkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.storage.XmlAdaptedCarpark.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.carpark.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class XmlAdaptedCarparkTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d new XmlAdaptedCarpark(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new XmlAdaptedCarpark(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d new XmlAdaptedCarpark(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new XmlAdaptedCarpark(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d new XmlAdaptedCarpark(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new XmlAdaptedCarpark(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d new XmlAdaptedCarpark(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new XmlAdaptedCarpark(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d new XmlAdaptedCarpark(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        XmlAdaptedCarpark person \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                new XmlAdaptedCarpark(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 104,
      "-": 5,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlCarparkFinderStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.ALFA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.HOTEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.INDIA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class XmlCarparkFinderStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlCarparkFinderStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new XmlAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        readAddressBook(\"NotXmlFormatCarparkFinder.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void readAddressBook_invalidCarparkAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        readAddressBook(\"invalidCarparkCarparkFinder.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        readAddressBook(\"invalidAndValidCarparkCarparkFinder.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        original.addCarpark(HOTEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        original.removeCarpark(ALFA);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        original.addCarpark(INDIA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            new XmlAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 1,
      "-": 113,
      "ZhuanYu": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableCarparkFinderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.testutil.TypicalCarparks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class XmlSerializableCarparkFinderTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableCarparkFinderTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path TYPICAL_CARPARKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalCarparksCarparkFinder.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path INVALID_CARPARK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidCarparkCarparkFinder.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path DUPLICATE_CARPARK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateCarparkCarparkFinder.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void toModelType_typicalCarparksFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_CARPARKS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        AddressBook typicalCarparksAddressBook \u003d TypicalCarparks.getTypicalAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(addressBookFromFile, typicalCarparksAddressBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void toModelType_invalidCarparkFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_CARPARK_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void toModelType_duplicateCarparks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_CARPARK_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_CARPARK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 2,
      "-": 38,
      "ZhuanYu": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lexzt"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withCarpark(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public AddressBookBuilder withCarpark(Carpark carpark) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        addressBook.addCarpark(carpark);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 4,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CarparkBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.CarparkNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.CarparkType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Coordinate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.FreeParking;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.LotsAvailable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.NightParking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.ShortTerm;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.TotalLots;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.TypeOfParking;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "public class CarparkBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String DEFAULT_CARPARK_NUMBER \u003d \"A1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String DEFAULT_CARPARK_TYPE \u003d \"DEFAULT CAR PARK\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String DEFAULT_COORDINATE \u003d \"11111.1111, 99999.9999\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String DEFAULT_FREE_PARKING \u003d \"YES\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String DEFAULT_LOTS_AVAILABLE \u003d \"1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String DEFAULT_NIGHT_PARKING \u003d \"NO\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String DEFAULT_SHORT_TERM \u003d \"SOME DAY\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String DEFAULT_TOTAL_LOTS \u003d \"9000\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String DEFAULT_TYPE_OF_PARKING \u003d \"OLD SCHOOL PARKING\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private CarparkNumber carparkNumber;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private CarparkType carparkType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private Coordinate coordinate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private FreeParking freeParking;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private LotsAvailable lotsAvailable;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private NightParking nightParking;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private ShortTerm shortTerm;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private TotalLots totalLots;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private TypeOfParking typeOfParking;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkNumber \u003d new CarparkNumber(DEFAULT_CARPARK_NUMBER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkType \u003d new CarparkType(DEFAULT_CARPARK_TYPE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        coordinate \u003d new Coordinate(DEFAULT_COORDINATE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        freeParking \u003d new FreeParking(DEFAULT_FREE_PARKING);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        lotsAvailable \u003d new LotsAvailable(DEFAULT_LOTS_AVAILABLE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        nightParking \u003d new NightParking(DEFAULT_NIGHT_PARKING);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        shortTerm \u003d new ShortTerm(DEFAULT_SHORT_TERM);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        totalLots \u003d new TotalLots(DEFAULT_TOTAL_LOTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        typeOfParking \u003d new TypeOfParking(DEFAULT_TYPE_OF_PARKING);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Initializes the CarparkBuilder with the data of {@code carparkToCopy}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder(Carpark carparkToCopy) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkNumber \u003d carparkToCopy.getCarparkNumber();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkType \u003d carparkToCopy.getCarparkType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        coordinate \u003d carparkToCopy.getCoordinate();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        freeParking \u003d carparkToCopy.getFreeParking();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        lotsAvailable \u003d carparkToCopy.getLotsAvailable();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        nightParking \u003d carparkToCopy.getNightParking();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        shortTerm \u003d carparkToCopy.getShortTerm();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        totalLots \u003d carparkToCopy.getTotalLots();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        typeOfParking \u003d carparkToCopy.getTypeOfParking();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        address \u003d carparkToCopy.getAddress();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(carparkToCopy.getTags());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code CarparkNumber} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withCarparkNumber (String carparkNumber) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.carparkNumber \u003d new CarparkNumber(carparkNumber);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code CarparkType} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withCarparkType(String carparkType) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.carparkType \u003d new CarparkType(carparkType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code Coordinate} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withCoordinate(String coordinate) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.coordinate \u003d new Coordinate(coordinate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code FreeParking} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withFreeParking(String freeParking) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.freeParking \u003d new FreeParking(freeParking);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code LotsAvailable} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withLotsAvailable(String lotsAvailable) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.lotsAvailable \u003d new LotsAvailable(lotsAvailable);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code NightParking} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withNightParking(String nightParking) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.nightParking \u003d new NightParking(nightParking);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code ShortTerm} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withShortTerm(String shortTerm) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.shortTerm \u003d new ShortTerm(shortTerm);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code TotalLots} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withTotalLots(String totalLots) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.totalLots \u003d new TotalLots(totalLots);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code TypeOfParking} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withTypeOfParking(String typeOfParking) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.typeOfParking \u003d new TypeOfParking(typeOfParking);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Sets the {@code Address} of the {@code Carpark} that we are building."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public CarparkBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Builds a {@code Carpark} that we are building."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public Carpark build() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return new Carpark(address, carparkNumber, carparkType, coordinate,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            freeParking, lotsAvailable, nightParking, shortTerm, totalLots, typeOfParking, tags);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 167,
      "ZhuanYu": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditCarparkDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//import seedu.address.model.carpark.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "///**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "// * A utility class to help with building EditCarparkDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "// */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    private EditCarparkDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        descriptor \u003d new EditCommand.EditCarparkDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    public EditPersonDescriptorBuilder(EditCarparkDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        this.descriptor \u003d new EditCommand.EditCarparkDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//     * Returns an {@code EditCarparkDescriptor} with fields containing {@code carpark}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        descriptor \u003d new EditCommand.EditCarparkDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//     * Sets the {@code Name} of the {@code EditCarparkDescriptor} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//     * Sets the {@code Phone} of the {@code EditCarparkDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//     * Sets the {@code Email} of the {@code EditCarparkDescriptor} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//     * Sets the {@code Address} of the {@code EditCarparkDescriptor} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditCarparkDescriptor}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//     * that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    public EditCarparkDescriptor build() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//        return descriptor;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditCarparkDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Returns an add command string for adding the {@code carpark}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Returns the part of command string for the given {@code carpark}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     * Returns the part of command string for the given {@code EditCarparkDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    public static String getEditPersonDescriptorDetails(EditCarparkDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 53,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Returns the middle index of the carpark in the {@code model}\u0027s carpark list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCarparkList().size() / 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Returns the last index of the carpark in the {@code model}\u0027s carpark list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCarparkList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Returns the carpark in the {@code model}\u0027s carpark list at {@code index}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static Carpark getCarpark(Model model, Index index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return model.getFilteredCarparkList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 9,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalCarparks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_JULIETT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_KILO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARPARK_NUMBER_JULIETT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARPARK_NUMBER_KILO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARPARK_TYPE_JULIETT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CARPARK_TYPE_KILO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COORDINATE_JULIETT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COORDINATE_KILO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FREE_PARKING_JULIETT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FREE_PARKING_KILO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOTS_AVAILABLE_JULIETT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOTS_AVAILABLE_KILO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NIGHT_PARKING_JULIETT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NIGHT_PARKING_KILO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SHORT_TERM_JULIETT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SHORT_TERM_KILO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOTAL_LOTS_JULIETT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOTAL_LOTS_KILO;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_OF_PARKING_JULIETT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_OF_PARKING_KILO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": " * A utility class containing a list of {@code Carpark} objects to be used in tests."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class TypicalCarparks {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark ALFA \u003d new CarparkBuilder().withCarparkNumber(\"C7\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withAddress(\"BLK 349-355 CLEMENTI AVE 2\").withCarparkType(\"SURFACE CAR PARK\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withCoordinate(\"21017.6263, 33014.2438\").withLotsAvailable(\"0\").withTotalLots(\"0\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withFreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\").withNightParking(\"YES\").withShortTerm(\"WHOLE DAY\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withTypeOfParking(\"ELECTRONIC PARKING\").withTags(\"Office\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark BRAVO \u003d new CarparkBuilder().withCarparkNumber(\"SK88\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withAddress(\"BLK 451 SENGKANG WEST WAY\").withCarparkType(\"MULTI-STOREY CAR PARK\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withCoordinate(\"32538.8707, 41769.3259\").withLotsAvailable(\"109\").withTotalLots(\"369\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withFreeParking(\"NO\").withNightParking(\"YES\").withShortTerm(\"WHOLE DAY\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withTypeOfParking(\"ELECTRONIC PARKING\").withTags(\"Home\", \"Office\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark CHARLIE \u003d new CarparkBuilder().withCarparkNumber(\"U25\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withAddress(\"BLK 337-353/355-356 BUKIT BATOK ST 34\").withCarparkType(\"SURFACE CAR PARK\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withCoordinate(\"18728.7311, 38350.9289\").withLotsAvailable(\"299\").withTotalLots(\"625\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withFreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\").withNightParking(\"YES\").withShortTerm(\"WHOLE DAY\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withTypeOfParking(\"ELECTRONIC PARKING\").withTags(\"School\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark DELTA \u003d new CarparkBuilder().withCarparkNumber(\"SK23\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withAddress(\"BLK 121E SENGKANG EAST WAY\").withCarparkType(\"MULTI-STOREY CAR PARK\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withCoordinate(\"36099.0459, 40907.1776\").withLotsAvailable(\"410\").withTotalLots(\"672\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withFreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\").withNightParking(\"YES\").withShortTerm(\"WHOLE DAY\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withTypeOfParking(\"ELECTRONIC PARKING\").withTags(\"Office\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark ECHO \u003d new CarparkBuilder().withCarparkNumber(\"PP5\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withAddress(\"BLK 113 TO 120 POTONG PASIR AVENUE 1\").withCarparkType(\"SURFACE CAR PARK\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withCoordinate(\"31328.0300, 35388.2500\").withLotsAvailable(\"92\").withTotalLots(\"321\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withFreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\").withNightParking(\"YES\").withShortTerm(\"NO\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withTypeOfParking(\"ELECTRONIC PARKING\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark FOXTROT \u003d new CarparkBuilder().withCarparkNumber(\"SE39\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withAddress(\"BLK 542A SERANGOON NORTH AVENUE 4\").withCarparkType(\"MULTI-STOREY CAR PARK\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withCoordinate(\"32271.7043, 39500.6075\").withLotsAvailable(\"39\").withTotalLots(\"206\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withFreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\").withNightParking(\"NO\").withShortTerm(\"7AM-10.30PM\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withTypeOfParking(\"ELECTRONIC PARKING\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark GOLF \u003d new CarparkBuilder().withCarparkNumber(\"W676\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withAddress(\"BLK 676 WOODLANDS DRIVE 71\").withCarparkType(\"BASEMENT CAR PARK\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withCoordinate(\"24373.6740, 46827.1390\").withLotsAvailable(\"186\").withTotalLots(\"230\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withFreeParking(\"NO\").withNightParking(\"YES\").withShortTerm(\"WHOLE DAY\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withTypeOfParking(\"ELECTRONIC PARKING\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark HOTEL \u003d new CarparkBuilder().withCarparkNumber(\"A29\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withAddress(\"BLK 347 ANG MO KIO AVENUE 3\").withCarparkType(\"SURFACE CAR PARK\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withCoordinate(\"29713.5035, 38806.4544\").withLotsAvailable(\"38\").withTotalLots(\"466\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withFreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\").withNightParking(\"YES\").withShortTerm(\"WHOLE DAY\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withTypeOfParking(\"ELECTRONIC PARKING\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark INDIA \u003d new CarparkBuilder().withCarparkNumber(\"JM16\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withAddress(\"BLK 659 JURONG WEST ST 65\").withCarparkType(\"MULTI-STOREY CAR PARK\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withCoordinate(\"13399.3160, 35488.4096\").withLotsAvailable(\"155\").withTotalLots(\"534\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withFreeParking(\"SUN \u0026 PH FR 7AM-10.30PM\").withNightParking(\"YES\").withShortTerm(\"WHOLE DAY\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "            .withTypeOfParking(\"ELECTRONIC PARKING\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark JULIETT \u003d new CarparkBuilder().withCarparkNumber(VALID_CARPARK_NUMBER_JULIETT)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withAddress(VALID_ADDRESS_JULIETT).withCarparkType(VALID_CARPARK_TYPE_JULIETT)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withCoordinate(VALID_COORDINATE_JULIETT).withLotsAvailable(VALID_LOTS_AVAILABLE_JULIETT)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withTotalLots(VALID_TOTAL_LOTS_JULIETT).withFreeParking(VALID_FREE_PARKING_JULIETT)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withNightParking(VALID_NIGHT_PARKING_JULIETT).withShortTerm(VALID_SHORT_TERM_JULIETT)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withTypeOfParking(VALID_TYPE_OF_PARKING_JULIETT).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final Carpark KILO \u003d new CarparkBuilder().withCarparkNumber(VALID_CARPARK_NUMBER_KILO)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withAddress(VALID_ADDRESS_KILO).withCarparkType(VALID_CARPARK_TYPE_KILO)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withCoordinate(VALID_COORDINATE_KILO).withLotsAvailable(VALID_LOTS_AVAILABLE_KILO)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withTotalLots(VALID_TOTAL_LOTS_KILO).withFreeParking(VALID_FREE_PARKING_KILO)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withNightParking(VALID_NIGHT_PARKING_KILO).withShortTerm(VALID_SHORT_TERM_KILO)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            .withTypeOfParking(VALID_TYPE_OF_PARKING_KILO).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static final String KEYWORD_MATCHING_SENGKANG \u003d \"SENGKANG\"; // A keyword that matches SENGKANG*/"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private TypicalCarparks() {} // prevents instantiation"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical car parks."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (Carpark carpark : getTypicalCarparks()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            ab.addCarpark(carpark);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static List\u003cCarpark\u003e getTypicalCarparks() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALFA, BRAVO, CHARLIE, DELTA, ECHO, FOXTROT, GOLF));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 28,
      "Alvinnyk": 4,
      "-": 26,
      "ZhuanYu": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final Index INDEX_FIRST_CARPARK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final Index INDEX_SECOND_CARPARK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static final Index INDEX_THIRD_CARPARK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.ALFA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.commons.events.ui.CarparkPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private CarparkPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        selectionChangedEventStub \u003d new CarparkPanelSelectionChangedEvent(ALFA);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // associated web page of a car park"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                + ALFA.getCarparkNumber().value.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 4,
      "-": 42,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CarparkCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysCarpark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import guitests.guihandles.CarparkCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.testutil.CarparkBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "public class CarparkCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark carparkWithNoTags \u003d new CarparkBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        CarparkCard carparkCard \u003d new CarparkCard(carparkWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uiPartRule.setUiPart(carparkCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCardDisplay(carparkCard, carparkWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark carparkWithTags \u003d new CarparkBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        carparkCard \u003d new CarparkCard(carparkWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        uiPartRule.setUiPart(carparkCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCardDisplay(carparkCard, carparkWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark carpark \u003d new CarparkBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        CarparkCard carparkCard \u003d new CarparkCard(carpark, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // same carpark, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        CarparkCard copy \u003d new CarparkCard(carpark, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(carparkCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(carparkCard.equals(carparkCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertFalse(carparkCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertFalse(carparkCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // different carpark, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark differentCarpark \u003d new CarparkBuilder().withCarparkNumber(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertFalse(carparkCard.equals(new CarparkCard(differentCarpark, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // same carpark, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertFalse(carparkCard.equals(new CarparkCard(carpark, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Asserts that {@code carparkCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private void assertCardDisplay(CarparkCard carparkCard, Carpark expectedCarpark, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        CarparkCardHandle carparkCardHandle \u003d new CarparkCardHandle (carparkCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", carparkCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lexzt"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        // verify carpark details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCardDisplaysCarpark(expectedCarpark, carparkCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 71,
      "ZhuanYu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CarparkListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.getTypicalCarparks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CARPARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysCarpark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import guitests.guihandles.CarparkCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import guitests.guihandles.CarparkListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "public class CarparkListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final ObservableList\u003cCarpark\u003e TYPICAL_CARPARKS \u003d FXCollections.observableList(getTypicalCarparks());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_CARPARK);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private CarparkListPanelHandle carparkListPanelHandle;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        initUi(TYPICAL_CARPARKS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_CARPARKS.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            carparkListPanelHandle.navigateToCard(TYPICAL_CARPARKS.get(i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            Carpark expectedCarpark \u003d TYPICAL_CARPARKS.get(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            CarparkCardHandle actualCard \u003d carparkListPanelHandle.getCarparkCardHandle(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            assertCardDisplaysCarpark(expectedCarpark, actualCard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        initUi(TYPICAL_CARPARKS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkCardHandle expectedCarpark \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                carparkListPanelHandle.getCarparkCardHandle(INDEX_SECOND_CARPARK.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkCardHandle selectedCarpark \u003d carparkListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertCardEquals(expectedCarpark, selectedCarpark);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Verifies that creating and deleting large number of car parks in {@code CarparkListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ObservableList\u003cCarpark\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }, \"Creation and deletion of car park cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns a list of car parks containing {@code carparkCount} car parks that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * {@code CarparkListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private ObservableList\u003cCarpark\u003e createBackingList(int carparkCount) throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithCarparks(carparkCount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getCarparkList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Returns a .xml file containing {@code carparkCount}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * carparks. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private Path createXmlFileWithCarparks(int carparkCount) throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        for (int i \u003d 0; i \u003c carparkCount; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003ccarparks\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003ccarparkNumber\u003e\").append(i).append(\"a\u003c/carparkNumber\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003ccarparkType\u003eb\u003c/carparkType\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003ccoordinate\u003e456.456, 123.123\u003c/coordinate\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003ctotalLots\u003e2\u003c/totalLots\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003clotsAvailable\u003e1\u003c/lotsAvailable\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003cfreeParking\u003ey\u003c/freeParking\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003cnightParking\u003en\u003c/nightParking\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003cshortTerm\u003es\u003c/shortTerm\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003ctypeOfParking\u003et\u003c/typeOfParking\u003e\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            builder.append(\"\u003c/carparks\u003e\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Path manyCarparksFile \u003d TEST_DATA_FOLDER.resolve(\"manyCarparks.xml\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        FileUtil.createFile(manyCarparksFile);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        FileUtil.writeToFile(manyCarparksFile, builder.toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        manyCarparksFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return manyCarparksFile;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Initializes {@code carparkListPanelHandle} with a {@code CarparkListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code CarparkListPanel}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    private void initUi(ObservableList\u003cCarpark\u003e backingList) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        CarparkListPanel carparkListPanel \u003d new CarparkListPanel(backingList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        uiPartRule.setUiPart(carparkListPanel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        carparkListPanelHandle \u003d new CarparkListPanelHandle(getChildNode(carparkListPanel.getRoot(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                CarparkListPanelHandle.CARPARK_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "ZhuanYu": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import guitests.guihandles.CarparkCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import guitests.guihandles.CarparkListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static void assertCardEquals(CarparkCardHandle expectedCard, CarparkCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getCarparkNumber(), actualCard.getCarparkNumber());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getCarparkType(), actualCard.getCarparkType());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getCoordinate(), actualCard.getCoordinate());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getFreeParking(), actualCard.getFreeParking());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getLotsAvailable(), actualCard.getLotsAvailable());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getNightParking(), actualCard.getNightParking());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getShortTerm(), actualCard.getShortTerm());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getTotalLots(), actualCard.getTotalLots());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCard.getTypeOfParking(), actualCard.getTypeOfParking());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedCarpark}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static void assertCardDisplaysCarpark(Carpark expectedCarpark, CarparkCardHandle actualCard) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCarpark.getCarparkNumber().value, actualCard.getCarparkNumber());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCarpark.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(expectedCarpark.getCarparkType().value, actualCard.getCarparkType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(\"Coordinate: \" + expectedCarpark.getCoordinate().value, actualCard.getCoordinate());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        if (expectedCarpark.getTotalLots().value.equals(\"0\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            assertEquals(\"Total Lots: Not Available\", actualCard.getTotalLots());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            assertEquals(\"Lots Available: Not Available\", actualCard.getLotsAvailable());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            assertEquals(\"Total Lots: \" + expectedCarpark.getTotalLots().value, actualCard.getTotalLots());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            assertEquals(\"Lots Available: \" + expectedCarpark.getLotsAvailable().value, actualCard.getLotsAvailable());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(\"Free Parking: \" + expectedCarpark.getFreeParking().value, actualCard.getFreeParking());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(\"Night Parking: \" + expectedCarpark.getNightParking().value, actualCard.getNightParking());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(\"Short Term Parking: \" + expectedCarpark.getShortTerm().value, actualCard.getShortTerm());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(\"Parking System: \" + expectedCarpark.getTypeOfParking().value, actualCard.getTypeOfParking());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(expectedCarpark.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Asserts that the list in {@code carparkListPanelHandle} displays the details of {@code carparks} correctly and"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static void assertListMatching(CarparkListPanelHandle carparkListPanelHandle, Carpark... carparks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        for (int i \u003d 0; i \u003c carparks.length; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            carparkListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "            assertCardDisplaysCarpark(carparks[i], carparkListPanelHandle.getCarparkCardHandle(i));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Asserts that the list in {@code carparkListPanelHandle} displays the details of {@code carparks} correctly and"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static void assertListMatching(CarparkListPanelHandle carparkListPanelHandle, List\u003cCarpark\u003e carparks) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertListMatching(carparkListPanelHandle, carparks.toArray(new Carpark[0]));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Asserts the size of the list in {@code carparkListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    public static void assertListSize(CarparkListPanelHandle carparkListPanelHandle, int size) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        int numberOfCarpark \u003d carparkListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertEquals(size, numberOfCarpark);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 18,
      "-": 47,
      "ZhuanYu": 27
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "import guitests.guihandles.CarparkListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import seedu.address.testutil.TypicalCarparks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        return TypicalCarparks.getTypicalAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    public CarparkListPanelHandle getCarparkListPanel() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        return mainWindowHandle.getCarparkListPanel();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     * Displays all car parks in the address book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "    protected void showAllCarparks() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(getModel().getAddressBook().getCarparkList().size(), getModel().getFilteredCarparkList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Displays all car parks with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    protected void showCarparksWithName(String keyword) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(getModel().getFilteredCarparkList().size() \u003c getModel().getAddressBook().getCarparkList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Selects the car park at {@code index} of the displayed list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    protected void selectCarpark(Index index) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(index.getZeroBased(), getCarparkListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Deletes all car parks in the address book."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "    protected void deleteAllCarparks() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getCarparkList().size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same car park objects as {@code expectedModel}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * and the car park list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        assertListMatching(getCarparkListPanel(), expectedModel.getFilteredCarparkList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code CarparkListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        getCarparkListPanel().rememberSelectedCarparkCard();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * of the previously selected car park."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        assertFalse(getCarparkListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the car park in the car park list panel at"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     * @see CarparkListPanelHandle#isSelectedCarparkCardChanged()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        getCarparkListPanel().navigateToCard(getCarparkListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        String selectedCardCarparkNumber \u003d getCarparkListPanel().getHandleToSelectedCard().getCarparkNumber();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardCarparkNumber.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getCarparkListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the car park list panel remain unchanged."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "     * @see CarparkListPanelHandle#isSelectedCarparkCardChanged()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        assertFalse(getCarparkListPanel().isSelectedCarparkCardChanged());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dlworldpeace"
        },
        "content": "        assertListMatching(getCarparkListPanel(), getModel().getFilteredCarparkList());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dlworldpeace": 18,
      "Lexzt": 11,
      "-": 258,
      "ZhuanYu": 7
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.KEYWORD_MATCHING_SENGKANG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        /* Case: selects first card in car park list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        selectCarpark(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        /* Case: filters the car park list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        showCarparksWithName(KEYWORD_MATCHING_SENGKANG);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 2,
      "-": 96,
      "ZhuanYu": 3
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_CARPARK_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TestUtil.getCarpark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.KEYWORD_MATCHING_SENGKANG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARPARK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown ------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: delete the first car park in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_CARPARK.getOneBased() + \"      \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Carpark deletedPerson \u003d removeCarpark(expectedModel, INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_CARPARK_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: delete the last car park in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: undo deleting the last car park in the list -\u003e last car park restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: redo deleting the last car park in the list -\u003e last car park deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        removeCarpark(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: delete the middle car park in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: filtered car park list, delete index within bounds of address book and car park list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        showCarparksWithName(KEYWORD_MATCHING_SENGKANG);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        Index index \u003d INDEX_FIRST_CARPARK;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredCarparkList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: filtered car park list, delete index within bounds of address book but out of bounds of car park list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        showCarparksWithName(KEYWORD_MATCHING_SENGKANG);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getCarparkList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* --------------------- Performing delete operation while a car park card is selected ---------------------- */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: delete the selected car park -\u003e car park list panel selects the car park before the deleted car park */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        showAllCarparks();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        selectCarpark(selectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        deletedPerson \u003d removeCarpark(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_CARPARK_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ----------------------------------- */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                getModel().getAddressBook().getCarparkList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * Removes the {@code Carpark} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * @return the removed car park"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private Carpark removeCarpark(Model model, Index index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark targetCarpark \u003d getCarpark(model, index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        model.deleteCarpark(targetCarpark);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return targetCarpark;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * Deletes the car park at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Carpark deletedCarpark \u003d removeCarpark(expectedModel, toDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_CARPARK_SUCCESS, deletedCarpark);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 11,
      "-": 151,
      "ZhuanYu": 31
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CARPARKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.BRAVO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.CHARLIE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.DELTA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.KEYWORD_MATCHING_SENGKANG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         * -\u003e 2 car parks found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SENGKANG + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BRAVO, DELTA); // addresses contains sengkang"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: repeat previous find command where car park list is displaying the car parks we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         * -\u003e 2 car parks found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SENGKANG;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find car park where car park list is not displaying the car park we are finding"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         * -\u003e 1 car park found"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" U25\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CHARLIE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find multiple car parks in address book, 2 keywords -\u003e 2 car parks found */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" SK88 SK23\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BRAVO, DELTA);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find multiple car parks in address book, 2 keywords in reversed order -\u003e 2 car parks found */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" SK23 SK88\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find multiple car parks in address book, 2 keywords with 1 repeat -\u003e 2 car parks found */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" SK23 SK88 SK23\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find multiple car parks in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         * -\u003e 2 car parks found"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" SK23 SK88 NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find same car parks in address book after deleting 1 of them -\u003e 1 car park found */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertFalse(getModel().getAddressBook().getCarparkList().contains(BRAVO));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SENGKANG;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DELTA);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find car park in address book, keyword is same as name but of different case"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         * -\u003e 1 car park found"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" SeNgKaNg\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find car park in address book, keyword is substring of name -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Sen\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find car park in address book, name is substring of keyword -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Sengkangs\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find car park not in address book -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" AK47\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find type of car park in address book -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DELTA.getCarparkType().value;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find coordinate of car park in address book -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DELTA.getCoordinate().value;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find lots available of car park in address book -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DELTA.getLotsAvailable().value;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find total lots of car park in address book -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DELTA.getTotalLots().value;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find free parking of car park in address book -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DELTA.getFreeParking().value;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find night parking of car park in address book -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DELTA.getNightParking().value;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find short term parking of car park in address book -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DELTA.getShortTerm().value;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        /* Case: find type of parking of car park in address book -\u003e 0 car parks found */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DELTA.getTypeOfParking().value;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        /* Case: find tags of carpark in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DELTA.getTags());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        /* Case: find while a carpark is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        showAllCarparks();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        selectCarpark(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertFalse(getCarparkListPanel().getHandleToSelectedCard().getCarparkNumber().equals("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "                DELTA.getCarparkNumber().value));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" SK23\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DELTA);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        /* Case: find car park in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        deleteAllCarparks();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SENGKANG;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DELTA);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        command \u003d \"FiNd Sengkang\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "     * box displays {@code Messages#MESSAGE_CARPARKS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                MESSAGE_CARPARKS_LISTED_OVERVIEW, expectedModel.getFilteredCarparkList().size());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 6,
      "-": 146,
      "ZhuanYu": 75
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARPARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        getCarparkListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARPARK.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertListMatching(getCarparkListPanel(), getModel().getFilteredCarparkList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARPARK.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 5,
      "-": 102
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import seedu.address.model.carpark.Carpark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static final Predicate\u003cCarpark\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cCarpark\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        Optional\u003cPredicate\u003cCarpark\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        model.updateFilteredCarparkList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    public static void setFilteredList(Model model, Carpark... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "    private static Predicate\u003cCarpark\u003e getPredicateMatching(Carpark other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        return carpark -\u003e carpark.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 8,
      "-": 31
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_CARPARK_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "import static seedu.address.testutil.TypicalCarparks.KEYWORD_MATCHING_SENGKANG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CARPARK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        /* Case: select the first card in the car park list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARPARK.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_CARPARK);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        /* Case: select the last card in the car park list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        /* Case: select the middle card in the car park list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        /* Case: filtered car park list, select index within bounds of address book but out of bounds of car park list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        showCarparksWithName(KEYWORD_MATCHING_SENGKANG);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getCarparkList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        /* Case: filtered car park list, select index within bounds of address book and car park list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredCarparkList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredCarparkList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhuanYu"
        },
        "content": "        deleteAllCarparks();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CARPARK.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                MESSAGE_INVALID_CARPARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected carpark.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * 4. {@code Storage} and {@code CarparkListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "                MESSAGE_SELECT_CARPARK_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getCarparkListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Lexzt"
        },
        "content": "     * 4. {@code Storage} and {@code CarparkListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Lexzt": 22,
      "-": 129,
      "ZhuanYu": 3
    }
  }
]
